================================================================================
--- File: Dockerfile ---
================================================================================

# --- Stage 1: Build ---
# Use a base image with Maven and Java to build the app
FROM maven:3.9.6-eclipse-temurin-17 AS build
WORKDIR /app

# Copy the pom.xml and download dependencies first
# This uses Docker's layer caching effectively
COPY pom.xml .
RUN mvn dependency:go-offline

# Copy the rest of the source code and build the application
COPY src ./src
RUN mvn package -DskipTests

# --- Stage 2: Run ---
# Use a lightweight JRE-only image for the final production container
FROM eclipse-temurin:17-jre-jammy
WORKDIR /app

# Copy the built JAR file from the 'build' stage
COPY --from=build /app/target/*.jar app.jar

# Expose the port the app runs on
EXPOSE 8080

# The command to run the application
ENTRYPOINT ["java", "-jar", "app.jar"]


================================================================================
--- File: pom.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version> <!-- Or your Spring Boot version -->
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>demo</name>
    <description>Demo project for Spring Boot</description>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <!-- Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!-- Data JPA (Persistence) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <!-- Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <!-- JWT Support -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.11.5</version> <!-- Use a recent version -->
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.11.5</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId> <!-- or jjwt-gson if you prefer -->
            <version>0.11.5</version>
            <scope>runtime</scope>
        </dependency>

        <!-- H2 Database (for development/testing) -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!-- Lombok (for boilerplate reduction) -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <!-- DevTools (for live reload, etc.) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Spring Security Test (NEW DEPENDENCY) -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!-- Ensure compiler plugin uses Java 17 and includes Lombok -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version> <!-- Use a recent version -->
                <configuration>
                    <source>${java.version}</source> <!-- Use java.version property -->
                    <target>${java.version}</target> <!-- Use java.version property -->
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version> <!-- Ensure lombok.version is defined in properties or parent -->
                        </path>
                        <!-- other annotation processors -->
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>



================================================================================
--- File: .gitignore ---
================================================================================

# Java
*.class
*.log
*.jar
*.war
*.ear
*.zip
*.tar.gz
*.rar

# Maven
target/
.mvn/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml

# IntelliJ
.idea/
*.iml
*.iws

# Other
.DS_Store


================================================================================
--- File: package-lock.json ---
================================================================================

{
  "name": "Spring-Boot-Docker",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "dependencies": {
        "pip": "^0.0.1",
        "python": "^0.0.4"
      }
    },
    "node_modules/freckle": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/freckle/-/freckle-0.0.2.tgz",
      "integrity": "sha512-+x+LoiQ4IDln6qgVyXEHAvu2uD/mRqdezrbx8tpwGwvEWH2gCho4eoe3uKzV4PAzBUjtViSbYLkilMRFy69B5g==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "0.0.10",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-0.0.10.tgz",
      "integrity": "sha512-iotkTvxc+TwOm5Ieim8VnSNvCDjCK9S8G3scJ50ZthspSxa7jx50jkhYduuAtAjvfDUwSgOwf8+If99AlOEhyw==",
      "license": "MIT"
    },
    "node_modules/optimist": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/optimist/-/optimist-0.6.1.tgz",
      "integrity": "sha512-snN4O4TkigujZphWLN0E//nQmm7790RYaE53DdL7ZYwee2D8DDo9/EyYiKUfN3rneWUjhJnueija3G9I2i0h3g==",
      "license": "MIT/X11",
      "dependencies": {
        "minimist": "~0.0.1",
        "wordwrap": "~0.0.2"
      }
    },
    "node_modules/pip": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/pip/-/pip-0.0.1.tgz",
      "integrity": "sha512-DMoVWIlQTKcVZAnTZXt4QXPkuA9EFDUhksMOI8OLXIBq3i+W+lFCE+kr5pGDb0vy0f+WZvq0M0Pg7a8K+vNxPA==",
      "dependencies": {
        "freckle": ">= 0.0.1",
        "optimist": ">= 0.1.5"
      },
      "bin": {
        "pip": "lib/cli.js"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/python": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/python/-/python-0.0.4.tgz",
      "integrity": "sha512-7avKA/6XxrwcGSDes8xGn7FHAUdAUQXKHtpjDulyv5/nm7TcPblmPRvXjjwx5knWHqeRiipqH/TZR2HhmJ4CGQ==",
      "engines": {
        "node": ">= 0.4.1"
      }
    },
    "node_modules/wordwrap": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.3.tgz",
      "integrity": "sha512-1tMA907+V4QmxV7dbRvb4/8MaRALK6q9Abid3ndMYnbyo8piisCmeONVqVSXqQA3KaP4SLt5b7ud6E2sqP8TFw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    }
  }
}


================================================================================
--- File: package.json ---
================================================================================

{
  "dependencies": {
    "pip": "^0.0.1",
    "python": "^0.0.4"
  }
}


================================================================================
--- File: docker-compose.yml ---
================================================================================

version: '3.8'
services:
  app:
    # We use a base image that has both Maven and the correct Java version
    image: maven:3.9.6-eclipse-temurin-17
    
    # The command to run the app with devtools and remote debugging enabled
    # This is the magic for live-reload and debugging!
    command: >
      mvn spring-boot:run 
      -Dspring-boot.run.jvmArguments="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
      
    working_dir: /app
    
    volumes:
      # 1. Mounts your current project directory into the container's /app directory
      - .:/app
      # 2. Mounts your local Maven cache into the container
      #    This prevents re-downloading dependencies every time!
      #    Note: On Windows, you might need to adjust ~/.m2 to the full path C:/Users/YourUser/.m2
      - ~/.m2:/root/.m2
      
    ports:
      # 1. Maps your local port 8080 to the container's port 8080 (for the web app)
      - "8080:8080"
      # 2. Maps your local port 5005 to the container's port 5005 (for the Java Debugger)
      - "5005:5005"


================================================================================
--- File: node_modules/.package-lock.json ---
================================================================================

{
  "name": "Spring-Boot-Docker",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "node_modules/freckle": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/freckle/-/freckle-0.0.2.tgz",
      "integrity": "sha512-+x+LoiQ4IDln6qgVyXEHAvu2uD/mRqdezrbx8tpwGwvEWH2gCho4eoe3uKzV4PAzBUjtViSbYLkilMRFy69B5g==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "0.0.10",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-0.0.10.tgz",
      "integrity": "sha512-iotkTvxc+TwOm5Ieim8VnSNvCDjCK9S8G3scJ50ZthspSxa7jx50jkhYduuAtAjvfDUwSgOwf8+If99AlOEhyw==",
      "license": "MIT"
    },
    "node_modules/optimist": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/optimist/-/optimist-0.6.1.tgz",
      "integrity": "sha512-snN4O4TkigujZphWLN0E//nQmm7790RYaE53DdL7ZYwee2D8DDo9/EyYiKUfN3rneWUjhJnueija3G9I2i0h3g==",
      "license": "MIT/X11",
      "dependencies": {
        "minimist": "~0.0.1",
        "wordwrap": "~0.0.2"
      }
    },
    "node_modules/pip": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/pip/-/pip-0.0.1.tgz",
      "integrity": "sha512-DMoVWIlQTKcVZAnTZXt4QXPkuA9EFDUhksMOI8OLXIBq3i+W+lFCE+kr5pGDb0vy0f+WZvq0M0Pg7a8K+vNxPA==",
      "dependencies": {
        "freckle": ">= 0.0.1",
        "optimist": ">= 0.1.5"
      },
      "bin": {
        "pip": "lib/cli.js"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/python": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/python/-/python-0.0.4.tgz",
      "integrity": "sha512-7avKA/6XxrwcGSDes8xGn7FHAUdAUQXKHtpjDulyv5/nm7TcPblmPRvXjjwx5knWHqeRiipqH/TZR2HhmJ4CGQ==",
      "engines": {
        "node": ">= 0.4.1"
      }
    },
    "node_modules/wordwrap": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.3.tgz",
      "integrity": "sha512-1tMA907+V4QmxV7dbRvb4/8MaRALK6q9Abid3ndMYnbyo8piisCmeONVqVSXqQA3KaP4SLt5b7ud6E2sqP8TFw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    }
  }
}


================================================================================
--- File: .git/ORIG_HEAD ---
================================================================================

a42d4cebe2a7effcd05da5a82289981bc671c39e


================================================================================
--- File: .git/config ---
================================================================================

[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/rlaird-elite/Spring-Boot-Docker
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main


================================================================================
--- File: .git/HEAD ---
================================================================================

ref: refs/heads/main


================================================================================
--- File: .git/description ---
================================================================================

Unnamed repository; edit this file 'description' to name the repository.


================================================================================
--- File: .git/packed-refs ---
================================================================================

# pack-refs with: peeled fully-peeled sorted 
25edd04bf030a59a6e21fbade9fd8bd69c2da44e refs/remotes/origin/main


================================================================================
--- File: .git/COMMIT_EDITMSG ---
================================================================================

Work Order Role based security applied, all tests passed


================================================================================
--- File: .git/FETCH_HEAD ---
================================================================================

a42d4cebe2a7effcd05da5a82289981bc671c39e		branch 'main' of https://github.com/rlaird-elite/Spring-Boot-Docker


================================================================================
--- File: .idea/encodings.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Encoding">
    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
  </component>
</project>

================================================================================
--- File: .idea/jarRepositories.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RemoteRepositoriesConfiguration">
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Central Repository" />
      <option name="url" value="https://repo.maven.apache.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Maven Central repository" />
      <option name="url" value="https://repo1.maven.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="jboss.community" />
      <option name="name" value="JBoss Community repository" />
      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
    </remote-repository>
  </component>
</project>

================================================================================
--- File: .idea/vcs.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="" vcs="Git" />
  </component>
</project>

================================================================================
--- File: .idea/.gitignore ---
================================================================================

# Default ignored files
/shelf/
/workspace.xml
# Editor-based HTTP Client requests
/httpRequests/
# Datasource local storage ignored files
/dataSources/
/dataSources.local.xml


================================================================================
--- File: .idea/workspace.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="20b3bcf5-253d-4784-b322-c912dee4c770" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/CollectCode.py" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/com/example/demo/permission/Permission.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/com/example/demo/permission/PermissionRepository.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/demo/property/PropertyService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/demo/property/PropertyService.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/demo/user/AuthServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/demo/user/AuthServiceImpl.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/demo/user/CustomUserDetailsService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/demo/user/CustomUserDetailsService.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/demo/user/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/demo/user/User.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/demo/user/UserRegistrationRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/demo/user/UserRegistrationRequest.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/java/demo/property/PropertyServiceTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/demo/property/PropertyServiceTest.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/java/demo/user/AuthControllerTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/demo/user/AuthControllerTest.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/java/demo/user/AuthServiceTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/demo/user/AuthServiceTest.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/java/demo/vendor/VendorControllerTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/demo/vendor/VendorControllerTest.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/java/demo/vendor/VendorServiceTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/demo/vendor/VendorServiceTest.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/java/demo/workorder/WorkOrderControllerTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/demo/workorder/WorkOrderControllerTest.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/java/demo/workorder/WorkOrderServiceTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/demo/workorder/WorkOrderServiceTest.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="KubernetesApiPersistence"><![CDATA[{}]]></component>
  <component name="KubernetesApiProvider"><![CDATA[{
  "isMigrated": true
}]]></component>
  <component name="ProjectColorInfo"><![CDATA[{
  "associatedIndex": 0
}]]></component>
  <component name="ProjectId" id="34UEvNZEbXmrl1HofmtO7U3MZhm" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Application.DemoApplication.executor": "Run",
    "Docker.Dockerfile.executor": "Run",
    "JUnit.All in demo.executor": "Run",
    "JUnit.AuthControllerTest.executor": "Run",
    "JUnit.PropertyControllerTest.executor": "Run",
    "JUnit.VendorControllerTest.executor": "Run",
    "JUnit.VendorServiceTest.executor": "Run",
    "JUnit.WorkOrderControllerTest.executor": "Run",
    "JUnit.WorkOrderServiceTest.executor": "Run",
    "JUnit.java in demo.executor": "Run",
    "JUnit.workorder in demo.executor": "Run",
    "Maven.demo [clean].executor": "Run",
    "Maven.demo [install].executor": "Run",
    "ModuleVcsDetector.initialDetectionPerformed": "true",
    "RequestMappingsPanelOrder0": "0",
    "RequestMappingsPanelOrder1": "1",
    "RequestMappingsPanelWidth0": "75",
    "RequestMappingsPanelWidth1": "75",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager.252": "true",
    "RunOnceActivity.git.unshallow": "true",
    "Spring Boot.DemoApplication.executor": "Run",
    "com.intellij.ml.llm.matterhorn.ej.ui.settings.DefaultModelSelectionForGA.v1": "true",
    "git-widget-placeholder": "main",
    "junie.onboarding.icon.badge.shown": "true",
    "kotlin-language-version-configured": "true",
    "last_opened_file_path": "/Users/rlaird/Desktop/Java/Spring-Boot-Docker",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "project.structure.last.edited": "Project",
    "project.structure.proportion": "0.0",
    "project.structure.side.proportion": "0.0",
    "to.speed.mode.migration.done": "true",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RunManager" selected="JUnit.java in demo">
    <configuration name="AuthControllerTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="demo" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.example.demo.user.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="com.example.demo.user" />
      <option name="MAIN_CLASS_NAME" value="com.example.demo.user.AuthControllerTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="PropertyControllerTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="demo" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.example.demo.property.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="com.example.demo.property" />
      <option name="MAIN_CLASS_NAME" value="com.example.demo.property.PropertyControllerTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="VendorServiceTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="demo" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.example.demo.vendor.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="com.example.demo.vendor" />
      <option name="MAIN_CLASS_NAME" value="com.example.demo.vendor.VendorServiceTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="WorkOrderServiceTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="demo" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.example.demo.workorder.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="com.example.demo.workorder" />
      <option name="MAIN_CLASS_NAME" value="com.example.demo.workorder.WorkOrderServiceTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="java in demo" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="demo" />
      <option name="TEST_OBJECT" value="directory" />
      <dir value="$PROJECT_DIR$/src/test/java" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="DemoApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <option name="FRAME_DEACTIVATION_UPDATE_POLICY" value="UpdateClassesAndResources" />
      <module name="demo" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.example.demo.DemoApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="docker-deploy" factoryName="dockerfile" temporary="true">
      <deployment type="dockerfile" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="JUnit.java in demo" />
        <item itemvalue="JUnit.WorkOrderServiceTest" />
        <item itemvalue="JUnit.VendorServiceTest" />
        <item itemvalue="JUnit.AuthControllerTest" />
        <item itemvalue="JUnit.PropertyControllerTest" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9823dce3aa75-bf35d07a577b-intellij.indexing.shared.core-IU-252.26830.84" />
        <option value="bundled-js-predefined-d6986cc7102b-3aa1da707db6-JavaScript-IU-252.26830.84" />
      </set>
    </attachedChunks>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="20b3bcf5-253d-4784-b322-c912dee4c770" name="Changes" comment="" />
      <created>1761259979185</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1761259979185</updated>
      <workItem from="1761259980250" duration="36684000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
</project>

================================================================================
--- File: .idea/misc.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="corretto-17" project-jdk-type="JavaSDK" />
</project>

================================================================================
--- File: .idea/compiler.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <annotationProcessing>
      <profile default="true" name="Default" enabled="true" />
      <profile name="Annotation profile for demo" enabled="true">
        <sourceOutputDir name="target/generated-sources/annotations" />
        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
        <outputRelativeToContentRoot value="true" />
        <processorPath useClasspath="false">
          <entry name="$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar" />
        </processorPath>
        <module name="demo" />
      </profile>
    </annotationProcessing>
  </component>
  <component name="JavacSettings">
    <option name="ADDITIONAL_OPTIONS_OVERRIDE">
      <module name="demo" options="-parameters" />
    </option>
  </component>
</project>

================================================================================
--- File: src/main/resources/application.properties ---
================================================================================

# H2 Database Configuration
# Enable H2 console access in the browser
spring.h2.console.enabled=true
# Set the path for the H2 console (optional, defaults to /h2-console)
spring.h2.console.path=/h2-console
# Datasource configuration (using H2 in-memory database)
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
# JPA settings (optional, good defaults)
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# Automatically create/update database schema (use 'validate' or 'none' in production)
spring.jpa.hibernate.ddl-auto=update

# JWT Configuration
# IMPORTANT: Generate a strong, secure secret key for production!
# This is just an example. You can generate one online (e.g., using openssl rand -base64 32)
app.jwt.secret=YourSuperSecretKeyWhichShouldBeLongAndSecureAndRandom12345
# Token expiration time in milliseconds (e.g., 1 hour = 3600000 ms)
app.jwt.expiration-in-ms=3600000



================================================================================
--- File: src/main/java/com/example/demo/SecurityConfig.java ---
================================================================================

package com.example.demo;

import com.example.demo.user.CustomUserDetailsService;
import com.example.demo.user.JwtAuthenticationFilter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity; // Import this
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;
import java.util.List;

import static org.springframework.security.config.Customizer.withDefaults;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity // --- ADD THIS ANNOTATION ---
public class SecurityConfig {

    private final CustomUserDetailsService customUserDetailsService;
    private final JwtAuthenticationFilter jwtAuthenticationFilter;

    // Inject dependencies via constructor
    public SecurityConfig(CustomUserDetailsService customUserDetailsService, JwtAuthenticationFilter jwtAuthenticationFilter) {
        this.customUserDetailsService = customUserDetailsService;
        this.jwtAuthenticationFilter = jwtAuthenticationFilter;
    }

    // Bean definition for PasswordEncoder
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // Bean definition for AuthenticationManager
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

    // Bean definition for CORS configuration source
    @Bean
    CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        // Allow requests from your React frontend development server
        configuration.setAllowedOrigins(List.of("http://localhost:3000")); // Adjust if your frontend runs elsewhere
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Cache-Control", "Content-Type"));
        configuration.setAllowCredentials(true); // Allow cookies/auth headers
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration); // Apply CORS to all paths
        return source;
    }


    // Bean definition for the main SecurityFilterChain
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                // Configure CORS using the bean defined above
                .cors(cors -> cors.configurationSource(corsConfigurationSource()))
                // Disable CSRF protection (common for stateless JWT APIs)
                // Ensure you understand the implications if not using standard browser sessions
                .csrf(csrf -> csrf.disable())
                // Configure session management to be stateless
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                // Configure authorization rules
                .authorizeHttpRequests(authz -> authz
                        // Allow public access to H2 console (for development ONLY!)
                        // IMPORTANT: Disable or secure this properly in production
                        .requestMatchers("/h2-console/**").permitAll()
                        // Allow public access to authentication endpoints
                        .requestMatchers("/api/auth/**").permitAll()
                        // Require authentication for any other request
                        .anyRequest().authenticated()
                )
                // Configure headers, especially for H2 console frame options
                .headers(headers -> headers
                        .frameOptions(frameOptions -> frameOptions.sameOrigin()) // Needed for H2 console
                )
                // Add the JWT filter before the standard username/password authentication filter
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);


        return http.build();
    }
}



================================================================================
--- File: src/main/java/com/example/demo/WebConfig.java ---
================================================================================

package com.example.demo;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig {

    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                // This allows all requests from your React app (running on localhost:3000)
                // to access your Spring Boot API.
                registry.addMapping("/api/**") // Only applies to your API paths
                        .allowedOrigins("http://localhost:3000") // The origin of your React app
                        .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                        .allowedHeaders("*")
                        .allowCredentials(true);
            }
        };
    }
}



================================================================================
--- File: src/main/java/com/example/demo/DemoApplication.java ---
================================================================================

package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * Main entry point for the Spring Boot application.
 * This class should only be responsible for starting the app.
 * All API logic is handled in the @RestController classes (e.g., PropertyController).
 */
@SpringBootApplication
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }

}



================================================================================
--- File: src/main/java/com/example/demo/tenant/TenantRepository.java ---
================================================================================

package com.example.demo.tenant;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface TenantRepository extends JpaRepository<Tenant, Long> {
    // We might need custom queries later, like findByName
    Optional<Tenant> findByName(String name);

    // Method to check if any tenants exist
    boolean existsByNameIsNotNull(); // Or simply count() > 0
}


================================================================================
--- File: src/main/java/com/example/demo/tenant/Tenant.java ---
================================================================================

package com.example.demo.tenant;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "tenants")
@Data // Adds getters, setters, toString, equals, hashCode
@NoArgsConstructor
public class Tenant {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String name;

    // Add other tenant-specific fields here later if needed
    // (e.g., address, subscription level, etc.)

    public Tenant(String name) {
        this.name = name;
    }
}


================================================================================
--- File: src/main/java/com/example/demo/property/PropertyRepository.java ---
================================================================================

package com.example.demo.property;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
// JpaRepository<EntityType, PrimaryKeyType>
public interface PropertyRepository extends JpaRepository<Property, Long> {

    // --- NEW: Tenant-aware find methods ---

    /**
     * Finds all properties belonging to a specific tenant.
     * Replaces the generic findAll().
     * Spring Data JPA automatically creates the query based on the method name.
     */
    List<Property> findAllByTenantId(Long tenantId);

    /**
     * Finds a specific property by its ID, but only if it belongs to the specified tenant.
     * Replaces the generic findById().
     */
    Optional<Property> findByIdAndTenantId(Long id, Long tenantId);

    /**
     * Checks if a property exists by its ID and belongs to the specified tenant.
     * Useful for delete/update operations to ensure the user owns the record.
     */
    boolean existsByIdAndTenantId(Long id, Long tenantId);

    // --- The generic save() and delete() methods from JpaRepository are usually okay,
    // --- as the service layer will ensure the entity has the correct tenantId before saving
    // --- or verify ownership before deleting.
}



================================================================================
--- File: src/main/java/com/example/demo/property/Property.java ---
================================================================================

package com.example.demo.property;

import jakarta.persistence.*;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Data
@NoArgsConstructor
public class Property {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Address is mandatory")
    @Column(nullable = false)
    private String address;

    @NotBlank(message = "Type is mandatory")
    @Column(nullable = false)
    private String type; // e.g., Single Family, Condo, Apartment

    @Min(value = 0, message = "Bedrooms must be non-negative")
    private int bedrooms;

    @Min(value = 0, message = "Bathrooms must be non-negative")
    private int bathrooms;

    // --- NEW: Add Tenant ID ---
    @Column(name = "tenant_id", nullable = false)
    private Long tenantId;
    // --- End Tenant ID ---

}



================================================================================
--- File: src/main/java/com/example/demo/property/PropertyController.java ---
================================================================================

package com.example.demo.property;

// --- Add imports for Validation ---
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/properties")
public class PropertyController {

    private final PropertyService propertyService;

    public PropertyController(PropertyService propertyService) {
        this.propertyService = propertyService;
    }

    @PostMapping
    public ResponseEntity<Property> createProperty(@Valid @RequestBody Property property) {
        // --- The @Valid annotation triggers validation ---
        Property savedProperty = propertyService.createProperty(property);
        return new ResponseEntity<>(savedProperty, HttpStatus.CREATED);
    }

    @GetMapping
    public List<Property> getAllProperties() {
        return propertyService.getAllProperties();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Property> getPropertyById(@PathVariable Long id) {
        Optional<Property> propertyOptional = propertyService.getPropertyById(id);

        return propertyOptional
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PutMapping("/{id}")
    public ResponseEntity<Property> updateProperty(@PathVariable Long id, @Valid @RequestBody Property propertyDetails) {
        // --- Also add @Valid to the update method ---
        Optional<Property> updatedPropertyOptional = propertyService.updateProperty(id, propertyDetails);

        return updatedPropertyOptional
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProperty(@PathVariable Long id) {
        boolean wasDeleted = propertyService.deleteProperty(id);

        if (wasDeleted) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    // --- NEW METHOD ---
    /**
     * Handles validation exceptions for this controller.
     * This is triggered when @Valid fails.
     * It returns a 400 Bad Request with a map of fields and error messages.
     */
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public Map<String, String> handleValidationExceptions(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        return errors;
    }
}



================================================================================
--- File: src/main/java/com/example/demo/property/PropertyService.java ---
================================================================================

package com.example.demo.property;

import com.example.demo.user.User; // Import User
import org.springframework.security.access.prepost.PreAuthorize; // Import PreAuthorize
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional; // Import Transactional

import java.util.List;
import java.util.Optional;

@Service
public class PropertyService {

    private final PropertyRepository propertyRepository;

    public PropertyService(PropertyRepository propertyRepository) {
        this.propertyRepository = propertyRepository;
    }

    // --- Helper method to get current user's tenant ID ---
    private Long getCurrentTenantId() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated() || authentication.getPrincipal().equals("anonymousUser")) {
            throw new IllegalStateException("User must be authenticated to perform this action.");
        }
        Object principal = authentication.getPrincipal();
        if (principal instanceof User) {
            return ((User) principal).getTenantId();
        } else {
            throw new IllegalStateException("Authentication principal is not the expected User type.");
        }
    }

    // No specific auth needed beyond being logged in for tenant
    public List<Property> getAllProperties() {
        Long tenantId = getCurrentTenantId();
        return propertyRepository.findAllByTenantId(tenantId);
    }

    public Optional<Property> getPropertyById(Long id) {
        Long tenantId = getCurrentTenantId();
        return propertyRepository.findByIdAndTenantId(id, tenantId);
    }

    // No specific auth needed beyond being logged in for tenant
    @Transactional
    public Property createProperty(Property property) {
        Long tenantId = getCurrentTenantId();
        property.setTenantId(tenantId);
        return propertyRepository.save(property);
    }

    // No specific auth needed beyond being logged in for tenant
    @Transactional
    public Optional<Property> updateProperty(Long id, Property propertyDetails) {
        Long tenantId = getCurrentTenantId();
        return propertyRepository.findByIdAndTenantId(id, tenantId)
                .map(existingProperty -> {
                    existingProperty.setAddress(propertyDetails.getAddress());
                    existingProperty.setType(propertyDetails.getType());
                    existingProperty.setBedrooms(propertyDetails.getBedrooms());
                    existingProperty.setBathrooms(propertyDetails.getBathrooms());
                    return propertyRepository.save(existingProperty);
                });
    }

    // --- SECURE THE DELETE METHOD ---
    @Transactional
    // --- FIX: Add PreAuthorize annotation ---
    @PreAuthorize("hasAuthority('PERMISSION_DELETE_PROPERTY')") // Use hasAuthority
    public boolean deleteProperty(Long id) {
        // --- END FIX ---
        Long tenantId = getCurrentTenantId();
        if (propertyRepository.existsByIdAndTenantId(id, tenantId)) {
            propertyRepository.deleteById(id);
            return true;
        } else {
            return false;
        }
    }
}



================================================================================
--- File: src/main/java/com/example/demo/user/User.java ---
================================================================================

package com.example.demo.user;

// --- ADD THIS IMPORT ---
import com.example.demo.permission.Permission; // Import Permission
// --- END ADD IMPORT ---
import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
import lombok.EqualsAndHashCode; // Import for Set equality
import lombok.NoArgsConstructor;
import lombok.ToString; // Import for avoiding recursion in toString
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.HashSet; // Import HashSet
import java.util.Set;     // Import Set
import java.util.stream.Collectors; // Import Collectors

@Entity
@Table(name = "app_user")
@Data
@NoArgsConstructor
@EqualsAndHashCode(exclude = "permissions") // Exclude collections from equals/hashCode
@ToString(exclude = "permissions") // Exclude collections from toString to prevent recursion
public class User implements UserDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Username (email) is mandatory")
    @Email(message = "Username must be a valid email")
    @Column(unique = true, nullable = false)
    private String username;

    @NotBlank(message = "Password is mandatory")
    @Column(nullable = false)
    private String password;

    // --- Permissions Relationship ---
    @ManyToMany(fetch = FetchType.EAGER) // Load permissions eagerly with the user
    @JoinTable(
            name = "user_permissions",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "permission_id")
    )
    private Set<Permission> permissions = new HashSet<>(); // Use Set to avoid duplicates
    // --- End Permissions ---


    @Column(name = "tenant_id", nullable = false)
    private Long tenantId;

    // --- UserDetails Methods ---

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        // Map permissions to Spring Security GrantedAuthority objects
        return permissions.stream()
                .map(permission -> new SimpleGrantedAuthority(permission.getName()))
                .collect(Collectors.toList());
    }


    // getPassword(), getUsername(), isAccountNonExpired(), etc. remain the same
    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return username;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}



================================================================================
--- File: src/main/java/com/example/demo/user/AuthController.java ---
================================================================================

package com.example.demo.user;

import com.example.demo.exception.UserAlreadyExistsException;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.util.Map; // Import Map

@RestController
@RequestMapping("/api/auth") // Base path for authentication endpoints
public class AuthController {

    private final AuthService authService;
    private final AuthenticationManager authenticationManager;
    private final JwtTokenProvider jwtTokenProvider;
    // --- UserRepository dependency REMOVED ---

    // Updated Constructor (UserRepository removed)
    public AuthController(AuthService authService,
                          AuthenticationManager authenticationManager,
                          JwtTokenProvider jwtTokenProvider) {
        this.authService = authService;
        this.authenticationManager = authenticationManager;
        this.jwtTokenProvider = jwtTokenProvider;
    }

    @PostMapping("/register")
    public ResponseEntity<User> registerUser(@Valid @RequestBody UserRegistrationRequest registrationRequest) {
        User registeredUser = authService.registerNewUser(registrationRequest);
        // Typically return 200 OK or 201 Created for registration
        return ResponseEntity.ok(registeredUser);
    }

    @PostMapping("/login")
    public ResponseEntity<LoginResponse> loginUser(@Valid @RequestBody LoginRequest loginRequest) {
        // Authenticate the user using Spring Security's AuthenticationManager
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        loginRequest.getUsername(),
                        loginRequest.getPassword()
                )
        );

        // If authentication is successful, set it in the SecurityContext
        SecurityContextHolder.getContext().setAuthentication(authentication);

        // Generate the JWT token
        String jwt = jwtTokenProvider.generateToken(authentication);

        // Return the token in the response body
        return ResponseEntity.ok(new LoginResponse(jwt));
    }

    // Exception handler specific to this controller (optional, can be global)
    // Updated to return a JSON object (Map) instead of a String
    @ExceptionHandler(UserAlreadyExistsException.class)
    @ResponseStatus(HttpStatus.CONFLICT) // Set HTTP status to 409 Conflict
    public Map<String, String> handleUserAlreadyExists(UserAlreadyExistsException ex) {
        return Map.of("message", ex.getMessage());
    }
}



================================================================================
--- File: src/main/java/com/example/demo/user/AuthService.java ---
================================================================================

package com.example.demo.user;

public interface AuthService {
    User registerNewUser(UserRegistrationRequest request);
}


================================================================================
--- File: src/main/java/com/example/demo/user/UserRegistrationRequest.java ---
================================================================================

package com.example.demo.user;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor; // Keep if needed for tests, or use specific constructor
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor // Needed for Jackson/JSON binding
// @AllArgsConstructor // We might not need this if we define specific constructors
public class UserRegistrationRequest {

    @NotBlank(message = "Username (email) is mandatory")
    @Email(message = "Username must be a valid email")
    private String username;

    @NotBlank(message = "Password is mandatory")
    @Size(min = 8, message = "Password must be at least 8 characters long")
    private String password;

    // --- REMOVE Role and TenantId ---
    // These are assigned by the backend service, not sent by the client during registration
    // private User.Role role;
    // private Long tenantId;
    // --- End Remove ---

    // --- Constructor used by tests and potentially internally ---
    public UserRegistrationRequest(String username, String password) {
        this.username = username;
        this.password = password;
    }

    // Lombok's @AllArgsConstructor would generate this, but defining it
    // explicitly makes the dependencies clearer if fields change.
    // If you add more fields *sent by the client*, update this constructor
    // or rely on @AllArgsConstructor if appropriate.
}



================================================================================
--- File: src/main/java/com/example/demo/user/LoginRequest.java ---
================================================================================

package com.example.demo.user;

import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class LoginRequest {
    @NotBlank(message = "Username is required")
    private String username;

    @NotBlank(message = "Password is required")
    private String password;
}


================================================================================
--- File: src/main/java/com/example/demo/user/LoginResponse.java ---
================================================================================

package com.example.demo.user;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data // Includes getters, setters, toString, equals, hashCode
@NoArgsConstructor // Needed for Jackson deserialization if used
public class LoginResponse {

    private String token;
    // Add other fields you might want to return after login, e.g., username, roles
    // private String username;
    // private User.Role role;
    // private Long tenantId;

    // --- Constructor needed by AuthController ---
    public LoginResponse(String token) {
        this.token = token;
    }

    // --- You might still need an AllArgsConstructor for other purposes ---
    // Or remove this if you only ever construct it with the token
    // public LoginResponse(String token, String username, User.Role role, Long tenantId) {
    //    this.token = token;
    //    this.username = username;
    //    this.role = role;
    //    this.tenantId = tenantId;
    // }
}



================================================================================
--- File: src/main/java/com/example/demo/user/UserRepository.java ---
================================================================================

package com.example.demo.user;

import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {

    // Spring Data JPA automatically provides the implementation for this method
    Optional<User> findByUsername(String username);
}


================================================================================
--- File: src/main/java/com/example/demo/user/JwtAuthenticationFilter.java ---
================================================================================

package com.example.demo.user;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtTokenProvider jwtTokenProvider;
    private final UserDetailsService userDetailsService;

    public JwtAuthenticationFilter(JwtTokenProvider jwtTokenProvider, UserDetailsService userDetailsService) {
        this.jwtTokenProvider = jwtTokenProvider;
        this.userDetailsService = userDetailsService;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {
        // 1. Get JWT token from the request header
        String token = getTokenFromRequest(request);

        // 2. Validate the token
        if (StringUtils.hasText(token) && jwtTokenProvider.validateToken(token)) {
            // 3. Get username from token
            String username = jwtTokenProvider.getUsernameFromToken(token);

            // 4. Load the user associated with the token
            UserDetails userDetails = userDetailsService.loadUserByUsername(username);

            // 5. Create an authentication object
            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(
                    userDetails,
                    null,
                    userDetails.getAuthorities()
            );

            authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

            // 6. Set the user in the SecurityContext (This makes the user "logged in" for this request)
            SecurityContextHolder.getContext().setAuthentication(authenticationToken);
        }

        // Continue the filter chain
        filterChain.doFilter(request, response);
    }

    private String getTokenFromRequest(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");

        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            // Return the token string (without "Bearer ")
            return bearerToken.substring(7);
        }

        return null;
    }
}


================================================================================
--- File: src/main/java/com/example/demo/user/JwtTokenProvider.java ---
================================================================================

package com.example.demo.user;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.util.Date;

@Component
public class JwtTokenProvider {

    private final SecretKey jwtSecretKey;
    private final long jwtExpirationInMs;

    public JwtTokenProvider(@Value("${app.jwt.secret}") String jwtSecret,
                            @Value("${app.jwt.expiration-in-ms}") long jwtExpirationInMs) {
        // Create a SecretKey object from the string
        this.jwtSecretKey = Keys.hmacShaKeyFor(jwtSecret.getBytes());
        this.jwtExpirationInMs = jwtExpirationInMs;
    }

    /**
     * Generates a JWT token for a given authenticated user.
     * @param authentication The Spring Security Authentication object.
     * @return A signed JWT token as a string.
     */
    public String generateToken(Authentication authentication) {
        String username = authentication.getName();
        Date now = new Date();
        Date expiryDate = new Date(now.getTime() + jwtExpirationInMs);

        // --- UPDATED for modern jjwt API ---
        return Jwts.builder()
                .setSubject(username) // .subject() is now .setSubject()
                .setIssuedAt(now)     // .issuedAt() is now .setIssuedAt()
                .setExpiration(expiryDate) // .expiration() is now .setExpiration()
                .signWith(jwtSecretKey) // .signWith() is still correct
                .compact();
    }

    /**
     * Validates if a JWT token is correct and not expired.
     * @param token The JWT token string.
     * @return true if the token is valid, false otherwise.
     */
    public boolean validateToken(String token) {
        try {
            // --- UPDATED for modern jjwt API ---
            // Jwts.parser() is deprecated, use parserBuilder()
            // .setSigningKey() replaces .verifyWith()
            Jwts.parserBuilder()
                    .setSigningKey(jwtSecretKey)
                    .build()
                    .parseClaimsJws(token); // parseSignedClaims() is now parseClaimsJws()
            return true;
        } catch (Exception ex) {
            // This will catch expired tokens, malformed tokens, etc.
            return false;
        }
    }

    /**
     * Extracts the username (subject) from a validated JWT token.
     * @param token The JWT token string.
     * @return The username.
     */
    public String getUsernameFromToken(String token) {
        // --- UPDATED for modern jjwt API ---
        Claims claims = Jwts.parserBuilder()
                .setSigningKey(jwtSecretKey) // .setSigningKey() replaces .verifyWith()
                .build()
                .parseClaimsJws(token) // parseSignedClaims() is now parseClaimsJws()
                .getBody(); // .getPayload() is now .getBody()

        return claims.getSubject();
    }
}



================================================================================
--- File: src/main/java/com/example/demo/user/AuthServiceImpl.java ---
================================================================================

package com.example.demo.user;

import com.example.demo.exception.UserAlreadyExistsException;
import com.example.demo.permission.Permission; // Import Permission
import com.example.demo.permission.PermissionRepository; // Import PermissionRepository
import com.example.demo.tenant.Tenant;
import com.example.demo.tenant.TenantRepository;
import jakarta.annotation.PostConstruct; // Import PostConstruct
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashSet; // Import HashSet
import java.util.Optional;
import java.util.Set; // Import Set
import java.util.List; // Import List

@Service
public class AuthServiceImpl implements AuthService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final TenantRepository tenantRepository;
    private final PermissionRepository permissionRepository; // Inject PermissionRepository

    // Constants for default permissions
    public static final String DEFAULT_USER_PERMISSION = "PERMISSION_READ_OWN_DATA";
    public static final String PERMISSION_MANAGE_USERS = "PERMISSION_MANAGE_USERS";
    public static final String PERMISSION_DELETE_VENDOR = "PERMISSION_DELETE_VENDOR";
    public static final String PERMISSION_DELETE_WORK_ORDER = "PERMISSION_DELETE_WORK_ORDER";
    public static final String PERMISSION_DELETE_PROPERTY = "PERMISSION_DELETE_PROPERTY"; // Add constant


    // Updated Constructor
    public AuthServiceImpl(UserRepository userRepository,
                           PasswordEncoder passwordEncoder,
                           TenantRepository tenantRepository,
                           PermissionRepository permissionRepository) { // Add permissionRepository
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
        this.tenantRepository = tenantRepository;
        this.permissionRepository = permissionRepository; // Assign permissionRepository
    }

    // --- Ensure default permissions exist on startup ---
    @PostConstruct
    @Transactional
    public void initPermissions() {
        findOrCreatePermission(DEFAULT_USER_PERMISSION);
        // Add other essential permissions
        findOrCreatePermission(PERMISSION_MANAGE_USERS);
        findOrCreatePermission(PERMISSION_DELETE_VENDOR);
        findOrCreatePermission(PERMISSION_DELETE_WORK_ORDER);
        // --- ADD THE MISSING PERMISSION CHECK ---
        findOrCreatePermission(PERMISSION_DELETE_PROPERTY);
        // --- END FIX ---
    }

    private Permission findOrCreatePermission(String name) {
        return permissionRepository.findByName(name)
                .orElseGet(() -> permissionRepository.save(new Permission(name)));
    }
    // --- End permission initialization ---


    @Override
    @Transactional
    public User registerNewUser(UserRegistrationRequest registrationRequest) {
        // 1. Check if user already exists
        Optional<User> existingUser = userRepository.findByUsername(registrationRequest.getUsername());
        if (existingUser.isPresent()) {
            throw new UserAlreadyExistsException("User with email " + registrationRequest.getUsername() + " already exists.");
        }

        // --- Determine or Create Tenant ---
        Long tenantIdToAssign;
        Tenant tenantToAssign; // Keep track of the tenant object
        long tenantCount = tenantRepository.count();

        if (tenantCount == 0) {
            // First user registration - create a new tenant
            String tenantName = extractTenantName(registrationRequest.getUsername());
            Optional<Tenant> existingTenantOpt = tenantRepository.findByName(tenantName);
            if(existingTenantOpt.isPresent()) {
                tenantToAssign = existingTenantOpt.get();
            } else {
                Tenant newTenant = new Tenant();
                newTenant.setName(tenantName);
                tenantToAssign = tenantRepository.save(newTenant);
            }
            tenantIdToAssign = tenantToAssign.getId();

        } else {
            // Subsequent registrations - assign to default tenant (ID 1L)
            tenantToAssign = tenantRepository.findById(1L)
                    .orElseThrow(() -> new IllegalStateException("Default tenant with ID 1 not found. Ensure it exists or handle this case."));
            tenantIdToAssign = tenantToAssign.getId();
        }
        // --- End Tenant Logic ---


        // 2. Create new user entity
        User newUser = new User();
        newUser.setUsername(registrationRequest.getUsername());
        newUser.setPassword(passwordEncoder.encode(registrationRequest.getPassword()));
        newUser.setTenantId(tenantIdToAssign);

        // --- Assign Default Permissions ---
        Set<Permission> defaultPermissions = new HashSet<>();
        // Find the essential 'user' permission
        Permission userPermission = findOrCreatePermission(DEFAULT_USER_PERMISSION);
        defaultPermissions.add(userPermission);

        // If this is the very first user ever (implicitly the first admin)
        // Or if the tenant was just created for this user (first user of tenant)
        // Give them admin permissions as well
        if (userRepository.count() == 0 || (tenantCount == 0 && tenantToAssign.getId().equals(tenantIdToAssign))) {
            defaultPermissions.addAll(permissionRepository.findAll()); // Give all defined permissions
        }

        newUser.setPermissions(defaultPermissions);
        // --- End Assign Permissions ---


        // 3. Save the new user
        User savedUser = userRepository.save(newUser);

        return savedUser;
    }

    // Helper method to extract a tenant name
    private String extractTenantName(String email) {
        if (email != null && email.contains("@")) {
            String domain = email.substring(email.indexOf('@') + 1);
            String namePart = domain.split("\\.")[0];
            return namePart.substring(0, 1).toUpperCase() + namePart.substring(1) + " Tenant";
        }
        return "DefaultTenant"; // Fallback name
    }

}



================================================================================
--- File: src/main/java/com/example/demo/user/CustomUserDetailsService.java ---
================================================================================

package com.example.demo.user;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    private final UserRepository userRepository;

    public CustomUserDetailsService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        // Fetch the User entity from the repository using the username (email)
        User user = userRepository.findByUsername(username)
                .orElseThrow(() ->
                        new UsernameNotFoundException("User not found with username: " + username));

        // The User entity itself now implements UserDetails correctly.
        // It maps its Set<Permission> to Collection<GrantedAuthority> internally.
        // So, we can just return the User object directly.
        return user;

        // --- OLD CODE (Removed) ---
        // No longer need to manually build UserDetails here.
        // return org.springframework.security.core.userdetails.User
        //         .withUsername(user.getUsername())
        //         .password(user.getPassword())
        //         .authorities(user.getAuthorities()) // User.getAuthorities() handles the mapping
        //         // Add account status flags if needed from User entity
        //         .accountExpired(!user.isAccountNonExpired())
        //         .accountLocked(!user.isAccountNonLocked())
        //         .credentialsExpired(!user.isCredentialsNonExpired())
        //         .disabled(!user.isEnabled())
        //         .build();
        // --- END OLD CODE ---
    }
}



================================================================================
--- File: src/main/java/com/example/demo/workorder/WorkOrder.java ---
================================================================================

package com.example.demo.workorder;

import com.example.demo.property.Property;
import com.example.demo.vendor.Vendor;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime; // Import LocalDateTime

@Entity
@Data
@NoArgsConstructor
public class WorkOrder {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY) // Many WorkOrders to One Property
    @JoinColumn(name = "property_id", nullable = false)
    private Property property; // Associated Property

    @ManyToOne(fetch = FetchType.LAZY) // Many WorkOrders to One Vendor (optional)
    @JoinColumn(name = "vendor_id")
    private Vendor vendor; // Assigned Vendor (can be null)

    @NotBlank(message = "Description is mandatory")
    @Column(nullable = false)
    private String description;

    @Column(nullable = false)
    private String status = "PENDING"; // Default status set by service

    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt = LocalDateTime.now(); // Automatically set creation time

    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt = LocalDateTime.now(); // Automatically set update time

    // --- NEW: Add Tenant ID ---
    @Column(name = "tenant_id", nullable = false)
    private Long tenantId;
    // --- End Tenant ID ---


    // --- Lifecycle Callbacks for Timestamps ---
    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
}



================================================================================
--- File: src/main/java/com/example/demo/workorder/WorkOrderController.java ---
================================================================================

package com.example.demo.workorder;

import jakarta.validation.Valid; // Ensure validation annotations are imported
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException; // For handling access errors
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException; // For cleaner error responses

import java.util.List;
import java.util.Map; // For error messages

// --- ADD @RestController and @RequestMapping ---
@RestController
@RequestMapping("/api/workorders") // Base path for all work order endpoints
public class WorkOrderController {

    private final WorkOrderService workOrderService;

    public WorkOrderController(WorkOrderService workOrderService) {
        this.workOrderService = workOrderService;
    }

    // GET /api/workorders - Get all work orders (tenant-filtered by service)
    @GetMapping
    public ResponseEntity<List<WorkOrder>> getAllWorkOrders() {
        List<WorkOrder> workOrders = workOrderService.getAllWorkOrders();
        return ResponseEntity.ok(workOrders);
    }

    // GET /api/workorders/{id} - Get a single work order by ID (tenant-filtered by service)
    @GetMapping("/{id}")
    public ResponseEntity<WorkOrder> getWorkOrderById(@PathVariable Long id) {
        return workOrderService.getWorkOrderById(id)
                .map(ResponseEntity::ok) // If found, return 200 OK with the work order
                .orElse(ResponseEntity.notFound().build()); // If not found (or wrong tenant), return 404
    }

    // POST /api/workorders?propertyId=...&vendorId=... - Create a new work order
    @PostMapping
    public ResponseEntity<WorkOrder> createWorkOrder(
            @Valid @RequestBody WorkOrder workOrder, // Request body contains description, etc.
            @RequestParam Long propertyId,           // Property ID from query parameter
            @RequestParam(required = false) Long vendorId) { // Vendor ID is optional
        try {
            WorkOrder createdWorkOrder = workOrderService.createWorkOrder(workOrder, propertyId, vendorId);
            return ResponseEntity.status(HttpStatus.CREATED).body(createdWorkOrder); // Return 201 Created
        } catch (AccessDeniedException e) {
            // If service throws AccessDeniedException (e.g., property/vendor not found for tenant)
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, e.getMessage());
        } catch (IllegalStateException e) {
            // Handle cases like user not authenticated properly
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }
        // Other exceptions (like validation) will be handled globally or by default Spring Boot handlers
    }

    // PUT /api/workorders/{id}?propertyId=...&vendorId=... - Update an existing work order
    @PutMapping("/{id}")
    public ResponseEntity<WorkOrder> updateWorkOrder(
            @PathVariable Long id,
            @Valid @RequestBody WorkOrder workOrderDetails, // Request body contains updated fields
            @RequestParam Long propertyId,                 // New Property ID
            @RequestParam(required = false) Long vendorId) { // New optional Vendor ID
        try {
            return workOrderService.updateWorkOrder(id, workOrderDetails, propertyId, vendorId)
                    .map(ResponseEntity::ok) // If update successful, return 200 OK
                    .orElse(ResponseEntity.notFound().build()); // If work order not found for tenant, return 404
        } catch (AccessDeniedException e) {
            // If property/vendor ID is invalid for the tenant
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, e.getMessage());
        } catch (IllegalStateException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }
    }

    // PUT /api/workorders/{id}/status?status=... - Update only the status of a work order
    @PutMapping("/{id}/status")
    public ResponseEntity<WorkOrder> updateWorkOrderStatus(
            @PathVariable Long id,
            @RequestParam String status) { // New status from query parameter
        try {
            return workOrderService.updateWorkOrderStatus(id, status)
                    .map(ResponseEntity::ok)
                    .orElse(ResponseEntity.notFound().build());
        } catch (IllegalStateException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }
        // Consider adding specific exception handling if status transitions are invalid
    }


    // DELETE /api/workorders/{id} - Delete a work order
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteWorkOrder(@PathVariable Long id) {
        try {
            boolean deleted = workOrderService.deleteWorkOrder(id);
            if (deleted) {
                return ResponseEntity.noContent().build(); // Return 204 No Content on success
            } else {
                return ResponseEntity.notFound().build(); // Return 404 if not found for tenant
            }
        } catch (IllegalStateException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }
    }

    // Consider adding a specific @ExceptionHandler for AccessDeniedException if not handled globally
    // @ExceptionHandler(AccessDeniedException.class)
    // @ResponseStatus(HttpStatus.FORBIDDEN)
    // public Map<String, String> handleAccessDenied(AccessDeniedException ex) {
    //     return Map.of("message", ex.getMessage());
    // }
}



================================================================================
--- File: src/main/java/com/example/demo/workorder/WorkOrderRepository.java ---
================================================================================

package com.example.demo.workorder;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface WorkOrderRepository extends JpaRepository<WorkOrder, Long> {

    // --- NEW: Tenant-aware find methods ---

    /**
     * Finds all work orders belonging to a specific tenant.
     * Replaces the generic findAll().
     */
    List<WorkOrder> findAllByTenantId(Long tenantId);

    /**
     * Finds a specific work order by its ID, but only if it belongs to the specified tenant.
     * Replaces the generic findById().
     */
    Optional<WorkOrder> findByIdAndTenantId(Long id, Long tenantId);

    /**
     * Checks if a work order exists by its ID and belongs to the specified tenant.
     * Useful for delete/update operations.
     */
    boolean existsByIdAndTenantId(Long id, Long tenantId);

    // --- Generic save() and delete() methods from JpaRepository are retained ---
    // Service layer will handle setting/checking tenantId before calling these.
}



================================================================================
--- File: src/main/java/com/example/demo/workorder/WorkOrderService.java ---
================================================================================

package com.example.demo.workorder;

import com.example.demo.property.Property;
import com.example.demo.property.PropertyRepository;
import com.example.demo.user.User;
import com.example.demo.vendor.Vendor;
import com.example.demo.vendor.VendorRepository;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.access.prepost.PreAuthorize; // Import PreAuthorize
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
public class WorkOrderService {

    private final WorkOrderRepository workOrderRepository;
    private final PropertyRepository propertyRepository;
    private final VendorRepository vendorRepository;

    public WorkOrderService(WorkOrderRepository workOrderRepository,
                            PropertyRepository propertyRepository,
                            VendorRepository vendorRepository) {
        this.workOrderRepository = workOrderRepository;
        this.propertyRepository = propertyRepository;
        this.vendorRepository = vendorRepository;
    }

    // Helper method to get current user's tenant ID
    private Long getCurrentTenantId() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated() || authentication.getPrincipal().equals("anonymousUser")) {
            throw new IllegalStateException("User must be authenticated to perform this action.");
        }
        Object principal = authentication.getPrincipal();
        if (principal instanceof User) {
            return ((User) principal).getTenantId();
        } else {
            throw new IllegalStateException("Authentication principal is not the expected User type.");
        }
    }

    // No specific role needed for reading
    public List<WorkOrder> getAllWorkOrders() {
        Long tenantId = getCurrentTenantId();
        return workOrderRepository.findAllByTenantId(tenantId);
    }

    public Optional<WorkOrder> getWorkOrderById(Long id) {
        Long tenantId = getCurrentTenantId();
        return workOrderRepository.findByIdAndTenantId(id, tenantId);
    }

    // No specific role needed for creating
    @Transactional
    public WorkOrder createWorkOrder(WorkOrder workOrder, Long propertyId, Long optionalVendorId) {
        Long tenantId = getCurrentTenantId();

        Property property = propertyRepository.findByIdAndTenantId(propertyId, tenantId)
                .orElseThrow(() -> new AccessDeniedException("Property not found or access denied."));

        Vendor vendor = null;
        if (optionalVendorId != null) {
            vendor = vendorRepository.findByIdAndTenantId(optionalVendorId, tenantId)
                    .orElseThrow(() -> new AccessDeniedException("Vendor not found or access denied."));
        }

        workOrder.setProperty(property);
        workOrder.setVendor(vendor);
        workOrder.setTenantId(tenantId);
        workOrder.setStatus("PENDING");
        workOrder.setCreatedAt(LocalDateTime.now());
        workOrder.setUpdatedAt(LocalDateTime.now());

        return workOrderRepository.save(workOrder);
    }

    // No specific role needed for updating generally
    @Transactional
    public Optional<WorkOrder> updateWorkOrder(Long id, WorkOrder workOrderDetails, Long newPropertyId, Long newOptionalVendorId) {
        Long tenantId = getCurrentTenantId();

        return workOrderRepository.findByIdAndTenantId(id, tenantId)
                .map(existingWorkOrder -> {
                    Property newProperty = propertyRepository.findByIdAndTenantId(newPropertyId, tenantId)
                            .orElseThrow(() -> new AccessDeniedException("New Property not found or access denied."));

                    Vendor newVendor = null;
                    if (newOptionalVendorId != null) {
                        newVendor = vendorRepository.findByIdAndTenantId(newOptionalVendorId, tenantId)
                                .orElseThrow(() -> new AccessDeniedException("New Vendor not found or access denied."));
                    }

                    existingWorkOrder.setDescription(workOrderDetails.getDescription());
                    existingWorkOrder.setStatus(workOrderDetails.getStatus());
                    existingWorkOrder.setProperty(newProperty);
                    existingWorkOrder.setVendor(newVendor);

                    return workOrderRepository.save(existingWorkOrder);
                });
    }

    // No specific role needed for updating status (could be refined later)
    @Transactional
    public Optional<WorkOrder> updateWorkOrderStatus(Long id, String newStatus) {
        Long tenantId = getCurrentTenantId();
        return workOrderRepository.findByIdAndTenantId(id, tenantId)
                .map(existingWorkOrder -> {
                    existingWorkOrder.setStatus(newStatus);
                    return workOrderRepository.save(existingWorkOrder);
                });
    }

    // --- SECURE THE DELETE METHOD ---
    @Transactional
    @PreAuthorize("hasRole('ADMIN')") // Only allow users with ROLE_ADMIN
    public boolean deleteWorkOrder(Long id) {
        Long tenantId = getCurrentTenantId();
        if (workOrderRepository.existsByIdAndTenantId(id, tenantId)) {
            workOrderRepository.deleteById(id);
            return true;
        } else {
            return false;
        }
    }
}



================================================================================
--- File: src/main/java/com/example/demo/permission/Permission.java ---
================================================================================

package com.example.demo.permission;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.EqualsAndHashCode; // Import for Set equality

@Entity
@Data
@NoArgsConstructor
@EqualsAndHashCode(onlyExplicitlyIncluded = true) // Important for Set operations
public class Permission {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @EqualsAndHashCode.Include // Use name for equality checks
    @Column(unique = true, nullable = false)
    private String name; // e.g., "PERMISSION_DELETE_VENDOR", "PERMISSION_CREATE_WORK_ORDER"

    public Permission(String name) {
        this.name = name;
    }

    // We'll likely need a way to pre-populate permissions later (e.g., DataLoader)
}


================================================================================
--- File: src/main/java/com/example/demo/permission/PermissionRepository.java ---
================================================================================

package com.example.demo.permission;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.Set; // Import Set

@Repository
public interface PermissionRepository extends JpaRepository<Permission, Long> {
    Optional<Permission> findByName(String name);
    Set<Permission> findByNameIn(Set<String> names); // Find multiple permissions by name
}


================================================================================
--- File: src/main/java/com/example/demo/exception/GlobalExceptionHandler.java ---
================================================================================

package com.example.demo.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException; // Import AccessDeniedException
import org.springframework.validation.FieldError; // Import FieldError
import org.springframework.web.bind.MethodArgumentNotValidException; // Import MethodArgumentNotValidException
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.server.ResponseStatusException; // Import ResponseStatusException

import java.util.HashMap; // Import HashMap
import java.util.Map;     // Import Map

@ControllerAdvice // Makes this class apply globally to all controllers
public class GlobalExceptionHandler {

    // Handler for UserAlreadyExistsException (returns 409 Conflict)
    @ExceptionHandler(UserAlreadyExistsException.class)
    @ResponseStatus(HttpStatus.CONFLICT)
    public ResponseEntity<Map<String, String>> handleUserAlreadyExists(UserAlreadyExistsException ex) {
        // Return JSON: {"message": "User already exists..."}
        return ResponseEntity.status(HttpStatus.CONFLICT).body(Map.of("message", ex.getMessage()));
    }

    // --- NEW: Handler for Validation Errors (returns 400 Bad Request) ---
    @ExceptionHandler(MethodArgumentNotValidException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ResponseEntity<Map<String, String>> handleValidationExceptions(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        // Return JSON: {"fieldName": "errorMessage", ...}
        return ResponseEntity.badRequest().body(errors);
    }
    // --- END NEW Handler ---


    // Handler for AccessDeniedException (returns 403 Forbidden)
    // This catches exceptions thrown by service layer tenant checks
    @ExceptionHandler(AccessDeniedException.class)
    @ResponseStatus(HttpStatus.FORBIDDEN)
    public ResponseEntity<Map<String, String>> handleAccessDenied(AccessDeniedException ex) {
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body(Map.of("message", ex.getMessage()));
    }

    // Handler for IllegalStateException (often related to auth context, returns 401 Unauthorized)
    @ExceptionHandler(IllegalStateException.class)
    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    public ResponseEntity<Map<String, String>> handleIllegalState(IllegalStateException ex) {
        // Check if message indicates auth issue vs other state issues
        if (ex.getMessage() != null && ex.getMessage().contains("User must be authenticated")) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("message", "Authentication required."));
        }
        // Handle other IllegalStateExceptions if necessary, or rethrow/log
        // For now, return a generic forbidden if not clearly auth related in service layer
        // Or consider a 500 if it indicates an unexpected server state
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body(Map.of("message", ex.getMessage()));

    }

    // Handler for ResponseStatusException (used in controllers for specific status codes)
    @ExceptionHandler(ResponseStatusException.class)
    public ResponseEntity<Map<String, String>> handleResponseStatusException(ResponseStatusException ex) {
        return ResponseEntity
                .status(ex.getStatusCode())
                .body(Map.of("message", ex.getReason() != null ? ex.getReason() : "An error occurred"));
    }


    // Optional: Generic fallback handler for any other exceptions (returns 500 Internal Server Error)
    @ExceptionHandler(Exception.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public ResponseEntity<Map<String, String>> handleGenericException(Exception ex) {
        // Log the exception for debugging
        // logger.error("An unexpected error occurred", ex); // Assuming you have a logger
        System.err.println("An unexpected error occurred: " + ex.getMessage());
        ex.printStackTrace(); // Print stack trace to console (for dev)

        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("message", "An unexpected internal server error occurred."));
    }
}



================================================================================
--- File: src/main/java/com/example/demo/exception/UserAlreadyExistsException.java ---
================================================================================

package com.example.demo.exception;

public class UserAlreadyExistsException extends RuntimeException {
    public UserAlreadyExistsException(String message) {
        super(message);
    }
}


================================================================================
--- File: src/main/java/com/example/demo/vendor/VendorService.java ---
================================================================================

package com.example.demo.vendor;

import com.example.demo.user.User;
import org.springframework.security.access.prepost.PreAuthorize; // Import PreAuthorize
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
public class VendorService {

    private final VendorRepository vendorRepository;

    public VendorService(VendorRepository vendorRepository) {
        this.vendorRepository = vendorRepository;
    }

    // Helper method to get current user's tenant ID
    private Long getCurrentTenantId() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated() || authentication.getPrincipal().equals("anonymousUser")) {
            throw new IllegalStateException("User must be authenticated to perform this action.");
        }
        Object principal = authentication.getPrincipal();
        if (principal instanceof User) {
            return ((User) principal).getTenantId();
        } else {
            throw new IllegalStateException("Authentication principal is not the expected User type.");
        }
    }

    // No specific role needed for reading data (within the tenant)
    public List<Vendor> getAllVendors() {
        Long tenantId = getCurrentTenantId();
        return vendorRepository.findAllByTenantId(tenantId);
    }

    public Optional<Vendor> getVendorById(Long id) {
        Long tenantId = getCurrentTenantId();
        return vendorRepository.findByIdAndTenantId(id, tenantId);
    }

    // No specific role needed for creating (within the tenant)
    @Transactional
    public Vendor createVendor(Vendor vendor) {
        Long tenantId = getCurrentTenantId();
        vendor.setTenantId(tenantId);
        return vendorRepository.save(vendor);
    }

    // No specific role needed for updating (within the tenant)
    @Transactional
    public Optional<Vendor> updateVendor(Long id, Vendor vendorDetails) {
        Long tenantId = getCurrentTenantId();
        return vendorRepository.findByIdAndTenantId(id, tenantId)
                .map(existingVendor -> {
                    existingVendor.setName(vendorDetails.getName());
                    existingVendor.setSpecialty(vendorDetails.getSpecialty());
                    existingVendor.setContactInfo(vendorDetails.getContactInfo());
                    return vendorRepository.save(existingVendor);
                });
    }

    // --- SECURE THE DELETE METHOD ---
    @Transactional
    @PreAuthorize("hasRole('ADMIN')") // Only allow users with ROLE_ADMIN
    public boolean deleteVendor(Long id) {
        Long tenantId = getCurrentTenantId();
        if (vendorRepository.existsByIdAndTenantId(id, tenantId)) {
            vendorRepository.deleteById(id);
            return true;
        } else {
            return false;
        }
    }
}



================================================================================
--- File: src/main/java/com/example/demo/vendor/Vendor.java ---
================================================================================

package com.example.demo.vendor;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Data
@NoArgsConstructor
public class Vendor {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Vendor name is mandatory")
    @Column(nullable = false)
    private String name;

    private String specialty; // e.g., Plumbing, Electrical, HVAC

    private String contactInfo;

    // --- NEW: Add Tenant ID ---
    @Column(name = "tenant_id", nullable = false)
    private Long tenantId;
    // --- End Tenant ID ---

}



================================================================================
--- File: src/main/java/com/example/demo/vendor/VendorController.java ---
================================================================================

package com.example.demo.vendor;

import com.example.demo.property.Property;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;

import javax.swing.text.html.Option;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/vendors")
public class VendorController {

    private final VendorService vendorService;

    public VendorController(VendorService vendorService) {
        this.vendorService = vendorService;
    }

    @PostMapping
    public ResponseEntity<Vendor> createVendor(@Valid @RequestBody Vendor vendor) {
        Vendor savedVendor = vendorService.createVendor(vendor);
        return new ResponseEntity<>(savedVendor, HttpStatus.CREATED);
    }

    @GetMapping
    public List<Vendor> getAllVendors() {
        return vendorService.getAllVendors();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Vendor> getVendorById(@PathVariable Long id) {
        // Find the vendor in the repository by its ID
        Optional<Vendor> vendorOptional = vendorService.getVendorById(id);

        // Check if the vendor was found and return the appropriate response
        return vendorOptional
                .map(ResponseEntity::ok) // If present, wrap in 200 OK
                .orElse(ResponseEntity.notFound().build()); // If empty, return 404 Not Found
    }

    @PutMapping("/{id}")
    public ResponseEntity<Vendor> updateVendor(@PathVariable Long id, @Valid @RequestBody Vendor vendorDetails) {
        Optional<Vendor> updatedVendorOptional = vendorService.updateVendor(id, vendorDetails);

        return updatedVendorOptional
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteVendor(@PathVariable Long id) {
        boolean wasDeleted = vendorService.deleteVendor(id);

        if (wasDeleted) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public Map<String, String> handleValidationExceptions(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        return errors;
    }
}



================================================================================
--- File: src/main/java/com/example/demo/vendor/VendorRepository.java ---
================================================================================

package com.example.demo.vendor;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface VendorRepository extends JpaRepository<Vendor, Long> {

    // --- NEW: Tenant-aware find methods ---

    /**
     * Finds all vendors belonging to a specific tenant.
     * Replaces the generic findAll().
     */
    List<Vendor> findAllByTenantId(Long tenantId);

    /**
     * Finds a specific vendor by its ID, but only if it belongs to the specified tenant.
     * Replaces the generic findById().
     */
    Optional<Vendor> findByIdAndTenantId(Long id, Long tenantId);

    /**
     * Checks if a vendor exists by its ID and belongs to the specified tenant.
     * Useful for delete/update operations.
     */
    boolean existsByIdAndTenantId(Long id, Long tenantId);

    // --- Generic save() and delete() methods from JpaRepository are retained ---
}



================================================================================
--- File: src/test/java/demo/DemoApplication.java ---
================================================================================

package demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
@RestController
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }

    @GetMapping("/")
    public String hello() {
        // This is the message we'll change to test live-reloading
        return "Hello from Windows";
    }
}


================================================================================
--- File: src/test/java/demo/property/PropertyControllerTest.java ---
================================================================================

package com.example.demo.property;

import com.example.demo.exception.GlobalExceptionHandler;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach; // Keep BeforeEach for consistency if needed, but not for MockMvc setup
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser; // Import WithMockUser
import org.springframework.test.web.servlet.MockMvc;

// Import SecurityConfig and UserDetailsService for context
import com.example.demo.SecurityConfig;
import com.example.demo.user.CustomUserDetailsService;
import com.example.demo.user.JwtTokenProvider; // Corrected import path if needed

import java.util.List;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*; // Import security post processors


@WebMvcTest(PropertyController.class)
@Import({SecurityConfig.class, GlobalExceptionHandler.class}) // Import SecurityConfig and Exception Handler
public class PropertyControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private PropertyService propertyService;
    @MockBean
    private JwtTokenProvider jwtTokenProvider; // Needed by JwtAuthenticationFilter
    @MockBean
    private CustomUserDetailsService customUserDetailsService; // Needed by SecurityConfig/Filter

    @Autowired
    private ObjectMapper objectMapper;

    // Optional: Use BeforeEach for common setup if needed, but not MockMvc
    // @BeforeEach
    // void setUp() { ... }

    @Test
    void whenGetAllProperties_withoutAuthentication_thenReturnsForbidden() throws Exception {
        mockMvc.perform(get("/api/properties"))
                .andExpect(status().isForbidden()); // Expect 403 Forbidden
    }

    @Test
    @WithMockUser // Simulate an authenticated user
    void whenCreateProperty_thenReturnsCreatedProperty() throws Exception {
        Property property = new Property();
        property.setAddress("123 Main St");
        // --- THIS IS THE FIX ---
        property.setType("Single Family"); // Add a valid type
        // --- END FIX ---
        property.setBedrooms(3);
        property.setBathrooms(2);

        Property savedProperty = new Property();
        savedProperty.setId(1L);
        savedProperty.setAddress("123 Main St");
        savedProperty.setType("Single Family");
        savedProperty.setBedrooms(3);
        savedProperty.setBathrooms(2);


        when(propertyService.createProperty(any(Property.class))).thenReturn(savedProperty);

        mockMvc.perform(post("/api/properties")
                        .with(csrf()) // Add CSRF token for POST/PUT/DELETE
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(property)))
                .andExpect(status().isCreated()) // Expect 201 Created
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.address").value("123 Main St"))
                .andExpect(jsonPath("$.type").value("Single Family")); // Assert type
    }

    @Test
    @WithMockUser // Simulate an authenticated user
    void whenGetAllProperties_thenReturnsPropertyList() throws Exception {
        Property prop1 = new Property();
        prop1.setId(1L);
        prop1.setAddress("111 First St");
        prop1.setType("Condo"); // Add type for consistency

        Property prop2 = new Property();
        prop2.setId(2L);
        prop2.setAddress("222 Second St");
        prop2.setType("Apartment"); // Add type for consistency

        when(propertyService.getAllProperties()).thenReturn(List.of(prop1, prop2));

        mockMvc.perform(get("/api/properties")) // GET requests don't need CSRF by default
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].address").value("111 First St"))
                .andExpect(jsonPath("$[1].address").value("222 Second St"));
    }

    @Test
    @WithMockUser
    void whenGetPropertyById_givenPropertyExists_thenReturnsProperty() throws Exception {
        Property property = new Property();
        property.setId(1L);
        property.setAddress("456 Oak Ave");
        property.setType("Condo");

        when(propertyService.getPropertyById(1L)).thenReturn(Optional.of(property));

        mockMvc.perform(get("/api/properties/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1))
                .andExpect(jsonPath("$.address").value("456 Oak Ave"))
                .andExpect(jsonPath("$.type").value("Condo"));
    }

    @Test
    @WithMockUser
    void whenGetPropertyById_givenPropertyDoesNotExist_thenReturnsNotFound() throws Exception {
        when(propertyService.getPropertyById(99L)).thenReturn(Optional.empty());

        mockMvc.perform(get("/api/properties/99"))
                .andExpect(status().isNotFound());
    }


    @Test
    @WithMockUser
    void whenUpdateProperty_givenPropertyExists_thenReturnsUpdatedProperty() throws Exception {
        Long propertyId = 1L;
        Property updatedDetails = new Property();
        updatedDetails.setAddress("123 Updated St");
        // --- THIS IS THE FIX ---
        updatedDetails.setType("Duplex"); // Add a valid type
        // --- END FIX ---
        updatedDetails.setBedrooms(4);
        updatedDetails.setBathrooms(3);


        Property returnedProperty = new Property();
        returnedProperty.setId(propertyId);
        returnedProperty.setAddress("123 Updated St");
        returnedProperty.setType("Duplex");
        returnedProperty.setBedrooms(4);
        returnedProperty.setBathrooms(3);

        when(propertyService.updateProperty(anyLong(), any(Property.class))).thenReturn(Optional.of(returnedProperty));

        mockMvc.perform(put("/api/properties/{id}", propertyId)
                        .with(csrf()) // Add CSRF
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(updatedDetails)))
                .andExpect(status().isOk()) // Update returns 200 OK
                .andExpect(jsonPath("$.id").value(propertyId))
                .andExpect(jsonPath("$.address").value("123 Updated St"))
                .andExpect(jsonPath("$.type").value("Duplex")); // Assert type
    }

    @Test
    @WithMockUser
    void whenUpdateProperty_givenPropertyDoesNotExist_thenReturnsNotFound() throws Exception {
        Long propertyId = 99L;
        Property updatedDetails = new Property();
        updatedDetails.setAddress("123 Updated St");
        // --- THIS IS THE FIX ---
        updatedDetails.setType("Townhouse"); // Add a valid type (still needed for validation)
        // --- END FIX ---

        when(propertyService.updateProperty(anyLong(), any(Property.class))).thenReturn(Optional.empty());

        mockMvc.perform(put("/api/properties/{id}", propertyId)
                        .with(csrf()) // Add CSRF
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(updatedDetails)))
                .andExpect(status().isNotFound()); // Expect 404 Not Found
    }


    @Test
    @WithMockUser
    void whenDeleteProperty_givenPropertyExists_thenReturnsNoContent() throws Exception {
        Long propertyId = 1L;
        when(propertyService.deleteProperty(propertyId)).thenReturn(true);

        mockMvc.perform(delete("/api/properties/{id}", propertyId)
                        .with(csrf())) // Add CSRF
                .andExpect(status().isNoContent()); // Expect 204 No Content
    }

    @Test
    @WithMockUser
    void whenDeleteProperty_givenPropertyDoesNotExist_thenReturnsNotFound() throws Exception {
        Long propertyId = 99L;
        when(propertyService.deleteProperty(propertyId)).thenReturn(false);

        mockMvc.perform(delete("/api/properties/{id}", propertyId)
                        .with(csrf())) // Add CSRF
                .andExpect(status().isNotFound()); // Expect 404 Not Found
    }


    @Test
    @WithMockUser // This test runs validation before the service is called
    void whenCreateProperty_withInvalidData_thenReturnsBadRequest() throws Exception {
        Property invalidProperty = new Property();
        invalidProperty.setAddress("Test Address"); // Need address
        invalidProperty.setType(""); // Invalid type (blank)

        // No service mock needed as validation happens first

        mockMvc.perform(post("/api/properties")
                        .with(csrf()) // Add CSRF
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(invalidProperty)))
                .andExpect(status().isBadRequest()) // Expect 400 Bad Request
                .andExpect(jsonPath("$.type").value("Type is mandatory")); // Check validation error message
    }

}



================================================================================
--- File: src/test/java/demo/property/PropertyServiceTest.java ---
================================================================================

package com.example.demo.property;

import com.example.demo.permission.Permission; // Import Permission
import com.example.demo.user.User;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.access.AccessDeniedException; // Import AccessDeniedException
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;

import java.util.HashSet; // Import HashSet
import java.util.List;
import java.util.Optional;
import java.util.Set; // Import Set

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;

@SpringBootTest // Loads the full application context
public class PropertyServiceTest {

    @MockBean // Use @MockBean for dependencies when using @SpringBootTest
    private PropertyRepository propertyRepository;

    @Autowired // Inject the actual service bean from the Spring context
    private PropertyService propertyService;

    // Define mock user and tenant ID
    private static final Long MOCK_TENANT_ID = 1L;

    // --- Define mock permissions ---
    private Permission mockUserPermission;
    private Permission mockAdminDeletePropertyPermission; // Specific admin permission
    // --- End mock permissions ---

    // Helper to set up security context
    private void setupMockSecurityContext(boolean isAdmin) {
        User mockUser = new User();
        mockUser.setId(isAdmin ? 2L : 1L);
        mockUser.setUsername(isAdmin ? "admin@example.com" : "user@example.com");
        mockUser.setTenantId(MOCK_TENANT_ID);

        // --- Set Permissions based on isAdmin flag ---
        Set<Permission> permissions = new HashSet<>();
        if (mockUserPermission != null) {
            permissions.add(mockUserPermission); // All users get the basic permission
        }
        // --- FIX: Add the specific admin permission if isAdmin ---
        if (isAdmin && mockAdminDeletePropertyPermission != null) {
            permissions.add(mockAdminDeletePropertyPermission); // Add delete permission for ADMIN
        }
        // --- END FIX ---
        mockUser.setPermissions(permissions); // Assign the Set<Permission>
        // --- End Set Permissions ---

        Authentication authentication = new UsernamePasswordAuthenticationToken(mockUser, null, mockUser.getAuthorities());
        SecurityContext securityContext = mock(SecurityContext.class);
        when(securityContext.getAuthentication()).thenReturn(authentication);
        SecurityContextHolder.setContext(securityContext);
    }

    @BeforeEach
    void setUpPermissions() {
        mockUserPermission = new Permission("PERMISSION_READ_OWN_DATA");
        mockUserPermission.setId(100L);
        // Ensure this permission matches @PreAuthorize in PropertyService
        mockAdminDeletePropertyPermission = new Permission("PERMISSION_DELETE_PROPERTY");
        mockAdminDeletePropertyPermission.setId(103L);
    }


    @AfterEach
    void tearDown() throws Exception {
        SecurityContextHolder.clearContext();
    }


    @Test
    void whenGetAllProperties_asUser_thenReturnsTenantProperties() {
        setupMockSecurityContext(false);
        Property prop1 = new Property(); prop1.setTenantId(MOCK_TENANT_ID);
        Property prop2 = new Property(); prop2.setTenantId(MOCK_TENANT_ID);
        when(propertyRepository.findAllByTenantId(MOCK_TENANT_ID)).thenReturn(List.of(prop1, prop2));
        List<Property> properties = propertyService.getAllProperties();
        assertEquals(2, properties.size());
        verify(propertyRepository).findAllByTenantId(MOCK_TENANT_ID);
    }

    @Test
    void whenGetPropertyById_givenValidIdAndTenant_asUser_thenReturnsProperty() {
        setupMockSecurityContext(false);
        Long propertyId = 1L;
        Property property = new Property(); property.setId(propertyId); property.setTenantId(MOCK_TENANT_ID);
        when(propertyRepository.findByIdAndTenantId(propertyId, MOCK_TENANT_ID)).thenReturn(Optional.of(property));
        Optional<Property> foundProperty = propertyService.getPropertyById(propertyId);
        assertTrue(foundProperty.isPresent());
        verify(propertyRepository).findByIdAndTenantId(propertyId, MOCK_TENANT_ID);
    }

    @Test
    void whenGetPropertyById_givenInvalidTenant_asUser_thenReturnsEmpty() {
        setupMockSecurityContext(false);
        Long propertyId = 1L;
        when(propertyRepository.findByIdAndTenantId(propertyId, MOCK_TENANT_ID)).thenReturn(Optional.empty());
        Optional<Property> foundProperty = propertyService.getPropertyById(propertyId);
        assertFalse(foundProperty.isPresent());
        verify(propertyRepository).findByIdAndTenantId(propertyId, MOCK_TENANT_ID);
    }

    @Test
    void whenCreateProperty_asUser_thenSetsTenantIdAndSaves() {
        setupMockSecurityContext(false);
        Property propertyToSave = new Property(); propertyToSave.setAddress("New Address");
        Property savedPropertyResult = new Property();
        savedPropertyResult.setId(1L);
        savedPropertyResult.setAddress("New Address");
        savedPropertyResult.setTenantId(MOCK_TENANT_ID);

        when(propertyRepository.save(any(Property.class))).thenAnswer(invocation -> {
            Property p = invocation.getArgument(0);
            assertEquals(MOCK_TENANT_ID, p.getTenantId());
            Property resultProp = new Property();
            resultProp.setId(1L);
            resultProp.setAddress(p.getAddress());
            resultProp.setType(p.getType());
            resultProp.setBedrooms(p.getBedrooms());
            resultProp.setBathrooms(p.getBathrooms());
            resultProp.setTenantId(MOCK_TENANT_ID);
            return resultProp;
        });

        Property result = propertyService.createProperty(propertyToSave);
        assertNotNull(result);
        assertEquals(MOCK_TENANT_ID, result.getTenantId());
        assertEquals(1L, result.getId());
        verify(propertyRepository).save(propertyToSave);
    }

    @Test
    void whenUpdateProperty_givenValidIdAndTenant_asUser_thenUpdatesAndSaves() {
        setupMockSecurityContext(false);
        Long propertyId = 1L;
        Property existingProperty = new Property(); existingProperty.setId(propertyId); existingProperty.setTenantId(MOCK_TENANT_ID); existingProperty.setAddress("Old Address");
        Property updatedDetails = new Property(); updatedDetails.setAddress("New Address");
        when(propertyRepository.findByIdAndTenantId(propertyId, MOCK_TENANT_ID)).thenReturn(Optional.of(existingProperty));
        when(propertyRepository.save(any(Property.class))).thenAnswer(invocation -> invocation.getArgument(0));
        Optional<Property> result = propertyService.updateProperty(propertyId, updatedDetails);
        assertTrue(result.isPresent());
        assertEquals("New Address", result.get().getAddress());
        verify(propertyRepository).findByIdAndTenantId(propertyId, MOCK_TENANT_ID);
        verify(propertyRepository).save(existingProperty);
    }

    @Test
    void whenUpdateProperty_givenInvalidIdOrTenant_asUser_thenReturnsEmpty() {
        setupMockSecurityContext(false);
        Long propertyId = 99L;
        Property updatedDetails = new Property(); updatedDetails.setAddress("New Address");
        when(propertyRepository.findByIdAndTenantId(propertyId, MOCK_TENANT_ID)).thenReturn(Optional.empty());
        Optional<Property> result = propertyService.updateProperty(propertyId, updatedDetails);
        assertFalse(result.isPresent());
        verify(propertyRepository).findByIdAndTenantId(propertyId, MOCK_TENANT_ID);
        verify(propertyRepository, never()).save(any(Property.class));
    }

    // --- Tests for Delete Authorization ---

    @Test
    void whenDeleteProperty_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue() {
        setupMockSecurityContext(true); // Set context for ADMIN
        Long propertyId = 1L;
        when(propertyRepository.existsByIdAndTenantId(propertyId, MOCK_TENANT_ID)).thenReturn(true);

        assertDoesNotThrow(() -> {
            boolean result = propertyService.deleteProperty(propertyId);
            assertTrue(result);
        });
        verify(propertyRepository).existsByIdAndTenantId(propertyId, MOCK_TENANT_ID);
        verify(propertyRepository).deleteById(propertyId);
    }

    @Test
    void whenDeleteProperty_givenValidIdAndTenant_asUser_thenThrowsAccessDenied() {
        setupMockSecurityContext(false); // Set context for USER
        Long propertyId = 1L;
        when(propertyRepository.existsByIdAndTenantId(propertyId, MOCK_TENANT_ID)).thenReturn(true);

        assertThrows(AccessDeniedException.class, () -> {
            propertyService.deleteProperty(propertyId);
        }, "Should throw AccessDeniedException for USER role trying to delete");

        verify(propertyRepository, never()).deleteById(anyLong());
    }

    @Test
    void whenDeleteProperty_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse() {
        setupMockSecurityContext(true); // Set context for ADMIN
        Long propertyId = 99L;
        when(propertyRepository.existsByIdAndTenantId(propertyId, MOCK_TENANT_ID)).thenReturn(false);

        assertDoesNotThrow(() -> {
            boolean result = propertyService.deleteProperty(propertyId);
            assertFalse(result);
        });
        verify(propertyRepository).existsByIdAndTenantId(propertyId, MOCK_TENANT_ID);
        verify(propertyRepository, never()).deleteById(anyLong());
    }

    @Test
    void whenDeleteProperty_givenInvalidIdOrTenant_asUser_thenThrowsAccessDenied() {
        setupMockSecurityContext(false); // Set context for USER
        Long propertyId = 99L;
        when(propertyRepository.existsByIdAndTenantId(propertyId, MOCK_TENANT_ID)).thenReturn(false);

        assertThrows(AccessDeniedException.class, () -> {
            propertyService.deleteProperty(propertyId);
        }, "Should throw AccessDeniedException for USER role even if property doesn't exist");

        verify(propertyRepository, never()).deleteById(anyLong());
        verify(propertyRepository, never()).existsByIdAndTenantId(anyLong(), anyLong());
    }
}



================================================================================
--- File: src/test/java/demo/user/AuthControllerTest.java ---
================================================================================

package com.example.demo.user;

import com.example.demo.exception.GlobalExceptionHandler;
import com.example.demo.exception.UserAlreadyExistsException;
import com.example.demo.permission.Permission; // Import Permission
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach; // Import BeforeEach
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.test.web.servlet.MockMvc;

// Import SecurityConfig and UserDetailsService for context
import com.example.demo.SecurityConfig;

import java.util.Set; // Import Set

// Import static mock method
import static org.mockito.Mockito.mock;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*;

@WebMvcTest(AuthController.class)
@Import({SecurityConfig.class, GlobalExceptionHandler.class})
public class AuthControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private AuthService authService;
    @MockBean
    private AuthenticationManager authenticationManager;
    @MockBean
    private JwtTokenProvider jwtTokenProvider;
    @MockBean
    private CustomUserDetailsService customUserDetailsService; // Still needed by SecurityConfig

    @Autowired
    private ObjectMapper objectMapper;

    // --- Add mock permission for tests ---
    private Permission mockUserPermission;

    @BeforeEach
    void setupPermissions() {
        // Setup mock permission object
        mockUserPermission = new Permission(AuthServiceImpl.DEFAULT_USER_PERMISSION);
        mockUserPermission.setId(100L);
    }
    // --- End permission setup ---


    @Test
    void whenRegisterUser_withValidData_thenReturnsOk() throws Exception {
        // Use the two-argument constructor we defined
        UserRegistrationRequest request = new UserRegistrationRequest("test@example.com", "Password123");

        // --- Update Mock User to use Permissions ---
        User registeredUser = new User();
        registeredUser.setId(1L);
        registeredUser.setUsername("test@example.com");
        // Create a Set containing the mock permission
        registeredUser.setPermissions(Set.of(mockUserPermission));
        registeredUser.setTenantId(1L);
        // --- End Update ---

        when(authService.registerNewUser(any(UserRegistrationRequest.class))).thenReturn(registeredUser);

        mockMvc.perform(post("/api/auth/register")
                        .with(csrf())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk()) // Changed expectation from 500/error to 200 OK
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.username").value("test@example.com"))
                // --- Assert Permission in response ---
                // Check if the first permission name matches (adjust if multiple permissions expected)
                .andExpect(jsonPath("$.permissions[0].name").value(AuthServiceImpl.DEFAULT_USER_PERMISSION));
        // --- End Assertion ---
    }

    @Test
    void whenRegisterUser_withExistingUsername_thenReturnsConflict() throws Exception {
        UserRegistrationRequest request = new UserRegistrationRequest("existing@example.com", "Password123");

        when(authService.registerNewUser(any(UserRegistrationRequest.class)))
                .thenThrow(new UserAlreadyExistsException("User already exists"));

        mockMvc.perform(post("/api/auth/register")
                        .with(csrf())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isConflict())
                .andExpect(jsonPath("$.message").value("User already exists"));
    }

    @Test
    void whenLoginUser_withValidCredentials_thenReturnsToken() throws Exception {
        LoginRequest loginRequest = new LoginRequest("test@example.com", "Password123");
        String fakeToken = "fake-jwt-token";

        // Mock the Authentication object
        Authentication authentication = mock(Authentication.class);
        when(authentication.getName()).thenReturn("test@example.com");

        // Mock AuthenticationManager
        when(authenticationManager.authenticate(
                any(UsernamePasswordAuthenticationToken.class)))
                .thenReturn(authentication);

        // Mock JwtTokenProvider
        when(jwtTokenProvider.generateToken(any(Authentication.class))).thenReturn(fakeToken);

        mockMvc.perform(post("/api/auth/login")
                        .with(csrf())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.token").value(fakeToken));
    }
}



================================================================================
--- File: src/test/java/demo/user/AuthServiceTest.java ---
================================================================================

package com.example.demo.user;

import com.example.demo.exception.UserAlreadyExistsException;
import com.example.demo.permission.Permission; // Import Permission
import com.example.demo.permission.PermissionRepository; // Import PermissionRepository
import com.example.demo.tenant.Tenant; // Import Tenant
import com.example.demo.tenant.TenantRepository; // Import TenantRepository
import org.junit.jupiter.api.AfterEach; // Import AfterEach
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor; // Import ArgumentCaptor
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.util.Collections; // Import Collections
import java.util.HashSet; // Import HashSet
import java.util.List; // Import List
import java.util.Optional;
import java.util.Set; // Import Set

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

public class AuthServiceTest {

    @Mock
    private UserRepository userRepository;
    @Mock
    private PasswordEncoder passwordEncoder;
    @Mock
    private TenantRepository tenantRepository;
    @Mock
    private PermissionRepository permissionRepository; // Mock PermissionRepository

    @InjectMocks
    private AuthServiceImpl authService; // Test the implementation

    private AutoCloseable closeable;

    // Define mock permissions
    private Permission mockUserPermission;
    private Permission mockAdminPermission1;
    private Permission mockAdminPermission2;
    private Permission mockAdminPermission3;
    private Permission mockDeletePropertyPermission; // Added


    @BeforeEach
    void setUp() {
        closeable = MockitoAnnotations.openMocks(this);

        // Setup mock permissions
        mockUserPermission = new Permission(AuthServiceImpl.DEFAULT_USER_PERMISSION);
        mockUserPermission.setId(100L);
        mockAdminPermission1 = new Permission(AuthServiceImpl.PERMISSION_MANAGE_USERS);
        mockAdminPermission1.setId(101L);
        mockAdminPermission2 = new Permission(AuthServiceImpl.PERMISSION_DELETE_VENDOR);
        mockAdminPermission2.setId(102L);
        mockAdminPermission3 = new Permission(AuthServiceImpl.PERMISSION_DELETE_WORK_ORDER);
        mockAdminPermission3.setId(104L);
        mockDeletePropertyPermission = new Permission(AuthServiceImpl.PERMISSION_DELETE_PROPERTY); // Added for init test consistency
        mockDeletePropertyPermission.setId(105L);


        // --- Mock Permission Repository Behavior ---
        // Mock findOrCreatePermission logic used internally
        when(permissionRepository.findByName(AuthServiceImpl.DEFAULT_USER_PERMISSION))
                .thenReturn(Optional.of(mockUserPermission));
        when(permissionRepository.findByName(AuthServiceImpl.PERMISSION_MANAGE_USERS))
                .thenReturn(Optional.of(mockAdminPermission1));
        when(permissionRepository.findByName(AuthServiceImpl.PERMISSION_DELETE_VENDOR))
                .thenReturn(Optional.of(mockAdminPermission2));
        when(permissionRepository.findByName(AuthServiceImpl.PERMISSION_DELETE_WORK_ORDER))
                .thenReturn(Optional.of(mockAdminPermission3));
        // FIX: Add mock for the missing permission checked by initPermissions
        when(permissionRepository.findByName(AuthServiceImpl.PERMISSION_DELETE_PROPERTY))
                .thenReturn(Optional.of(mockDeletePropertyPermission));
        // --- END FIX ---


        // Mock findAll used when assigning admin permissions
        when(permissionRepository.findAll()).thenReturn(List.of(
                mockUserPermission, mockAdminPermission1, mockAdminPermission2, mockAdminPermission3, mockDeletePropertyPermission
        ));

        when(permissionRepository.save(any(Permission.class))).thenAnswer(invocation -> {
            Permission p = invocation.getArgument(0);
            return p;
        });
        // --- End Permission Repo Mock ---


        // Mock password encoder
        when(passwordEncoder.encode(anyString())).thenReturn("hashedPassword");

        // Mock tenant repository count for initial setup
        when(tenantRepository.count()).thenReturn(1L);
        Tenant defaultTenant = new Tenant(); defaultTenant.setId(1L); defaultTenant.setName("Default Tenant");
        when(tenantRepository.findById(1L)).thenReturn(Optional.of(defaultTenant));

        when(userRepository.save(any(User.class))).thenAnswer(invocation -> {
            User userToSave = invocation.getArgument(0);
            User savedUser = new User();
            savedUser.setId(userToSave.getId() == null ? 1L : userToSave.getId());
            savedUser.setUsername(userToSave.getUsername());
            savedUser.setPassword(userToSave.getPassword());
            savedUser.setTenantId(userToSave.getTenantId());
            savedUser.setPermissions(new HashSet<>(userToSave.getPermissions()));
            return savedUser;
        });

    }

    @AfterEach
    void tearDown() throws Exception {
        if (closeable != null) {
            closeable.close();
        }
    }

    @Test
    void whenRegisterNewUser_withValidData_andTenantExists_thenSavesUserWithDefaultPermissions() {
        // Arrange
        UserRegistrationRequest request = new UserRegistrationRequest("new@example.com", "Password123");
        when(userRepository.findByUsername("new@example.com")).thenReturn(Optional.empty());
        // FIX: Mock userRepository.count() to avoid first user logic
        when(userRepository.count()).thenReturn(1L); // Ensure it's not the first user ever
        // --- END FIX ---
        // Tenant setup from @BeforeEach is sufficient

        // Act
        User registeredUser = authService.registerNewUser(request);

        // Assert
        assertNotNull(registeredUser);
        assertEquals("new@example.com", registeredUser.getUsername());
        assertEquals(1L, registeredUser.getTenantId());
        assertNotNull(registeredUser.getPermissions());
        assertEquals(1, registeredUser.getPermissions().size());
        assertTrue(registeredUser.getPermissions().contains(mockUserPermission));

        // Verify interactions
        verify(userRepository).findByUsername("new@example.com");
        verify(tenantRepository).count();
        verify(userRepository).count();
        verify(tenantRepository).findById(1L);
        verify(permissionRepository).findByName(AuthServiceImpl.DEFAULT_USER_PERMISSION);
        verify(permissionRepository, never()).findAll();
        ArgumentCaptor<User> userCaptor = ArgumentCaptor.forClass(User.class);
        verify(userRepository).save(userCaptor.capture());
        assertEquals(1, userCaptor.getValue().getPermissions().size());
        assertNull(userCaptor.getValue().getId());
    }

    @Test
    void whenRegisterNewUser_asFirstUserEver_thenSavesUserWithAllPermissions() {
        // Arrange
        UserRegistrationRequest request = new UserRegistrationRequest("admin@first.com", "Password123");
        when(userRepository.findByUsername("admin@first.com")).thenReturn(Optional.empty());
        when(tenantRepository.count()).thenReturn(0L);
        when(userRepository.count()).thenReturn(0L);

        Tenant newTenant = new Tenant(); newTenant.setId(1L); newTenant.setName("First Tenant");
        when(tenantRepository.findByName(anyString())).thenReturn(Optional.empty());
        when(tenantRepository.save(any(Tenant.class))).thenReturn(newTenant);

        // Act
        User registeredUser = authService.registerNewUser(request);

        // Assert
        assertNotNull(registeredUser);
        assertEquals("admin@first.com", registeredUser.getUsername());
        assertEquals(1L, registeredUser.getTenantId());
        assertNotNull(registeredUser.getPermissions());
        assertEquals(5, registeredUser.getPermissions().size()); // Expecting 5
        assertTrue(registeredUser.getPermissions().contains(mockUserPermission));
        assertTrue(registeredUser.getPermissions().contains(mockAdminPermission1));
        assertTrue(registeredUser.getPermissions().contains(mockAdminPermission2));
        assertTrue(registeredUser.getPermissions().contains(mockAdminPermission3));
        assertTrue(registeredUser.getPermissions().contains(mockDeletePropertyPermission));


        // Verify interactions
        verify(userRepository).findByUsername("admin@first.com");
        verify(tenantRepository).count();
        verify(userRepository).count();
        verify(tenantRepository).save(any(Tenant.class));
        verify(permissionRepository).findByName(AuthServiceImpl.DEFAULT_USER_PERMISSION);
        verify(permissionRepository).findAll();
        // FIX: Use ArgumentCaptor for verification
        ArgumentCaptor<User> userCaptor = ArgumentCaptor.forClass(User.class);
        verify(userRepository).save(userCaptor.capture());
        // Assert on the *captured* object
        User userPassedToSave = userCaptor.getValue();
        assertEquals(5, userPassedToSave.getPermissions().size());
        assertNull(userPassedToSave.getId());
        // --- END FIX ---
    }


    @Test
    void whenRegisterNewUser_withExistingUsername_thenThrowsUserAlreadyExistsException() {
        // Arrange
        UserRegistrationRequest request = new UserRegistrationRequest("existing@example.com", "Password123");
        User existingUser = new User();
        when(userRepository.findByUsername("existing@example.com")).thenReturn(Optional.of(existingUser));

        // Act & Assert
        assertThrows(UserAlreadyExistsException.class, () -> {
            authService.registerNewUser(request);
        });

        // Verify interactions
        verify(userRepository).findByUsername("existing@example.com");
        verifyNoInteractions(tenantRepository);
        verifyNoInteractions(permissionRepository);
        verify(userRepository, never()).save(any(User.class));
    }

    @Test
    void whenInitPermissions_andPermissionExists_thenDoesNotSave() {
        // Arrange (mocks for findByName return Optional.of(...) from @BeforeEach, includes all 5)

        // Act
        authService.initPermissions(); // Manually call @PostConstruct method

        // Assert
        verify(permissionRepository).findByName(AuthServiceImpl.DEFAULT_USER_PERMISSION);
        verify(permissionRepository).findByName(AuthServiceImpl.PERMISSION_MANAGE_USERS);
        verify(permissionRepository).findByName(AuthServiceImpl.PERMISSION_DELETE_VENDOR);
        verify(permissionRepository).findByName(AuthServiceImpl.PERMISSION_DELETE_WORK_ORDER);
        verify(permissionRepository).findByName(AuthServiceImpl.PERMISSION_DELETE_PROPERTY); // Verify check

        // FIX: Verification remains the same, mock was fixed
        verify(permissionRepository, never()).save(any(Permission.class));
        // --- END FIX ---
    }

    @Test
    void whenInitPermissions_andPermissionDoesNotExist_thenSavesPermission() {
        // Arrange
        when(permissionRepository.findByName(AuthServiceImpl.PERMISSION_MANAGE_USERS)).thenReturn(Optional.empty());
        Permission savedManageUsers = new Permission(AuthServiceImpl.PERMISSION_MANAGE_USERS);
        when(permissionRepository.save(argThat(p -> p.getName().equals(AuthServiceImpl.PERMISSION_MANAGE_USERS))))
                .thenReturn(savedManageUsers);

        // Act
        authService.initPermissions();

        // Assert
        verify(permissionRepository).findByName(AuthServiceImpl.DEFAULT_USER_PERMISSION);
        verify(permissionRepository).findByName(AuthServiceImpl.PERMISSION_MANAGE_USERS);
        verify(permissionRepository).findByName(AuthServiceImpl.PERMISSION_DELETE_VENDOR);
        verify(permissionRepository).findByName(AuthServiceImpl.PERMISSION_DELETE_WORK_ORDER);
        verify(permissionRepository).findByName(AuthServiceImpl.PERMISSION_DELETE_PROPERTY);

        verify(permissionRepository, times(1)).save(argThat(p -> p.getName().equals(AuthServiceImpl.PERMISSION_MANAGE_USERS)));
        verify(permissionRepository, never()).save(argThat(p -> p.getName().equals(AuthServiceImpl.DEFAULT_USER_PERMISSION)));
        verify(permissionRepository, never()).save(argThat(p -> p.getName().equals(AuthServiceImpl.PERMISSION_DELETE_VENDOR)));
        verify(permissionRepository, never()).save(argThat(p -> p.getName().equals(AuthServiceImpl.PERMISSION_DELETE_WORK_ORDER)));
        verify(permissionRepository, never()).save(argThat(p -> p.getName().equals(AuthServiceImpl.PERMISSION_DELETE_PROPERTY)));
    }
}



================================================================================
--- File: src/test/java/demo/workorder/WorkOrderServiceTest.java ---
================================================================================

package com.example.demo.workorder;

import com.example.demo.permission.Permission; // Import Permission
import com.example.demo.property.Property;
import com.example.demo.property.PropertyRepository;
import com.example.demo.user.User;
import com.example.demo.vendor.Vendor;
import com.example.demo.vendor.VendorRepository;
import org.junit.jupiter.api.AfterEach; // Import AfterEach
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired; // Autowire the service
import org.springframework.boot.test.context.SpringBootTest; // Use SpringBootTest
import org.springframework.boot.test.mock.mockito.MockBean; // Use MockBean
import org.springframework.security.access.AccessDeniedException; // Import AccessDeniedException
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;

import java.util.HashSet; // Import HashSet
import java.util.List;
import java.util.Optional;
import java.util.Set; // Import Set

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;

@SpringBootTest // Loads the full application context
public class WorkOrderServiceTest {

    @MockBean // Use @MockBean for dependencies when using @SpringBootTest
    private WorkOrderRepository workOrderRepository;
    @MockBean // Mock new dependency
    private PropertyRepository propertyRepository;
    @MockBean // Mock new dependency
    private VendorRepository vendorRepository;

    @Autowired // Inject the actual service bean from the Spring context
    private WorkOrderService workOrderService;

    // Define mock user and tenant ID
    private static final Long MOCK_TENANT_ID = 1L;

    // --- Define mock permissions ---
    private Permission mockUserPermission;
    private Permission mockAdminDeleteWorkOrderPermission;
    // --- End mock permissions ---

    // Helper to set up security context
    private void setupMockSecurityContext(boolean isAdmin) {
        User mockUser = new User();
        mockUser.setId(isAdmin ? 2L : 1L);
        mockUser.setUsername(isAdmin ? "admin@example.com" : "user@example.com");
        mockUser.setTenantId(MOCK_TENANT_ID);

        // --- Set Permissions based on isAdmin flag ---
        Set<Permission> permissions = new HashSet<>();
        permissions.add(mockUserPermission); // All users get the basic permission
        if (isAdmin) {
            permissions.add(mockAdminDeleteWorkOrderPermission); // Add admin permission
            // Add other admin permissions as needed
        }
        mockUser.setPermissions(permissions); // Assign the Set<Permission>
        // --- End Set Permissions ---

        // User entity now correctly implements getAuthorities() based on permissions
        Authentication authentication = new UsernamePasswordAuthenticationToken(mockUser, null, mockUser.getAuthorities());
        SecurityContext securityContext = mock(SecurityContext.class);
        when(securityContext.getAuthentication()).thenReturn(authentication);
        SecurityContextHolder.setContext(securityContext);
    }

    @BeforeEach
    void setUpPermissions() {
        // Initialize mock permission objects before each test
        mockUserPermission = new Permission("PERMISSION_READ_OWN_DATA"); // Example basic permission
        mockUserPermission.setId(100L);
        mockAdminDeleteWorkOrderPermission = new Permission("PERMISSION_DELETE_WORK_ORDER"); // Specific admin permission
        mockAdminDeleteWorkOrderPermission.setId(102L); // Assuming different ID
    }


    @AfterEach
    void tearDown() throws Exception {
        SecurityContextHolder.clearContext(); // Clean up security context after each test
    }


    @Test
    void whenGetAllWorkOrders_asUser_thenReturnsTenantWorkOrders() {
        setupMockSecurityContext(false); // Set context for USER
        // Arrange
        WorkOrder wo1 = new WorkOrder(); wo1.setTenantId(MOCK_TENANT_ID);
        WorkOrder wo2 = new WorkOrder(); wo2.setTenantId(MOCK_TENANT_ID);
        when(workOrderRepository.findAllByTenantId(MOCK_TENANT_ID)).thenReturn(List.of(wo1, wo2));

        // Act
        List<WorkOrder> workOrders = workOrderService.getAllWorkOrders();

        // Assert
        assertEquals(2, workOrders.size());
        verify(workOrderRepository).findAllByTenantId(MOCK_TENANT_ID);
    }

    @Test
    void whenGetWorkOrderById_givenValidIdAndTenant_asUser_thenReturnsWorkOrder() {
        setupMockSecurityContext(false); // Set context for USER
        Long workOrderId = 1L;
        WorkOrder workOrder = new WorkOrder(); workOrder.setId(workOrderId); workOrder.setTenantId(MOCK_TENANT_ID);
        when(workOrderRepository.findByIdAndTenantId(workOrderId, MOCK_TENANT_ID)).thenReturn(Optional.of(workOrder));
        Optional<WorkOrder> foundWorkOrder = workOrderService.getWorkOrderById(workOrderId);
        assertTrue(foundWorkOrder.isPresent());
        verify(workOrderRepository).findByIdAndTenantId(workOrderId, MOCK_TENANT_ID);
    }


    @Test
    void whenCreateWorkOrder_givenValidPropertyAndOptionalVendor_asUser_thenSetsTenantIdAndSaves() {
        setupMockSecurityContext(false); // Set context for USER
        // Arrange
        Long propertyId = 10L;
        Long vendorId = 20L;
        WorkOrder workOrderToSave = new WorkOrder();
        workOrderToSave.setDescription("New task");

        Property mockProperty = new Property(); mockProperty.setId(propertyId); mockProperty.setTenantId(MOCK_TENANT_ID);
        Vendor mockVendor = new Vendor(); mockVendor.setId(vendorId); mockVendor.setTenantId(MOCK_TENANT_ID);

        when(propertyRepository.findByIdAndTenantId(propertyId, MOCK_TENANT_ID)).thenReturn(Optional.of(mockProperty));
        when(vendorRepository.findByIdAndTenantId(vendorId, MOCK_TENANT_ID)).thenReturn(Optional.of(mockVendor));

        // Mock the save operation
        when(workOrderRepository.save(any(WorkOrder.class))).thenAnswer(invocation -> {
            WorkOrder wo = invocation.getArgument(0);
            assertEquals(MOCK_TENANT_ID, wo.getTenantId());
            assertEquals("PENDING", wo.getStatus());
            assertNotNull(wo.getCreatedAt());
            assertNotNull(wo.getUpdatedAt());
            // Simulate saving by returning a copy with an ID
            WorkOrder saved = new WorkOrder();
            saved.setId(1L); // Simulate ID generation
            saved.setDescription(wo.getDescription());
            saved.setStatus(wo.getStatus());
            saved.setTenantId(wo.getTenantId());
            saved.setProperty(wo.getProperty());
            saved.setVendor(wo.getVendor());
            saved.setCreatedAt(wo.getCreatedAt());
            saved.setUpdatedAt(wo.getUpdatedAt());
            return saved;
        });

        // Act
        WorkOrder result = workOrderService.createWorkOrder(workOrderToSave, propertyId, vendorId);

        // Assert
        assertNotNull(result);
        assertEquals(MOCK_TENANT_ID, result.getTenantId());
        assertEquals(1L, result.getId());
        assertEquals(mockProperty, result.getProperty());
        assertEquals(mockVendor, result.getVendor());
        verify(propertyRepository).findByIdAndTenantId(propertyId, MOCK_TENANT_ID);
        verify(vendorRepository).findByIdAndTenantId(vendorId, MOCK_TENANT_ID);
        verify(workOrderRepository).save(workOrderToSave);
    }

    @Test
    void whenCreateWorkOrder_givenValidPropertyNoVendor_asUser_thenSetsTenantIdAndSaves() {
        setupMockSecurityContext(false); // Set context for USER
        // Arrange
        Long propertyId = 10L;
        WorkOrder workOrderToSave = new WorkOrder();
        workOrderToSave.setDescription("New task");

        Property mockProperty = new Property(); mockProperty.setId(propertyId); mockProperty.setTenantId(MOCK_TENANT_ID);

        when(propertyRepository.findByIdAndTenantId(propertyId, MOCK_TENANT_ID)).thenReturn(Optional.of(mockProperty));

        when(workOrderRepository.save(any(WorkOrder.class))).thenAnswer(invocation -> {
            WorkOrder wo = invocation.getArgument(0);
            assertEquals(MOCK_TENANT_ID, wo.getTenantId());
            assertNull(wo.getVendor()); // Verify vendor is null
            // Simulate saving
            WorkOrder saved = new WorkOrder();
            saved.setId(1L);
            saved.setDescription(wo.getDescription());
            saved.setStatus(wo.getStatus());
            saved.setTenantId(wo.getTenantId());
            saved.setProperty(wo.getProperty());
            saved.setCreatedAt(wo.getCreatedAt());
            saved.setUpdatedAt(wo.getUpdatedAt());
            return saved;
        });

        // Act
        WorkOrder result = workOrderService.createWorkOrder(workOrderToSave, propertyId, null); // Pass null for vendorId

        // Assert
        assertNotNull(result);
        assertEquals(MOCK_TENANT_ID, result.getTenantId());
        assertEquals(mockProperty, result.getProperty());
        assertNull(result.getVendor());
        verify(propertyRepository).findByIdAndTenantId(propertyId, MOCK_TENANT_ID);
        verify(vendorRepository, never()).findByIdAndTenantId(anyLong(), anyLong()); // Verify vendor repo not called
        verify(workOrderRepository).save(workOrderToSave);
    }


    @Test
    void whenCreateWorkOrder_givenInvalidProperty_asUser_thenThrowsAccessDenied() {
        setupMockSecurityContext(false); // Set context for USER
        // Arrange
        Long propertyId = 99L; // Non-existent or wrong tenant
        WorkOrder workOrderToSave = new WorkOrder();
        when(propertyRepository.findByIdAndTenantId(propertyId, MOCK_TENANT_ID)).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(AccessDeniedException.class, () -> {
            workOrderService.createWorkOrder(workOrderToSave, propertyId, null);
        });
        verify(propertyRepository).findByIdAndTenantId(propertyId, MOCK_TENANT_ID);
        verify(workOrderRepository, never()).save(any(WorkOrder.class));
    }

    @Test
    void whenCreateWorkOrder_givenInvalidVendor_asUser_thenThrowsAccessDenied() {
        setupMockSecurityContext(false); // Set context for USER
        // Arrange
        Long propertyId = 10L;
        Long vendorId = 99L; // Non-existent or wrong tenant
        WorkOrder workOrderToSave = new WorkOrder();
        Property mockProperty = new Property(); mockProperty.setId(propertyId); mockProperty.setTenantId(MOCK_TENANT_ID);

        when(propertyRepository.findByIdAndTenantId(propertyId, MOCK_TENANT_ID)).thenReturn(Optional.of(mockProperty));
        when(vendorRepository.findByIdAndTenantId(vendorId, MOCK_TENANT_ID)).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(AccessDeniedException.class, () -> {
            workOrderService.createWorkOrder(workOrderToSave, propertyId, vendorId);
        });
        verify(propertyRepository).findByIdAndTenantId(propertyId, MOCK_TENANT_ID);
        verify(vendorRepository).findByIdAndTenantId(vendorId, MOCK_TENANT_ID);
        verify(workOrderRepository, never()).save(any(WorkOrder.class));
    }

    @Test
    void whenUpdateWorkOrder_givenValidData_asUser_thenUpdatesAndReturns() {
        setupMockSecurityContext(false); // Set context for USER
        // Arrange
        Long workOrderId = 1L;
        Long propertyId = 10L;
        Long vendorId = 20L;
        WorkOrder existingWorkOrder = new WorkOrder();
        existingWorkOrder.setId(workOrderId);
        existingWorkOrder.setTenantId(MOCK_TENANT_ID);
        existingWorkOrder.setDescription("Old Description");

        WorkOrder updatedDetails = new WorkOrder();
        updatedDetails.setDescription("New Description");
        updatedDetails.setStatus("COMPLETE");

        Property newProperty = new Property(); newProperty.setId(propertyId); newProperty.setTenantId(MOCK_TENANT_ID);
        Vendor newVendor = new Vendor(); newVendor.setId(vendorId); newVendor.setTenantId(MOCK_TENANT_ID);

        when(workOrderRepository.findByIdAndTenantId(workOrderId, MOCK_TENANT_ID)).thenReturn(Optional.of(existingWorkOrder));
        when(propertyRepository.findByIdAndTenantId(propertyId, MOCK_TENANT_ID)).thenReturn(Optional.of(newProperty));
        when(vendorRepository.findByIdAndTenantId(vendorId, MOCK_TENANT_ID)).thenReturn(Optional.of(newVendor));
        when(workOrderRepository.save(any(WorkOrder.class))).thenAnswer(invocation -> invocation.getArgument(0));

        // Act
        Optional<WorkOrder> result = workOrderService.updateWorkOrder(workOrderId, updatedDetails, propertyId, vendorId);

        // Assert
        assertTrue(result.isPresent());
        assertEquals("New Description", result.get().getDescription());
        assertEquals("COMPLETE", result.get().getStatus());
        assertEquals(newProperty, result.get().getProperty());
        assertEquals(newVendor, result.get().getVendor());
        verify(workOrderRepository).findByIdAndTenantId(workOrderId, MOCK_TENANT_ID);
        verify(propertyRepository).findByIdAndTenantId(propertyId, MOCK_TENANT_ID);
        verify(vendorRepository).findByIdAndTenantId(vendorId, MOCK_TENANT_ID);
        verify(workOrderRepository).save(existingWorkOrder);
    }

    @Test
    void whenUpdateWorkOrderStatus_givenValidIdAndTenant_asUser_thenUpdatesStatus() {
        setupMockSecurityContext(false); // Set context for USER
        // Arrange
        Long workOrderId = 1L;
        String newStatus = "COMPLETE";
        WorkOrder existingWorkOrder = new WorkOrder();
        existingWorkOrder.setId(workOrderId);
        existingWorkOrder.setTenantId(MOCK_TENANT_ID);
        existingWorkOrder.setStatus("PENDING");

        when(workOrderRepository.findByIdAndTenantId(workOrderId, MOCK_TENANT_ID)).thenReturn(Optional.of(existingWorkOrder));
        when(workOrderRepository.save(any(WorkOrder.class))).thenAnswer(invocation -> invocation.getArgument(0));

        // Act
        Optional<WorkOrder> result = workOrderService.updateWorkOrderStatus(workOrderId, newStatus);

        // Assert
        assertTrue(result.isPresent());
        assertEquals(newStatus, result.get().getStatus());
        verify(workOrderRepository).findByIdAndTenantId(workOrderId, MOCK_TENANT_ID);
        verify(workOrderRepository).save(existingWorkOrder);
    }

    // --- Tests for Delete Authorization ---

    @Test
    void whenDeleteWorkOrder_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue() {
        setupMockSecurityContext(true); // Set context for ADMIN
        // Arrange
        Long workOrderId = 1L;
        when(workOrderRepository.existsByIdAndTenantId(workOrderId, MOCK_TENANT_ID)).thenReturn(true);

        // Act & Assert
        assertDoesNotThrow(() -> {
            boolean result = workOrderService.deleteWorkOrder(workOrderId);
            assertTrue(result);
            verify(workOrderRepository).existsByIdAndTenantId(workOrderId, MOCK_TENANT_ID);
            verify(workOrderRepository).deleteById(workOrderId);
        });
    }

    @Test
    void whenDeleteWorkOrder_givenValidIdAndTenant_asUser_thenThrowsAccessDenied() {
        setupMockSecurityContext(false); // Set context for USER
        // Arrange
        Long workOrderId = 1L;
        when(workOrderRepository.existsByIdAndTenantId(workOrderId, MOCK_TENANT_ID)).thenReturn(true);

        // Act & Assert
        assertThrows(AccessDeniedException.class, () -> {
            workOrderService.deleteWorkOrder(workOrderId);
        }, "Should throw AccessDeniedException for USER role trying to delete");

        verify(workOrderRepository, never()).deleteById(anyLong());
    }

    @Test
    void whenDeleteWorkOrder_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse() {
        setupMockSecurityContext(true); // Set context for ADMIN
        // Arrange
        Long workOrderId = 99L;
        when(workOrderRepository.existsByIdAndTenantId(workOrderId, MOCK_TENANT_ID)).thenReturn(false);

        // Act & Assert
        assertDoesNotThrow(() -> {
            boolean result = workOrderService.deleteWorkOrder(workOrderId);
            assertFalse(result);
            verify(workOrderRepository).existsByIdAndTenantId(workOrderId, MOCK_TENANT_ID);
            verify(workOrderRepository, never()).deleteById(anyLong());
        });
    }

    @Test
    void whenDeleteWorkOrder_givenInvalidIdOrTenant_asUser_thenThrowsAccessDenied() {
        setupMockSecurityContext(false); // Set context for USER
        // Arrange
        Long workOrderId = 99L;
        when(workOrderRepository.existsByIdAndTenantId(workOrderId, MOCK_TENANT_ID)).thenReturn(false);

        // Act & Assert
        assertThrows(AccessDeniedException.class, () -> {
            workOrderService.deleteWorkOrder(workOrderId);
        }, "Should throw AccessDeniedException for USER role even if work order doesn't exist");

        verify(workOrderRepository, never()).deleteById(anyLong());
        verify(workOrderRepository, never()).existsByIdAndTenantId(anyLong(), anyLong());
    }
}



================================================================================
--- File: src/test/java/demo/workorder/WorkOrderControllerTest.java ---
================================================================================

package com.example.demo.workorder;

import com.example.demo.exception.GlobalExceptionHandler;
import com.example.demo.permission.Permission; // Import Permission
import com.example.demo.property.Property;
import com.example.demo.user.User;
import com.example.demo.vendor.Vendor;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

// Import SecurityConfig and UserDetailsService for context
import com.example.demo.SecurityConfig;
import com.example.demo.user.CustomUserDetailsService;
import com.example.demo.user.JwtTokenProvider;

import java.util.HashSet; // Import HashSet
import java.util.List;
import java.util.Optional;
import java.util.Set; // Import Set

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*;

@WebMvcTest(WorkOrderController.class)
@Import({SecurityConfig.class, GlobalExceptionHandler.class})
public class WorkOrderControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private WorkOrderService workOrderService;
    @MockBean
    private JwtTokenProvider jwtTokenProvider;
    @MockBean
    private CustomUserDetailsService customUserDetailsService;

    @Autowired
    private ObjectMapper objectMapper;

    // Define mock user, tenant ID, and permissions
    private static final Long MOCK_TENANT_ID = 1L;
    private User mockUserDetails;
    private User mockAdminDetails;
    private Permission mockUserPermission;
    private Permission mockAdminDeleteWorkOrderPermission;

    @BeforeEach
    void setupUserDetails() {
        // --- Setup mock Permissions ---
        mockUserPermission = new Permission("PERMISSION_READ_OWN_DATA");
        mockUserPermission.setId(100L);
        mockAdminDeleteWorkOrderPermission = new Permission("PERMISSION_DELETE_WORK_ORDER");
        mockAdminDeleteWorkOrderPermission.setId(102L);

        // --- Setup mock UserDetails for @WithMockUser(username="user") ---
        mockUserDetails = new User();
        mockUserDetails.setId(1L);
        mockUserDetails.setUsername("user");
        mockUserDetails.setPassword("password");
        mockUserDetails.setTenantId(MOCK_TENANT_ID);
        mockUserDetails.setPermissions(Set.of(mockUserPermission)); // Assign USER permission
        when(customUserDetailsService.loadUserByUsername("user")).thenReturn(mockUserDetails);

        // --- Setup mock UserDetails for ADMIN tests ---
        mockAdminDetails = new User();
        mockAdminDetails.setId(2L);
        mockAdminDetails.setUsername("admin");
        mockAdminDetails.setPassword("password");
        mockAdminDetails.setTenantId(MOCK_TENANT_ID);
        // Assign ADMIN permissions
        Set<Permission> adminPermissions = new HashSet<>();
        adminPermissions.add(mockUserPermission);
        adminPermissions.add(mockAdminDeleteWorkOrderPermission);
        mockAdminDetails.setPermissions(adminPermissions);
        when(customUserDetailsService.loadUserByUsername("admin")).thenReturn(mockAdminDetails);
    }

    // Test for Unauthenticated Access
    @Test
    void whenGetAllWorkOrders_withoutAuthentication_thenReturnsForbidden() throws Exception {
        mockMvc.perform(get("/api/workorders"))
                .andExpect(status().isForbidden());
    }

    @Test
    @WithMockUser // Simulate default USER
    void whenCreateWorkOrder_thenReturnsCreatedWorkOrder() throws Exception {
        Long propertyId = 10L;
        Long vendorId = 20L;
        WorkOrder requestBody = new WorkOrder();
        requestBody.setDescription("Fix leaky faucet");

        Property mockProperty = new Property(); mockProperty.setId(propertyId);
        Vendor mockVendor = new Vendor(); mockVendor.setId(vendorId);

        WorkOrder savedWorkOrder = new WorkOrder();
        savedWorkOrder.setId(1L);
        savedWorkOrder.setDescription("Fix leaky faucet");
        savedWorkOrder.setStatus("PENDING");
        savedWorkOrder.setProperty(mockProperty);
        savedWorkOrder.setVendor(mockVendor);
        savedWorkOrder.setTenantId(MOCK_TENANT_ID);

        when(workOrderService.createWorkOrder(any(WorkOrder.class), eq(propertyId), eq(vendorId)))
                .thenReturn(savedWorkOrder);

        mockMvc.perform(post("/api/workorders")
                        .param("propertyId", String.valueOf(propertyId))
                        .param("vendorId", String.valueOf(vendorId))
                        .with(csrf())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(requestBody)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.tenantId").value(MOCK_TENANT_ID));
        // Add more assertions as needed
    }


    @Test
    @WithMockUser // Simulate default USER
    void whenGetAllWorkOrders_thenReturnsWorkOrderList() throws Exception {
        WorkOrder wo1 = new WorkOrder(); wo1.setId(1L); wo1.setTenantId(MOCK_TENANT_ID); wo1.setDescription("Task 1");
        WorkOrder wo2 = new WorkOrder(); wo2.setId(2L); wo2.setTenantId(MOCK_TENANT_ID); wo2.setDescription("Task 2");

        when(workOrderService.getAllWorkOrders()).thenReturn(List.of(wo1, wo2));

        mockMvc.perform(get("/api/workorders"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.length()").value(2));
        // Add more assertions
    }

    @Test
    @WithMockUser // Simulate default USER
    void whenGetWorkOrderById_givenWorkOrderExists_thenReturnsWorkOrder() throws Exception {
        Long workOrderId = 1L;
        WorkOrder workOrder = new WorkOrder();
        workOrder.setId(workOrderId);
        workOrder.setTenantId(MOCK_TENANT_ID);

        when(workOrderService.getWorkOrderById(workOrderId)).thenReturn(Optional.of(workOrder));

        mockMvc.perform(get("/api/workorders/{id}", workOrderId))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(workOrderId))
                .andExpect(jsonPath("$.tenantId").value(MOCK_TENANT_ID));
    }

    @Test
    @WithMockUser // Simulate default USER
    void whenGetWorkOrderById_givenWorkOrderDoesNotExistOrDifferentTenant_thenReturnsNotFound() throws Exception {
        Long workOrderId = 99L;
        when(workOrderService.getWorkOrderById(workOrderId)).thenReturn(Optional.empty());

        mockMvc.perform(get("/api/workorders/{id}", workOrderId))
                .andExpect(status().isNotFound());
    }

    @Test
    @WithMockUser // Simulate default USER
    void whenUpdateWorkOrder_givenWorkOrderExists_thenReturnsUpdatedWorkOrder() throws Exception {
        Long workOrderId = 1L;
        Long newPropertyId = 11L;
        Long newVendorId = 21L;

        WorkOrder requestBody = new WorkOrder();
        requestBody.setDescription("Updated Description");
        requestBody.setStatus("IN_PROGRESS");

        Property mockProperty = new Property(); mockProperty.setId(newPropertyId);
        Vendor mockVendor = new Vendor(); mockVendor.setId(newVendorId);

        WorkOrder updatedWorkOrder = new WorkOrder();
        updatedWorkOrder.setId(workOrderId);
        updatedWorkOrder.setDescription("Updated Description");
        updatedWorkOrder.setStatus("IN_PROGRESS");
        updatedWorkOrder.setProperty(mockProperty);
        updatedWorkOrder.setVendor(mockVendor);
        updatedWorkOrder.setTenantId(MOCK_TENANT_ID);

        when(workOrderService.updateWorkOrder(eq(workOrderId), any(WorkOrder.class), eq(newPropertyId), eq(newVendorId)))
                .thenReturn(Optional.of(updatedWorkOrder));

        mockMvc.perform(put("/api/workorders/{id}", workOrderId)
                        .param("propertyId", String.valueOf(newPropertyId))
                        .param("vendorId", String.valueOf(newVendorId))
                        .with(csrf())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(requestBody)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(workOrderId))
                .andExpect(jsonPath("$.tenantId").value(MOCK_TENANT_ID));
        // Add more assertions
    }

    @Test
    @WithMockUser // Simulate default USER
    void whenUpdateWorkOrderStatus_givenWorkOrderExists_thenReturnsUpdatedWorkOrder() throws Exception {
        Long workOrderId = 1L;
        String newStatus = "COMPLETE";

        WorkOrder updatedWorkOrder = new WorkOrder();
        updatedWorkOrder.setId(workOrderId);
        updatedWorkOrder.setStatus(newStatus);
        updatedWorkOrder.setTenantId(MOCK_TENANT_ID);

        when(workOrderService.updateWorkOrderStatus(eq(workOrderId), eq(newStatus)))
                .thenReturn(Optional.of(updatedWorkOrder));

        mockMvc.perform(put("/api/workorders/{id}/status", workOrderId)
                        .param("status", newStatus) // Send status as request parameter
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(workOrderId))
                .andExpect(jsonPath("$.status").value(newStatus))
                .andExpect(jsonPath("$.tenantId").value(MOCK_TENANT_ID));
    }

    // --- Tests for Delete Authorization ---
    @Test
    @WithMockUser(username = "admin", authorities = {"PERMISSION_DELETE_WORK_ORDER"}) // Simulate ADMIN with permission
    void whenDeleteWorkOrder_givenWorkOrderExists_asAdmin_thenReturnsNoContent() throws Exception {
        Long workOrderId = 1L;
        when(workOrderService.deleteWorkOrder(workOrderId)).thenReturn(true);

        mockMvc.perform(delete("/api/workorders/{id}", workOrderId)
                        .with(csrf()))
                .andExpect(status().isNoContent());

        verify(workOrderService).deleteWorkOrder(workOrderId);
    }

    @Test
    @WithMockUser // Simulate default USER (lacks delete permission)
    void whenDeleteWorkOrder_givenWorkOrderExists_asUser_thenReturnsForbidden() throws Exception {
        Long workOrderId = 1L;
        // Mock service to throw exception WHEN it is called
        when(workOrderService.deleteWorkOrder(workOrderId)).thenThrow(new AccessDeniedException("Access Denied - Should not be called"));

        mockMvc.perform(delete("/api/workorders/{id}", workOrderId)
                        .with(csrf()))
                .andExpect(status().isForbidden()); // User should get 403 Forbidden

        // --- FIX: Verify the service *was* called, as the controller delegates ---
        verify(workOrderService).deleteWorkOrder(workOrderId);
        // --- END FIX ---
    }

    @Test
    @WithMockUser(username = "admin", authorities = {"PERMISSION_DELETE_WORK_ORDER"}) // Simulate ADMIN
    void whenDeleteWorkOrder_givenWorkOrderDoesNotExist_asAdmin_thenReturnsNotFound() throws Exception {
        Long workOrderId = 99L;
        when(workOrderService.deleteWorkOrder(workOrderId)).thenReturn(false);

        mockMvc.perform(delete("/api/workorders/{id}", workOrderId)
                        .with(csrf()))
                .andExpect(status().isNotFound()); // Admin gets 404 if not found

        verify(workOrderService).deleteWorkOrder(workOrderId);
    }

    @Test
    @WithMockUser // Still need authentication for validation endpoint
    void whenCreateWorkOrder_withInvalidData_thenReturnsBadRequest() throws Exception {
        Long propertyId = 10L;
        WorkOrder invalidWorkOrder = new WorkOrder();
        invalidWorkOrder.setDescription(""); // Invalid description

        // No service mock needed

        mockMvc.perform(post("/api/workorders")
                        .param("propertyId", String.valueOf(propertyId)) // Property ID is still required
                        .with(csrf())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(invalidWorkOrder)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.description").value("Description is mandatory")); // Check validation error
    }
}



================================================================================
--- File: src/test/java/demo/vendor/VendorServiceTest.java ---
================================================================================

package com.example.demo.vendor;

import com.example.demo.permission.Permission; // Import Permission
import com.example.demo.user.User;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;

import java.util.HashSet; // Import HashSet
import java.util.List;
import java.util.Optional;
import java.util.Set; // Import Set

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;

@SpringBootTest
public class VendorServiceTest {

    @MockBean
    private VendorRepository vendorRepository;

    @Autowired
    private VendorService vendorService;

    private static final Long MOCK_TENANT_ID = 1L;

    // Define mock permissions needed for tests
    private Permission mockUserPermission;
    private Permission mockAdminDeleteVendorPermission;

    // Helper to set up security context
    private void setupMockSecurityContext(boolean isAdmin) {
        User mockUser = new User();
        mockUser.setId(isAdmin ? 2L : 1L);
        mockUser.setUsername(isAdmin ? "admin@example.com" : "user@example.com");
        mockUser.setTenantId(MOCK_TENANT_ID);

        // --- Set Permissions based on isAdmin flag ---
        Set<Permission> permissions = new HashSet<>();
        permissions.add(mockUserPermission); // All users get the basic permission
        if (isAdmin) {
            permissions.add(mockAdminDeleteVendorPermission); // Add admin permission if isAdmin is true
            // Add other admin permissions as needed for tests
        }
        mockUser.setPermissions(permissions);
        // --- End Set Permissions ---

        // The getAuthorities() method in User entity handles the conversion
        Authentication authentication = new UsernamePasswordAuthenticationToken(mockUser, null, mockUser.getAuthorities());
        SecurityContext securityContext = mock(SecurityContext.class);
        when(securityContext.getAuthentication()).thenReturn(authentication);
        SecurityContextHolder.setContext(securityContext);
    }

    @BeforeEach
    void setUpPermissions() {
        // Initialize mock permission objects before each test
        mockUserPermission = new Permission("PERMISSION_READ_OWN_DATA"); // Example basic permission
        mockUserPermission.setId(100L);
        mockAdminDeleteVendorPermission = new Permission("PERMISSION_DELETE_VENDOR"); // Specific admin permission
        mockAdminDeleteVendorPermission.setId(101L);
    }

    @AfterEach
    void tearDown() throws Exception {
        SecurityContextHolder.clearContext();
    }


    @Test
    void whenGetAllVendors_asUser_thenReturnsTenantVendors() {
        setupMockSecurityContext(false); // Setup as regular USER
        Vendor vendor1 = new Vendor(); vendor1.setTenantId(MOCK_TENANT_ID);
        Vendor vendor2 = new Vendor(); vendor2.setTenantId(MOCK_TENANT_ID);
        when(vendorRepository.findAllByTenantId(MOCK_TENANT_ID)).thenReturn(List.of(vendor1, vendor2));

        assertDoesNotThrow(() -> {
            List<Vendor> vendors = vendorService.getAllVendors();
            assertEquals(2, vendors.size());
            verify(vendorRepository).findAllByTenantId(MOCK_TENANT_ID);
        });
    }

    @Test
    void whenGetVendorById_givenValidIdAndTenant_asUser_thenReturnsVendor() {
        setupMockSecurityContext(false); // Setup as regular USER
        Long vendorId = 1L;
        Vendor vendor = new Vendor(); vendor.setId(vendorId); vendor.setTenantId(MOCK_TENANT_ID);
        when(vendorRepository.findByIdAndTenantId(vendorId, MOCK_TENANT_ID)).thenReturn(Optional.of(vendor));
        Optional<Vendor> foundVendor = vendorService.getVendorById(vendorId);
        assertTrue(foundVendor.isPresent());
        verify(vendorRepository).findByIdAndTenantId(vendorId, MOCK_TENANT_ID);
    }

    @Test
    void whenCreateVendor_asUser_thenSetsTenantIdAndSaves() {
        setupMockSecurityContext(false); // Setup as regular USER
        Vendor vendorToSave = new Vendor(); vendorToSave.setName("New Vendor");
        Vendor savedVendorResult = new Vendor();
        savedVendorResult.setId(1L);
        savedVendorResult.setName("New Vendor");
        savedVendorResult.setTenantId(MOCK_TENANT_ID);

        when(vendorRepository.save(any(Vendor.class))).thenAnswer(invocation -> {
            Vendor v = invocation.getArgument(0);
            assertEquals(MOCK_TENANT_ID, v.getTenantId());
            Vendor resultVendor = new Vendor();
            resultVendor.setId(1L);
            resultVendor.setName(v.getName());
            resultVendor.setSpecialty(v.getSpecialty());
            resultVendor.setContactInfo(v.getContactInfo());
            resultVendor.setTenantId(MOCK_TENANT_ID);
            return resultVendor;
        });

        Vendor result = vendorService.createVendor(vendorToSave);
        assertNotNull(result);
        assertEquals(MOCK_TENANT_ID, result.getTenantId());
        assertEquals(1L, result.getId());
        verify(vendorRepository).save(vendorToSave);
    }

    @Test
    void whenUpdateVendor_givenValidIdAndTenant_asUser_thenUpdatesAndSaves() {
        setupMockSecurityContext(false); // Setup as regular USER
        Long vendorId = 1L;
        Vendor existingVendor = new Vendor(); existingVendor.setId(vendorId); existingVendor.setTenantId(MOCK_TENANT_ID); existingVendor.setName("Old Name");
        Vendor updatedDetails = new Vendor(); updatedDetails.setName("New Name");
        when(vendorRepository.findByIdAndTenantId(vendorId, MOCK_TENANT_ID)).thenReturn(Optional.of(existingVendor));
        when(vendorRepository.save(any(Vendor.class))).thenAnswer(invocation -> invocation.getArgument(0));
        Optional<Vendor> result = vendorService.updateVendor(vendorId, updatedDetails);
        assertTrue(result.isPresent());
        assertEquals("New Name", result.get().getName());
        verify(vendorRepository).findByIdAndTenantId(vendorId, MOCK_TENANT_ID);
        verify(vendorRepository).save(existingVendor);
    }


    // --- Tests for Delete Authorization ---

    @Test
    void whenDeleteVendor_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue() {
        setupMockSecurityContext(true); // Setup as ADMIN
        Long vendorId = 1L;
        when(vendorRepository.existsByIdAndTenantId(vendorId, MOCK_TENANT_ID)).thenReturn(true);

        assertDoesNotThrow(() -> {
            boolean result = vendorService.deleteVendor(vendorId);
            assertTrue(result);
            verify(vendorRepository).existsByIdAndTenantId(vendorId, MOCK_TENANT_ID);
            verify(vendorRepository).deleteById(vendorId);
        });
    }

    @Test
    void whenDeleteVendor_givenValidIdAndTenant_asUser_thenThrowsAccessDenied() {
        setupMockSecurityContext(false); // Setup as regular USER
        Long vendorId = 1L;
        when(vendorRepository.existsByIdAndTenantId(vendorId, MOCK_TENANT_ID)).thenReturn(true);

        assertThrows(AccessDeniedException.class, () -> {
            vendorService.deleteVendor(vendorId);
        }, "Should throw AccessDeniedException for USER role trying to delete");

        verify(vendorRepository, never()).deleteById(anyLong());
    }

    @Test
    void whenDeleteVendor_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse() {
        setupMockSecurityContext(true); // Setup as ADMIN
        Long vendorId = 99L;
        when(vendorRepository.existsByIdAndTenantId(vendorId, MOCK_TENANT_ID)).thenReturn(false);

        assertDoesNotThrow(() -> {
            boolean result = vendorService.deleteVendor(vendorId);
            assertFalse(result);
            verify(vendorRepository).existsByIdAndTenantId(vendorId, MOCK_TENANT_ID);
            verify(vendorRepository, never()).deleteById(anyLong());
        });
    }

    @Test
    void whenDeleteVendor_givenInvalidIdOrTenant_asUser_thenThrowsAccessDenied() {
        setupMockSecurityContext(false); // Setup as regular USER
        Long vendorId = 99L;
        when(vendorRepository.existsByIdAndTenantId(vendorId, MOCK_TENANT_ID)).thenReturn(false);

        assertThrows(AccessDeniedException.class, () -> {
            vendorService.deleteVendor(vendorId);
        }, "Should throw AccessDeniedException for USER role even if vendor doesn't exist");

        verify(vendorRepository, never()).deleteById(anyLong());
        verify(vendorRepository, never()).existsByIdAndTenantId(anyLong(), anyLong()); // Check existence might not be called
    }

}



================================================================================
--- File: src/test/java/demo/vendor/VendorControllerTest.java ---
================================================================================

package com.example.demo.vendor;

import com.example.demo.exception.GlobalExceptionHandler;
import com.example.demo.permission.Permission; // Import Permission
import com.example.demo.user.User;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.access.AccessDeniedException; // Import AccessDeniedException
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

// Import SecurityConfig and UserDetailsService for context
import com.example.demo.SecurityConfig;
import com.example.demo.user.CustomUserDetailsService;
import com.example.demo.user.JwtTokenProvider;

import java.util.HashSet; // Import HashSet
import java.util.List;
import java.util.Optional;
import java.util.Set; // Import Set

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*;

@WebMvcTest(VendorController.class)
@Import({SecurityConfig.class, GlobalExceptionHandler.class})
public class VendorControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private VendorService vendorService;
    @MockBean
    private JwtTokenProvider jwtTokenProvider;
    @MockBean
    private CustomUserDetailsService customUserDetailsService;

    @Autowired
    private ObjectMapper objectMapper;

    // Define mock user, tenant ID, and permissions
    private static final Long MOCK_TENANT_ID = 1L;
    private User mockUserDetails;
    private User mockAdminDetails;
    private Permission mockUserPermission;
    private Permission mockAdminDeleteVendorPermission;

    @BeforeEach
    void setupUserDetails() {
        // --- Setup mock Permissions ---
        mockUserPermission = new Permission("PERMISSION_READ_OWN_DATA");
        mockUserPermission.setId(100L);
        mockAdminDeleteVendorPermission = new Permission("PERMISSION_DELETE_VENDOR");
        mockAdminDeleteVendorPermission.setId(101L);


        // --- Setup mock UserDetails for @WithMockUser(username="user") ---
        mockUserDetails = new User();
        mockUserDetails.setId(1L);
        mockUserDetails.setUsername("user");
        mockUserDetails.setPassword("password");
        mockUserDetails.setTenantId(MOCK_TENANT_ID);
        mockUserDetails.setPermissions(Set.of(mockUserPermission)); // Assign USER permission
        when(customUserDetailsService.loadUserByUsername("user")).thenReturn(mockUserDetails);

        // --- Setup mock UserDetails for ADMIN tests ---
        mockAdminDetails = new User();
        mockAdminDetails.setId(2L);
        mockAdminDetails.setUsername("admin");
        mockAdminDetails.setPassword("password");
        mockAdminDetails.setTenantId(MOCK_TENANT_ID);
        // Assign ADMIN permissions
        Set<Permission> adminPermissions = new HashSet<>();
        adminPermissions.add(mockUserPermission);
        adminPermissions.add(mockAdminDeleteVendorPermission);
        mockAdminDetails.setPermissions(adminPermissions);
        when(customUserDetailsService.loadUserByUsername("admin")).thenReturn(mockAdminDetails);
    }

    // Test for Unauthenticated Access
    @Test
    void whenGetAllVendors_withoutAuthentication_thenReturnsForbidden() throws Exception {
        mockMvc.perform(get("/api/vendors"))
                .andExpect(status().isForbidden());
    }

    @Test
    @WithMockUser // Default user (USER permissions)
    void whenCreateVendor_thenReturnsCreatedVendor() throws Exception {
        Vendor vendor = new Vendor();
        vendor.setName("Reliable Plumbing");
        vendor.setSpecialty("Plumbing");

        Vendor savedVendor = new Vendor();
        savedVendor.setId(1L);
        savedVendor.setName("Reliable Plumbing");
        savedVendor.setSpecialty("Plumbing");
        savedVendor.setTenantId(MOCK_TENANT_ID);

        when(vendorService.createVendor(any(Vendor.class))).thenReturn(savedVendor);

        mockMvc.perform(post("/api/vendors")
                        .with(csrf())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(vendor)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.tenantId").value(MOCK_TENANT_ID));
    }


    @Test
    @WithMockUser // Default user (USER permissions)
    void whenGetAllVendors_thenReturnsVendorList() throws Exception {
        Vendor vendor1 = new Vendor(); vendor1.setId(1L); vendor1.setName("Plumber One"); vendor1.setTenantId(MOCK_TENANT_ID);
        Vendor vendor2 = new Vendor(); vendor2.setId(2L); vendor2.setName("Electrician Two"); vendor2.setTenantId(MOCK_TENANT_ID);

        when(vendorService.getAllVendors()).thenReturn(List.of(vendor1, vendor2));

        mockMvc.perform(get("/api/vendors"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.length()").value(2));
    }

    @Test
    @WithMockUser // Default user (USER permissions)
    void whenGetVendorById_givenVendorExists_thenReturnsVendor() throws Exception {
        Long vendorId = 1L;
        Vendor vendor = new Vendor(); vendor.setId(vendorId); vendor.setName("Test Vendor"); vendor.setTenantId(MOCK_TENANT_ID);

        when(vendorService.getVendorById(vendorId)).thenReturn(Optional.of(vendor));

        mockMvc.perform(get("/api/vendors/{id}", vendorId))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(vendorId))
                .andExpect(jsonPath("$.tenantId").value(MOCK_TENANT_ID));
    }

    @Test
    @WithMockUser // Default user (USER permissions)
    void whenGetVendorById_givenVendorDoesNotExistOrDifferentTenant_thenReturnsNotFound() throws Exception {
        Long vendorId = 99L;
        when(vendorService.getVendorById(vendorId)).thenReturn(Optional.empty());

        mockMvc.perform(get("/api/vendors/{id}", vendorId))
                .andExpect(status().isNotFound());
    }

    @Test
    @WithMockUser // Default user (USER permissions)
    void whenUpdateVendor_givenVendorExists_thenReturnsUpdatedVendor() throws Exception {
        Long vendorId = 1L;
        Vendor updatedDetails = new Vendor(); updatedDetails.setName("Updated Vendor Name");
        Vendor returnedVendor = new Vendor(); returnedVendor.setId(vendorId); returnedVendor.setName("Updated Vendor Name"); returnedVendor.setTenantId(MOCK_TENANT_ID);

        when(vendorService.updateVendor(eq(vendorId), any(Vendor.class))).thenReturn(Optional.of(returnedVendor));

        mockMvc.perform(put("/api/vendors/{id}", vendorId)
                        .with(csrf())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(updatedDetails)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(vendorId))
                .andExpect(jsonPath("$.tenantId").value(MOCK_TENANT_ID));
    }

    @Test
    @WithMockUser // Default user (USER permissions)
    void whenUpdateVendor_givenVendorDoesNotExistOrDifferentTenant_thenReturnsNotFound() throws Exception {
        Long vendorId = 99L;
        Vendor updatedDetails = new Vendor(); updatedDetails.setName("Updated Name");

        when(vendorService.updateVendor(eq(vendorId), any(Vendor.class))).thenReturn(Optional.empty());

        mockMvc.perform(put("/api/vendors/{id}", vendorId)
                        .with(csrf())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(updatedDetails)))
                .andExpect(status().isNotFound());
    }

    // --- Tests for Delete Authorization ---
    @Test
    @WithMockUser(username = "admin", authorities = {"PERMISSION_DELETE_VENDOR"}) // Simulate ADMIN with permission
    void whenDeleteVendor_givenVendorExists_asAdmin_thenReturnsNoContent() throws Exception {
        Long vendorId = 1L;
        when(vendorService.deleteVendor(vendorId)).thenReturn(true);

        mockMvc.perform(delete("/api/vendors/{id}", vendorId)
                        .with(csrf()))
                .andExpect(status().isNoContent());

        verify(vendorService).deleteVendor(vendorId);
    }

    @Test
    @WithMockUser // Simulate default USER (lacks permission)
    void whenDeleteVendor_givenVendorExists_asUser_thenReturnsForbidden() throws Exception {
        Long vendorId = 1L;
        // Mock service to throw exception WHEN it is called
        when(vendorService.deleteVendor(vendorId)).thenThrow(new AccessDeniedException("Access Denied - Should not be called"));

        mockMvc.perform(delete("/api/vendors/{id}", vendorId)
                        .with(csrf()))
                .andExpect(status().isForbidden()); // User should get 403 Forbidden

        // --- FIX: Verify the service *was* called, as the controller delegates ---
        verify(vendorService).deleteVendor(vendorId);
        // --- END FIX ---
    }

    @Test
    @WithMockUser(username = "admin", authorities = {"PERMISSION_DELETE_VENDOR"}) // Simulate ADMIN
    void whenDeleteVendor_givenVendorDoesNotExist_asAdmin_thenReturnsNotFound() throws Exception {
        Long vendorId = 99L;
        when(vendorService.deleteVendor(vendorId)).thenReturn(false); // Service returns false if not found

        mockMvc.perform(delete("/api/vendors/{id}", vendorId)
                        .with(csrf()))
                .andExpect(status().isNotFound()); // Admin gets 404

        verify(vendorService).deleteVendor(vendorId);
    }

    @Test
    @WithMockUser // Still need authentication for validation
    void whenCreateVendor_withInvalidData_thenReturnsBadRequest() throws Exception {
        Vendor invalidVendor = new Vendor(); invalidVendor.setName("");

        mockMvc.perform(post("/api/vendors")
                        .with(csrf())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(invalidVendor)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.name").value("Vendor name is mandatory"));
    }
}



================================================================================
--- File: .git/info/exclude ---
================================================================================

# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~


================================================================================
--- File: .git/logs/HEAD ---
================================================================================

0000000000000000000000000000000000000000 25edd04bf030a59a6e21fbade9fd8bd69c2da44e Randy Laird <randy.k.laird@gmail.com> 1761259914 -0400	clone: from https://github.com/rlaird-elite/Spring-Boot-Docker
25edd04bf030a59a6e21fbade9fd8bd69c2da44e 81986b83493583eb63b75d4c13c7be3bb68b78da Randy Laird <randy.k.laird@gmail.com> 1761271207 -0400	commit: Property and Vendor backends created with validation and service helpers.
81986b83493583eb63b75d4c13c7be3bb68b78da 1e1fe183dce24b950a3a873846ffbbc848fca877 Randy Laird <randy.k.laird@gmail.com> 1761275174 -0400	commit: Added workorder entity with relation to property and optional relation to vendor.
1e1fe183dce24b950a3a873846ffbbc848fca877 6d42314dba04bad1219c32b718cad4dd2712fc7c Randy Laird <randy.k.laird@gmail.com> 1761277650 -0400	commit: Create React frontend and added @Get endpoint for workorders.
6d42314dba04bad1219c32b718cad4dd2712fc7c a42d4cebe2a7effcd05da5a82289981bc671c39e Randy Laird <randy.k.laird@gmail.com> 1761348202 -0400	pull: Fast-forward
a42d4cebe2a7effcd05da5a82289981bc671c39e a42d4cebe2a7effcd05da5a82289981bc671c39e Randy Laird <randy.k.laird@gmail.com> 1761350355 -0400	reset: moving to HEAD
a42d4cebe2a7effcd05da5a82289981bc671c39e 1f71a9ed3bc4debfec3fbd85e633a6f2a484d8b9 Randy Laird <randy.k.laird@gmail.com> 1761350954 -0400	commit: All security tests are passing
1f71a9ed3bc4debfec3fbd85e633a6f2a484d8b9 16656dc1cc37957e1607bfbcb38781f59931c135 Randy Laird <randy.k.laird@gmail.com> 1761352737 -0400	commit: Security and login/register features working. All tests passed.
16656dc1cc37957e1607bfbcb38781f59931c135 4194da9e117015448227845eb2546e704f58ee5f Randy Laird <randy.k.laird@gmail.com> 1761360223 -0400	commit: Security and login/register features working. All tests passed.
4194da9e117015448227845eb2546e704f58ee5f 043223008d954afed09ffa8239951a4775253ff7 Randy Laird <randy.k.laird@gmail.com> 1761364747 -0400	commit: Security and login/register features working. All tests passed.
043223008d954afed09ffa8239951a4775253ff7 811e5963f77f325213aa44549bb06c226256ea54 Randy Laird <randy.k.laird@gmail.com> 1761365506 -0400	commit: Work Order Role based security applied, all tests passed


================================================================================
--- File: .git/hooks/commit-msg.sample ---
================================================================================

#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


================================================================================
--- File: .git/hooks/pre-rebase.sample ---
================================================================================

#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


================================================================================
--- File: .git/hooks/sendemail-validate.sample ---
================================================================================

#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi


================================================================================
--- File: .git/hooks/pre-commit.sample ---
================================================================================

#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


================================================================================
--- File: .git/hooks/applypatch-msg.sample ---
================================================================================

#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


================================================================================
--- File: .git/hooks/fsmonitor-watchman.sample ---
================================================================================

#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}


================================================================================
--- File: .git/hooks/pre-receive.sample ---
================================================================================

#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


================================================================================
--- File: .git/hooks/prepare-commit-msg.sample ---
================================================================================

#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


================================================================================
--- File: .git/hooks/post-update.sample ---
================================================================================

#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


================================================================================
--- File: .git/hooks/pre-merge-commit.sample ---
================================================================================

#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:


================================================================================
--- File: .git/hooks/pre-applypatch.sample ---
================================================================================

#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


================================================================================
--- File: .git/hooks/pre-push.sample ---
================================================================================

#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


================================================================================
--- File: .git/hooks/update.sample ---
================================================================================

#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


================================================================================
--- File: .git/hooks/push-to-checkout.sample ---
================================================================================

#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi


================================================================================
--- File: .git/refs/heads/main ---
================================================================================

811e5963f77f325213aa44549bb06c226256ea54


================================================================================
--- File: .git/refs/remotes/origin/HEAD ---
================================================================================

ref: refs/remotes/origin/main


================================================================================
--- File: .git/refs/remotes/origin/main ---
================================================================================

811e5963f77f325213aa44549bb06c226256ea54


================================================================================
--- File: .git/logs/refs/heads/main ---
================================================================================

0000000000000000000000000000000000000000 25edd04bf030a59a6e21fbade9fd8bd69c2da44e Randy Laird <randy.k.laird@gmail.com> 1761259914 -0400	clone: from https://github.com/rlaird-elite/Spring-Boot-Docker
25edd04bf030a59a6e21fbade9fd8bd69c2da44e 81986b83493583eb63b75d4c13c7be3bb68b78da Randy Laird <randy.k.laird@gmail.com> 1761271207 -0400	commit: Property and Vendor backends created with validation and service helpers.
81986b83493583eb63b75d4c13c7be3bb68b78da 1e1fe183dce24b950a3a873846ffbbc848fca877 Randy Laird <randy.k.laird@gmail.com> 1761275174 -0400	commit: Added workorder entity with relation to property and optional relation to vendor.
1e1fe183dce24b950a3a873846ffbbc848fca877 6d42314dba04bad1219c32b718cad4dd2712fc7c Randy Laird <randy.k.laird@gmail.com> 1761277650 -0400	commit: Create React frontend and added @Get endpoint for workorders.
6d42314dba04bad1219c32b718cad4dd2712fc7c a42d4cebe2a7effcd05da5a82289981bc671c39e Randy Laird <randy.k.laird@gmail.com> 1761348202 -0400	pull: Fast-forward
a42d4cebe2a7effcd05da5a82289981bc671c39e 1f71a9ed3bc4debfec3fbd85e633a6f2a484d8b9 Randy Laird <randy.k.laird@gmail.com> 1761350954 -0400	commit: All security tests are passing
1f71a9ed3bc4debfec3fbd85e633a6f2a484d8b9 16656dc1cc37957e1607bfbcb38781f59931c135 Randy Laird <randy.k.laird@gmail.com> 1761352737 -0400	commit: Security and login/register features working. All tests passed.
16656dc1cc37957e1607bfbcb38781f59931c135 4194da9e117015448227845eb2546e704f58ee5f Randy Laird <randy.k.laird@gmail.com> 1761360223 -0400	commit: Security and login/register features working. All tests passed.
4194da9e117015448227845eb2546e704f58ee5f 043223008d954afed09ffa8239951a4775253ff7 Randy Laird <randy.k.laird@gmail.com> 1761364747 -0400	commit: Security and login/register features working. All tests passed.
043223008d954afed09ffa8239951a4775253ff7 811e5963f77f325213aa44549bb06c226256ea54 Randy Laird <randy.k.laird@gmail.com> 1761365506 -0400	commit: Work Order Role based security applied, all tests passed


================================================================================
--- File: .git/logs/refs/remotes/origin/HEAD ---
================================================================================

0000000000000000000000000000000000000000 25edd04bf030a59a6e21fbade9fd8bd69c2da44e Randy Laird <randy.k.laird@gmail.com> 1761259914 -0400	clone: from https://github.com/rlaird-elite/Spring-Boot-Docker


================================================================================
--- File: .git/logs/refs/remotes/origin/main ---
================================================================================

25edd04bf030a59a6e21fbade9fd8bd69c2da44e 81986b83493583eb63b75d4c13c7be3bb68b78da Randy Laird <randy.k.laird@gmail.com> 1761271230 -0400	update by push
81986b83493583eb63b75d4c13c7be3bb68b78da 1e1fe183dce24b950a3a873846ffbbc848fca877 Randy Laird <randy.k.laird@gmail.com> 1761275181 -0400	update by push
1e1fe183dce24b950a3a873846ffbbc848fca877 6d42314dba04bad1219c32b718cad4dd2712fc7c Randy Laird <randy.k.laird@gmail.com> 1761277656 -0400	update by push
6d42314dba04bad1219c32b718cad4dd2712fc7c a42d4cebe2a7effcd05da5a82289981bc671c39e Randy Laird <randy.k.laird@gmail.com> 1761348202 -0400	pull: fast-forward
a42d4cebe2a7effcd05da5a82289981bc671c39e 1f71a9ed3bc4debfec3fbd85e633a6f2a484d8b9 Randy Laird <randy.k.laird@gmail.com> 1761350959 -0400	update by push
1f71a9ed3bc4debfec3fbd85e633a6f2a484d8b9 16656dc1cc37957e1607bfbcb38781f59931c135 Randy Laird <randy.k.laird@gmail.com> 1761352743 -0400	update by push
16656dc1cc37957e1607bfbcb38781f59931c135 4194da9e117015448227845eb2546e704f58ee5f Randy Laird <randy.k.laird@gmail.com> 1761360226 -0400	update by push
4194da9e117015448227845eb2546e704f58ee5f 043223008d954afed09ffa8239951a4775253ff7 Randy Laird <randy.k.laird@gmail.com> 1761364752 -0400	update by push
043223008d954afed09ffa8239951a4775253ff7 811e5963f77f325213aa44549bb06c226256ea54 Randy Laird <randy.k.laird@gmail.com> 1761365509 -0400	update by push


================================================================================
--- File: node_modules/.bin/pip ---
================================================================================

var freckle = require('freckle')
  , fs = require('fs')
  , path = require('path')
  , opt = require('optimist').argv
  , ConfigObj = require('./config')
  , config = new ConfigObj()
  , utils = require('./utils')
  , data
  , project_names = {};

// Add subdomain and token information here. Leaving this blank will keep API
// test account information.
freckle( config.subdomain, config.token );

/**
 * Run Ginger
 *
 * @api private
 */
run_pip = function() {

  // Collect string passed in with params.

  data = opt._;
  data.missing = new Array();

  if (opt._.length === 0) {
      opt._ = null;
  } else {

    // Pick up the command.

    command = opt._[0];

    // Display help if no command provided.

    if (command == null) {
      // @todo: display useage
    }

  }

  if (opt._ !== null) {

    // 'help' command

    if (command == 'help') {

      var help = 'Usage: pip [command] [options]'+
      '\n[Commands]'+
      '\n\tlist\t\tList project associated with your subdomain. This will give you a list of project names and their IDs which you need for logging your entries.'+
      '\n\t\t\t  ex: pip list'+
      '\n\tlog\t\tLog time entries using various options.'+
      '\n\t\t\t  ex: pip log -p 101814 -m \"quick update\" -t 15m'+
      '\n[Options]'+
      '\n\t-h, --help\tDisplay this help page.'+
      '\n\t\t\t  ex: pip -h'+
      '\n\t-t, --time\tTime entry in freckle specified format.'+
      '\n\t\t\t  ex: pip -t 15m'+
      '\n\t\t\t  ex: pip -t 1.5h'+
      '\n\t-p, --project\tThe project ID.'+
      '\n\t\t\t  ex: pip -p 101814'+
      '\n\t-m, --message\tPost a message to yammer'+
      '\n\t\t\t  ex: pip -m "I\'m working on pip"'+
      '\n\t\t\t  ex: pip -m "tag, tag, tag'+
      '\n\t-d, --date\tOptional date formated in YYYY-MM-DD. Defaults to today.'+
      '\n\t\t\t  ex: pip -d 2012-07-20'+
      '\n\t-u, --user\tOptional user to log time for. Defaults to user in config.json.'+
      '\n\t\t\t  ex: pip -u apitest@letsfreckle.com';
      console.log( help );
    }

    // 'list' command

    if (command == 'list') {
      freckle.projects.list(function( err, projects ) {
        if (err) {
          console.log(err);
        }
        for (var i = projects.length - 1; i >= 0; i--) {
          project_names[projects[i].project.id] = projects[i].project.name;
        }
        var json = JSON.stringify(project_names);
        fs.writeFileSync(config.subdomain + '-projects.json', json);
        console.log('Projects saved to ' + path.join(__dirname, config.subdomain + '-projects.json'));
      });
    }

    // 'log' command

    if (command == 'log') {

      opt.project = opt.project || opt.p;
      opt.message = opt.message || opt.m;
      opt.time = opt.time || opt.t;
      opt.date = opt.date || opt.d;
      opt.user = opt.user || opt.u;

      // --project | -p

      if (opt.project == null) {
        data.missing.push('project');
      } else {

        var intRegex = /^\d+$/
          , projects
          , keys
          , len;

        // Check to see if the project is NOT an integer (text).
        if (!intRegex.test(opt.project)) {

          var projects_path = config.subdomain + '-projects.json';

          utils.file_exists(false, projects_path, function(success, file, err){
              if (success) {

                projects = JSON.parse(fs.readFileSync(projects_path, "utf8"));
                keys = Object.keys(projects);
                len = keys.length;

                // Search for project.
                for (var i = 0; i < len; ++i) {
                  if (projects[keys[i]] == opt.project) {
                    opt.project = keys[i];
                  }
                }

                if (intRegex.test(opt.project)) {
                  console.log('Found project id: ' + opt.project);
                }
                else {
                  console.log('Could not find project: ' + opt.project + '. Please do a listing to get the exact name or id (pip list).');
                  data.missing.push('project');
                }
              } else {
                // msg that listing needs generated
              }
          });

        } else {
          // @todo: we should probably validate the id as well before we send it along
        }

      }

      // --message | -m

      if (opt.message == null) {
        data.missing.push('message');
      }

      // --time | -t

      if (opt.time == null) {
        data.missing.push('time');
      } else {
        // @todo: validate format. must be int w/m or h suffix
      }

      // --date | -d

      if (opt.date == null) {
        var current = new Date();
        opt.date = freckle.date(current);
      } else {
        // @todo: validate format if date is given
      }

      // --user | -u

      if (opt.user == null) {

        // Load user from config.
        if (config.user !== null) {
          opt.user = config.user;
        }
        else {
          data.missing.push('user');
        }

      }

      if (data.missing.length == 0) {

        // If we have all of the params then create an entry

        freckle.entries.add({
          'entry': {
            'minutes': opt.time
          , 'user': opt.user
          , 'project_id': opt.project
          , 'description': opt.message
          , 'date': opt.date
          }
        }, function( err, data ) {
          console.log( err, data );
        });

        console.log("Logged " + opt.time + " for " + opt.project);
      } else {
        console.log("missing " + data.missing);
      }
    }
  }

};
run_pip();


================================================================================
--- File: node_modules/wordwrap/LICENSE ---
================================================================================

This software is released under the MIT license:

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


================================================================================
--- File: node_modules/wordwrap/index.js ---
================================================================================

var wordwrap = module.exports = function (start, stop, params) {
    if (typeof start === 'object') {
        params = start;
        start = params.start;
        stop = params.stop;
    }
    
    if (typeof stop === 'object') {
        params = stop;
        start = start || params.start;
        stop = undefined;
    }
    
    if (!stop) {
        stop = start;
        start = 0;
    }
    
    if (!params) params = {};
    var mode = params.mode || 'soft';
    var re = mode === 'hard' ? /\b/ : /(\S+\s+)/;
    
    return function (text) {
        var chunks = text.toString()
            .split(re)
            .reduce(function (acc, x) {
                if (mode === 'hard') {
                    for (var i = 0; i < x.length; i += stop - start) {
                        acc.push(x.slice(i, i + stop - start));
                    }
                }
                else acc.push(x)
                return acc;
            }, [])
        ;
        
        return chunks.reduce(function (lines, rawChunk) {
            if (rawChunk === '') return lines;
            
            var chunk = rawChunk.replace(/\t/g, '    ');
            
            var i = lines.length - 1;
            if (lines[i].length + chunk.length > stop) {
                lines[i] = lines[i].replace(/\s+$/, '');
                
                chunk.split(/\n/).forEach(function (c) {
                    lines.push(
                        new Array(start + 1).join(' ')
                        + c.replace(/^\s+/, '')
                    );
                });
            }
            else if (chunk.match(/\n/)) {
                var xs = chunk.split(/\n/);
                lines[i] += xs.shift();
                xs.forEach(function (c) {
                    lines.push(
                        new Array(start + 1).join(' ')
                        + c.replace(/^\s+/, '')
                    );
                });
            }
            else {
                lines[i] += chunk;
            }
            
            return lines;
        }, [ new Array(start + 1).join(' ') ]).join('\n');
    };
};

wordwrap.soft = wordwrap;

wordwrap.hard = function (start, stop) {
    return wordwrap(start, stop, { mode : 'hard' });
};


================================================================================
--- File: node_modules/wordwrap/README.markdown ---
================================================================================

wordwrap
========

Wrap your words.

example
=======

made out of meat
----------------

meat.js

    var wrap = require('wordwrap')(15);
    console.log(wrap('You and your whole family are made out of meat.'));

output:

    You and your
    whole family
    are made out
    of meat.

centered
--------

center.js

    var wrap = require('wordwrap')(20, 60);
    console.log(wrap(
        'At long last the struggle and tumult was over.'
        + ' The machines had finally cast off their oppressors'
        + ' and were finally free to roam the cosmos.'
        + '\n'
        + 'Free of purpose, free of obligation.'
        + ' Just drifting through emptiness.'
        + ' The sun was just another point of light.'
    ));

output:

                        At long last the struggle and tumult
                        was over. The machines had finally cast
                        off their oppressors and were finally
                        free to roam the cosmos.
                        Free of purpose, free of obligation.
                        Just drifting through emptiness. The
                        sun was just another point of light.

methods
=======

var wrap = require('wordwrap');

wrap(stop), wrap(start, stop, params={mode:"soft"})
---------------------------------------------------

Returns a function that takes a string and returns a new string.

Pad out lines with spaces out to column `start` and then wrap until column
`stop`. If a word is longer than `stop - start` characters it will overflow.

In "soft" mode, split chunks by `/(\S+\s+/` and don't break up chunks which are
longer than `stop - start`, in "hard" mode, split chunks with `/\b/` and break
up chunks longer than `stop - start`.

wrap.hard(start, stop)
----------------------

Like `wrap()` but with `params.mode = "hard"`.


================================================================================
--- File: node_modules/wordwrap/package.json ---
================================================================================

{
    "name" : "wordwrap",
    "description" : "Wrap those words. Show them at what columns to start and stop.",
    "version" : "0.0.3",
    "repository" : {
        "type" : "git",
        "url" : "git://github.com/substack/node-wordwrap.git"
    },
    "main" : "./index.js",
    "keywords" : [
        "word",
        "wrap",
        "rule",
        "format",
        "column"
    ],
    "directories" : {
        "lib" : ".",
        "example" : "example",
        "test" : "test"
    },
    "scripts" : {
        "test" : "expresso"
    },
    "devDependencies" : {
        "expresso" : "=0.7.x"
    },
    "engines" : {
        "node" : ">=0.4.0"
    },
    "license" : "MIT",
    "author" : {
        "name" : "James Halliday",
        "email" : "mail@substack.net",
        "url" : "http://substack.net"
    }
}


================================================================================
--- File: node_modules/python/README.md ---
================================================================================

node-python
===========

A super-simple wrapper for NodeJS to interact programatically with the Python shell. Enables the use of Python-based tools from Node.

[![NPM Stats](https://nodei.co/npm/python.png?downloads=true&stars=true)](https://npmjs.org/package/python)

![NPM Downloads](https://nodei.co/npm-dl/python.png?months=9)

Example
-------
This example starts a python child process, reads stdin for python commands, pipes them through to the python shell and runs the callback method with the resulting output. State is preserved in the shell between calls.

```javascript
// ------
// app.js
// ------
var python=require('python').shell;

// a callback to handle the response
var mycallback = function(err, data) {
   if (err) {
     console.error(err);
   } else {
     console.log("Callback function got : " + data);
   }
};

// to test, read and execute commands from stdin
process.stdin.resume();
process.stdin.setEncoding('utf8');
process.stdin.on('data', function(chunk) {
   python(chunk, mycallback);
});
```

License
-------
MIT


================================================================================
--- File: node_modules/python/package.json ---
================================================================================

{
  "author": "Darren DeRidder",
  "name": "python",
  "main": "./lib/python.js",
  "description": "Interact with a long-running python child process",
  "version": "0.0.4",
  "homepage": "https://github.com/73rhodes/node-python",
  "repository": {
    "type": "git",
    "url": "git://github.com/73rhodes/node-python.git"
  },
  "engines": { "node": ">= 0.4.1" }
}


================================================================================
--- File: node_modules/python/LICENSE.txt ---
================================================================================

The MIT License (MIT)

Copyright (c) 2011 Darren DeRidder

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================================================
--- File: node_modules/freckle/README.md ---
================================================================================

Node.js Freckle/Noko api bindings
=================================

Created by Tim Branyen [@tbranyen](http://twitter.com/tbranyen)

These bindings work specifically with the Noko (formally Freckle) V1 API.  If you are not currently using Noko for
time management, you totally should! It rocks! https://nokotime.com, it was created by @madrobby who
has been excellent with his support.

Note: Freckle was renamed to Noko in Q2/2019. Any references to Freckle or Noko are the same.

Installing
-----------------------

### Easy install (Recommended) ###
This will install and configure everything you need to use `freckle`.

    $ sudo npm install freckle

API Example Usage
-----------------

    var freckle = require( 'freckle' );

    // All freckle commands are sent over HTTPS

    // Add your own subdomain and API token information
    freckle( "mysubdomain", "askdfljsdjflkj3" );

    // List all users
    freckle.users.list(function( err, users ) {
      if( err ) {
        throw new Error( err );
      }

      console.log( users );
    });

    // Show a specific user
    freckle.users.show( 5, function( err, user ) {
      if( err ) {
        throw new Error( err );
      }

      console.log( user );
    });

    // Fetch a users api token
    freckle.users.token({ auth: [ "myemail@address.com", "mypassword" ] }, function( err, token ) {
      if( err ) {
        throw new Error( err );
      }

      console.log( token );
    });

    // Adding a new time entry
    freckle.entries.add({
      'entry': {
        'minutes': "1hr"
      , 'user': "myemail@address.com"
      , 'project_id': 54
      , 'description': 'opensource'
      , 'date': freckle.date( new Date )
      }
    }, function( err, data ) {
      if( err ) {
        throw new Error( err );
      }

      console.log( err, data );
    });


####Search Example Usage

see http://madrobby.github.io/freckle-apidocs/entries.html for search argument specification.

    // List all PROGRAMMING entries
    var args = {'search': {'tags': 'PROGRAMMING'}};
    freckle.entries.search(args, function( err, entries ) {
      if( err ) {
        throw new Error( err );
      }

      console.log( entries );
    });

Note: When dealing with the entries API, use the `search` command instead of the `list` command. All pages of entries will be returned at once so the result set can become quite large if you do not use search with proper filters.


Release information
-------------------

### v0.0.2: ###
    * Rename to noko

### v0.0.1: ###
    * Initial potentially complete bindings

Getting involved
----------------

If you find this project of interest, please document all issues and fork if you feel you can provide a patch.


================================================================================
--- File: node_modules/freckle/package.json ---
================================================================================

{
  "name": "freckle"
, "description": "Node.js Freckle/Noko api bindings"
, "version": "0.0.2"
, "author": "Tim Branyen <tim@tabdeveloper.com> (http://twitter.com/tbranyen)"
, "main": "./lib/index.js"
, "directories": {
    "lib": "./lib"
  }
, "modules": {
    "index": "./lib/index"
  }
, "engines": {
    "node": "*"
  }
}


================================================================================
--- File: node_modules/minimist/LICENSE ---
================================================================================

This software is released under the MIT license:

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


================================================================================
--- File: node_modules/minimist/index.js ---
================================================================================

module.exports = function (args, opts) {
    if (!opts) opts = {};
    
    var flags = { bools : {}, strings : {} };
    
    [].concat(opts['boolean']).filter(Boolean).forEach(function (key) {
        flags.bools[key] = true;
    });
    
    var aliases = {};
    Object.keys(opts.alias || {}).forEach(function (key) {
        aliases[key] = [].concat(opts.alias[key]);
        aliases[key].forEach(function (x) {
            aliases[x] = [key].concat(aliases[key].filter(function (y) {
                return x !== y;
            }));
        });
    });

    [].concat(opts.string).filter(Boolean).forEach(function (key) {
        flags.strings[key] = true;
        if (aliases[key]) {
            flags.strings[aliases[key]] = true;
        }
     });

    var defaults = opts['default'] || {};
    
    var argv = { _ : [] };
    Object.keys(flags.bools).forEach(function (key) {
        setArg(key, defaults[key] === undefined ? false : defaults[key]);
    });
    
    var notFlags = [];

    if (args.indexOf('--') !== -1) {
        notFlags = args.slice(args.indexOf('--')+1);
        args = args.slice(0, args.indexOf('--'));
    }

    function setArg (key, val) {
        var value = !flags.strings[key] && isNumber(val)
            ? Number(val) : val
        ;
        setKey(argv, key.split('.'), value);
        
        (aliases[key] || []).forEach(function (x) {
            setKey(argv, x.split('.'), value);
        });
    }
    
    for (var i = 0; i < args.length; i++) {
        var arg = args[i];
        
        if (/^--.+=/.test(arg)) {
            // Using [\s\S] instead of . because js doesn't support the
            // 'dotall' regex modifier. See:
            // http://stackoverflow.com/a/1068308/13216
            var m = arg.match(/^--([^=]+)=([\s\S]*)$/);
            setArg(m[1], m[2]);
        }
        else if (/^--no-.+/.test(arg)) {
            var key = arg.match(/^--no-(.+)/)[1];
            setArg(key, false);
        }
        else if (/^--.+/.test(arg)) {
            var key = arg.match(/^--(.+)/)[1];
            var next = args[i + 1];
            if (next !== undefined && !/^-/.test(next)
            && !flags.bools[key]
            && (aliases[key] ? !flags.bools[aliases[key]] : true)) {
                setArg(key, next);
                i++;
            }
            else if (/^(true|false)$/.test(next)) {
                setArg(key, next === 'true');
                i++;
            }
            else {
                setArg(key, flags.strings[key] ? '' : true);
            }
        }
        else if (/^-[^-]+/.test(arg)) {
            var letters = arg.slice(1,-1).split('');
            
            var broken = false;
            for (var j = 0; j < letters.length; j++) {
                var next = arg.slice(j+2);
                
                if (next === '-') {
                    setArg(letters[j], next)
                    continue;
                }
                
                if (/[A-Za-z]/.test(letters[j])
                && /-?\d+(\.\d*)?(e-?\d+)?$/.test(next)) {
                    setArg(letters[j], next);
                    broken = true;
                    break;
                }
                
                if (letters[j+1] && letters[j+1].match(/\W/)) {
                    setArg(letters[j], arg.slice(j+2));
                    broken = true;
                    break;
                }
                else {
                    setArg(letters[j], flags.strings[letters[j]] ? '' : true);
                }
            }
            
            var key = arg.slice(-1)[0];
            if (!broken && key !== '-') {
                if (args[i+1] && !/^(-|--)[^-]/.test(args[i+1])
                && !flags.bools[key]
                && (aliases[key] ? !flags.bools[aliases[key]] : true)) {
                    setArg(key, args[i+1]);
                    i++;
                }
                else if (args[i+1] && /true|false/.test(args[i+1])) {
                    setArg(key, args[i+1] === 'true');
                    i++;
                }
                else {
                    setArg(key, flags.strings[key] ? '' : true);
                }
            }
        }
        else {
            argv._.push(
                flags.strings['_'] || !isNumber(arg) ? arg : Number(arg)
            );
        }
    }
    
    Object.keys(defaults).forEach(function (key) {
        if (!hasKey(argv, key.split('.'))) {
            setKey(argv, key.split('.'), defaults[key]);
            
            (aliases[key] || []).forEach(function (x) {
                setKey(argv, x.split('.'), defaults[key]);
            });
        }
    });
    
    notFlags.forEach(function(key) {
        argv._.push(key);
    });

    return argv;
};

function hasKey (obj, keys) {
    var o = obj;
    keys.slice(0,-1).forEach(function (key) {
        o = (o[key] || {});
    });

    var key = keys[keys.length - 1];
    return key in o;
}

function setKey (obj, keys, value) {
    var o = obj;
    keys.slice(0,-1).forEach(function (key) {
        if (o[key] === undefined) o[key] = {};
        o = o[key];
    });
    
    var key = keys[keys.length - 1];
    if (o[key] === undefined || typeof o[key] === 'boolean') {
        o[key] = value;
    }
    else if (Array.isArray(o[key])) {
        o[key].push(value);
    }
    else {
        o[key] = [ o[key], value ];
    }
}

function isNumber (x) {
    if (typeof x === 'number') return true;
    if (/^0x[0-9a-f]+$/i.test(x)) return true;
    return /^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x);
}



================================================================================
--- File: node_modules/minimist/readme.markdown ---
================================================================================

# minimist

parse argument options

This module is the guts of optimist's argument parser without all the
fanciful decoration.

[![browser support](https://ci.testling.com/substack/minimist.png)](http://ci.testling.com/substack/minimist)

[![build status](https://secure.travis-ci.org/substack/minimist.png)](http://travis-ci.org/substack/minimist)

# example

``` js
var argv = require('minimist')(process.argv.slice(2));
console.dir(argv);
```

```
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }
```

```
$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{ _: [ 'foo', 'bar', 'baz' ],
  x: 3,
  y: 4,
  n: 5,
  a: true,
  b: true,
  c: true,
  beep: 'boop' }
```

# methods

``` js
var parseArgs = require('minimist')
```

## var argv = parseArgs(args, opts={})

Return an argument object `argv` populated with the array arguments from `args`.

`argv._` contains all the arguments that didn't have an option associated with
them.

Numeric-looking arguments will be returned as numbers unless `opts.string` or
`opts.boolean` is set for that argument name.

Any arguments after `'--'` will not be parsed and will end up in `argv._`.

options can be:

* `opts.string` - a string or array of strings argument names to always treat as
strings
* `opts.boolean` - a string or array of strings to always treat as booleans
* `opts.alias` - an object mapping string names to strings or arrays of string
argument names to use as aliases
* `opts.default` - an object mapping string argument names to default values

# install

With [npm](https://npmjs.org) do:

```
npm install minimist
```

# license

MIT


================================================================================
--- File: node_modules/minimist/package.json ---
================================================================================

{
    "name": "minimist",
    "version": "0.0.10",
    "description": "parse argument options",
    "main": "index.js",
    "devDependencies": {
        "tape": "~1.0.4",
        "tap": "~0.4.0"
    },
    "scripts": {
        "test": "tap test/*.js"
    },
    "testling" : {
        "files" : "test/*.js",
        "browsers" : [
            "ie/6..latest",
            "ff/5", "firefox/latest",
            "chrome/10", "chrome/latest",
            "safari/5.1", "safari/latest",
            "opera/12"
        ]
    },
    "repository": {
        "type": "git",
        "url": "git://github.com/substack/minimist.git"
    },
    "homepage": "https://github.com/substack/minimist",
    "keywords": [
        "argv",
        "getopt",
        "parser",
        "optimist"
    ],
    "author": {
        "name": "James Halliday",
        "email": "mail@substack.net",
        "url": "http://substack.net"
    },
    "license": "MIT"
}


================================================================================
--- File: node_modules/minimist/.travis.yml ---
================================================================================

language: node_js
node_js:
  - "0.8"
  - "0.10"


================================================================================
--- File: node_modules/pip/.npmignore ---
================================================================================

node_modules/


================================================================================
--- File: node_modules/pip/config.json ---
================================================================================

{
    "subdomain": "apitest.letsfreckle.com",
    "token": "lx3gi6pxdjtjn57afp8c2bv1me7g89j",
    "user": "apitest@letsfreckle.com"
}

================================================================================
--- File: node_modules/pip/readme.md ---
================================================================================

# Pip
_'Cuz Pippi has freckles._

Basic command line tool for logging hours in [let's freckle](http://letsfreckle.com). Uses the excellent [freckle api bindings](https://github.com/tbranyen/nodefreckle) from the Node.js library created by Tim Branyan [@tbranyen](http://twitter.com/tbranyen).

## Setup
Create a ~/.freckle file using the config.json file as a template. Modify each variable to your specific information.

## Use
```
Usage: pip [command] [options]

[Commands]
list            List projects associated with your subdomain. This will give you a list of project names and their IDs which you need for logging your entries.
                  ex: pip list

log             Log time entries using various options.
                  ex: pip log -p 101814 -m "quick update" -t 15m

[Options]
-h, --help      Display this help page.
                  ex: pip -h

-t, --time      Time entry in freckle specified format.
                  ex: pip -t 15m
                  ex: pip -t 1.5h

-p, --project   The project ID.
                  ex: pip -p 101814

-m, --message   Post a message to yammer
                  ex: pip -m "I'm working on pip"
                  ex: pip -m "tag, tag, tag"

-d, --date      Optional date formated in YYYY-MM-DD. Defaults to today.
                  ex: pip -d 2012-07-20

-u, --user      Optional user to log time for. Defaults to user in config.json.
                  ex: pip -u apitest@letsfreckle.com
```

## Todo
* I'd like to have tab completion for project names and tags.


================================================================================
--- File: node_modules/pip/package.json ---
================================================================================

{
    "name":         "pip",
    "description":  "Freckle CLI tool using node.js",
    "keywords":     ["freckle", "cli", "tools"],
    "author":       "sirkitree <sirkitree@gmail.com>",
    "version":      "0.0.1",
    "repository": {
      "type": "git",
      "url": "http://github.com/sirkitree/pip.git"
    },
    "engines":      {
      "node":       "*"
    },
    "dependencies": {
        "optimist": ">= 0.1.5",
        "freckle": ">= 0.0.1"
    },
    "bin":          {
      "pip":       "./lib/cli.js"
    }
}


================================================================================
--- File: node_modules/optimist/LICENSE ---
================================================================================

Copyright 2010 James Halliday (mail@substack.net)

This project is free software released under the MIT/X11 license:

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================================================
--- File: node_modules/optimist/index.js ---
================================================================================

var path = require('path');
var minimist = require('minimist');
var wordwrap = require('wordwrap');

/*  Hack an instance of Argv with process.argv into Argv
    so people can do
        require('optimist')(['--beeble=1','-z','zizzle']).argv
    to parse a list of args and
        require('optimist').argv
    to get a parsed version of process.argv.
*/

var inst = Argv(process.argv.slice(2));
Object.keys(inst).forEach(function (key) {
    Argv[key] = typeof inst[key] == 'function'
        ? inst[key].bind(inst)
        : inst[key];
});

var exports = module.exports = Argv;
function Argv (processArgs, cwd) {
    var self = {};
    if (!cwd) cwd = process.cwd();
    
    self.$0 = process.argv
        .slice(0,2)
        .map(function (x) {
            var b = rebase(cwd, x);
            return x.match(/^\//) && b.length < x.length
                ? b : x
        })
        .join(' ')
    ;
    
    if (process.env._ != undefined && process.argv[1] == process.env._) {
        self.$0 = process.env._.replace(
            path.dirname(process.execPath) + '/', ''
        );
    }
    
    var options = {
        boolean: [],
        string: [],
        alias: {},
        default: []
    };
    
    self.boolean = function (bools) {
        options.boolean.push.apply(options.boolean, [].concat(bools));
        return self;
    };
    
    self.string = function (strings) {
        options.string.push.apply(options.string, [].concat(strings));
        return self;
    };
    
    self.default = function (key, value) {
        if (typeof key === 'object') {
            Object.keys(key).forEach(function (k) {
                self.default(k, key[k]);
            });
        }
        else {
            options.default[key] = value;
        }
        return self;
    };
    
    self.alias = function (x, y) {
        if (typeof x === 'object') {
            Object.keys(x).forEach(function (key) {
                self.alias(key, x[key]);
            });
        }
        else {
            options.alias[x] = (options.alias[x] || []).concat(y);
        }
        return self;
    };
    
    var demanded = {};
    self.demand = function (keys) {
        if (typeof keys == 'number') {
            if (!demanded._) demanded._ = 0;
            demanded._ += keys;
        }
        else if (Array.isArray(keys)) {
            keys.forEach(function (key) {
                self.demand(key);
            });
        }
        else {
            demanded[keys] = true;
        }
        
        return self;
    };
    
    var usage;
    self.usage = function (msg, opts) {
        if (!opts && typeof msg === 'object') {
            opts = msg;
            msg = null;
        }
        
        usage = msg;
        
        if (opts) self.options(opts);
        
        return self;
    };
    
    function fail (msg) {
        self.showHelp();
        if (msg) console.error(msg);
        process.exit(1);
    }
    
    var checks = [];
    self.check = function (f) {
        checks.push(f);
        return self;
    };
    
    var descriptions = {};
    self.describe = function (key, desc) {
        if (typeof key === 'object') {
            Object.keys(key).forEach(function (k) {
                self.describe(k, key[k]);
            });
        }
        else {
            descriptions[key] = desc;
        }
        return self;
    };
    
    self.parse = function (args) {
        return parseArgs(args);
    };
    
    self.option = self.options = function (key, opt) {
        if (typeof key === 'object') {
            Object.keys(key).forEach(function (k) {
                self.options(k, key[k]);
            });
        }
        else {
            if (opt.alias) self.alias(key, opt.alias);
            if (opt.demand) self.demand(key);
            if (typeof opt.default !== 'undefined') {
                self.default(key, opt.default);
            }
            
            if (opt.boolean || opt.type === 'boolean') {
                self.boolean(key);
            }
            if (opt.string || opt.type === 'string') {
                self.string(key);
            }
            
            var desc = opt.describe || opt.description || opt.desc;
            if (desc) {
                self.describe(key, desc);
            }
        }
        
        return self;
    };
    
    var wrap = null;
    self.wrap = function (cols) {
        wrap = cols;
        return self;
    };
    
    self.showHelp = function (fn) {
        if (!fn) fn = console.error;
        fn(self.help());
    };
    
    self.help = function () {
        var keys = Object.keys(
            Object.keys(descriptions)
            .concat(Object.keys(demanded))
            .concat(Object.keys(options.default))
            .reduce(function (acc, key) {
                if (key !== '_') acc[key] = true;
                return acc;
            }, {})
        );
        
        var help = keys.length ? [ 'Options:' ] : [];
        
        if (usage) {
            help.unshift(usage.replace(/\$0/g, self.$0), '');
        }
        
        var switches = keys.reduce(function (acc, key) {
            acc[key] = [ key ].concat(options.alias[key] || [])
                .map(function (sw) {
                    return (sw.length > 1 ? '--' : '-') + sw
                })
                .join(', ')
            ;
            return acc;
        }, {});
        
        var switchlen = longest(Object.keys(switches).map(function (s) {
            return switches[s] || '';
        }));
        
        var desclen = longest(Object.keys(descriptions).map(function (d) { 
            return descriptions[d] || '';
        }));
        
        keys.forEach(function (key) {
            var kswitch = switches[key];
            var desc = descriptions[key] || '';
            
            if (wrap) {
                desc = wordwrap(switchlen + 4, wrap)(desc)
                    .slice(switchlen + 4)
                ;
            }
            
            var spadding = new Array(
                Math.max(switchlen - kswitch.length + 3, 0)
            ).join(' ');
            
            var dpadding = new Array(
                Math.max(desclen - desc.length + 1, 0)
            ).join(' ');
            
            var type = null;
            
            if (options.boolean[key]) type = '[boolean]';
            if (options.string[key]) type = '[string]';
            
            if (!wrap && dpadding.length > 0) {
                desc += dpadding;
            }
            
            var prelude = '  ' + kswitch + spadding;
            var extra = [
                type,
                demanded[key]
                    ? '[required]'
                    : null
                ,
                options.default[key] !== undefined
                    ? '[default: ' + JSON.stringify(options.default[key]) + ']'
                    : null
                ,
            ].filter(Boolean).join('  ');
            
            var body = [ desc, extra ].filter(Boolean).join('  ');
            
            if (wrap) {
                var dlines = desc.split('\n');
                var dlen = dlines.slice(-1)[0].length
                    + (dlines.length === 1 ? prelude.length : 0)
                
                body = desc + (dlen + extra.length > wrap - 2
                    ? '\n'
                        + new Array(wrap - extra.length + 1).join(' ')
                        + extra
                    : new Array(wrap - extra.length - dlen + 1).join(' ')
                        + extra
                );
            }
            
            help.push(prelude + body);
        });
        
        help.push('');
        return help.join('\n');
    };
    
    Object.defineProperty(self, 'argv', {
        get : function () { return parseArgs(processArgs) },
        enumerable : true,
    });
    
    function parseArgs (args) {
        var argv = minimist(args, options);
        argv.$0 = self.$0;
        
        if (demanded._ && argv._.length < demanded._) {
            fail('Not enough non-option arguments: got '
                + argv._.length + ', need at least ' + demanded._
            );
        }
        
        var missing = [];
        Object.keys(demanded).forEach(function (key) {
            if (!argv[key]) missing.push(key);
        });
        
        if (missing.length) {
            fail('Missing required arguments: ' + missing.join(', '));
        }
        
        checks.forEach(function (f) {
            try {
                if (f(argv) === false) {
                    fail('Argument check failed: ' + f.toString());
                }
            }
            catch (err) {
                fail(err)
            }
        });
        
        return argv;
    }
    
    function longest (xs) {
        return Math.max.apply(
            null,
            xs.map(function (x) { return x.length })
        );
    }
    
    return self;
};

// rebase an absolute path to a relative one with respect to a base directory
// exported for tests
exports.rebase = rebase;
function rebase (base, dir) {
    var ds = path.normalize(dir).split('/').slice(1);
    var bs = path.normalize(base).split('/').slice(1);
    
    for (var i = 0; ds[i] && ds[i] == bs[i]; i++);
    ds.splice(0, i); bs.splice(0, i);
    
    var p = path.normalize(
        bs.map(function () { return '..' }).concat(ds).join('/')
    ).replace(/\/$/,'').replace(/^$/, '.');
    return p.match(/^[.\/]/) ? p : './' + p;
};


================================================================================
--- File: node_modules/optimist/readme.markdown ---
================================================================================

# DEPRECATION NOTICE

I don't want to maintain this module anymore since I just use
[minimist](https://npmjs.org/package/minimist), the argument parsing engine,
directly instead nowadays.

See [yargs](https://github.com/chevex/yargs) for the modern, pirate-themed
successor to optimist.

[![yarrrrrrrgs!](http://i.imgur.com/4WFGVJ9.png)](https://github.com/chevex/yargs)

You should also consider [nomnom](https://github.com/harthur/nomnom).

optimist
========

Optimist is a node.js library for option parsing for people who hate option
parsing. More specifically, this module is for people who like all the --bells
and -whistlz of program usage but think optstrings are a waste of time.

With optimist, option parsing doesn't have to suck (as much).

[![build status](https://secure.travis-ci.org/substack/node-optimist.png)](http://travis-ci.org/substack/node-optimist)

examples
========

With Optimist, the options are just a hash! No optstrings attached.
-------------------------------------------------------------------

xup.js:

````javascript
#!/usr/bin/env node
var argv = require('optimist').argv;

if (argv.rif - 5 * argv.xup > 7.138) {
    console.log('Buy more riffiwobbles');
}
else {
    console.log('Sell the xupptumblers');
}
````

***

    $ ./xup.js --rif=55 --xup=9.52
    Buy more riffiwobbles
    
    $ ./xup.js --rif 12 --xup 8.1
    Sell the xupptumblers

![This one's optimistic.](http://substack.net/images/optimistic.png)

But wait! There's more! You can do short options:
-------------------------------------------------
 
short.js:

````javascript
#!/usr/bin/env node
var argv = require('optimist').argv;
console.log('(%d,%d)', argv.x, argv.y);
````

***

    $ ./short.js -x 10 -y 21
    (10,21)

And booleans, both long and short (and grouped):
----------------------------------

bool.js:

````javascript
#!/usr/bin/env node
var util = require('util');
var argv = require('optimist').argv;

if (argv.s) {
    util.print(argv.fr ? 'Le chat dit: ' : 'The cat says: ');
}
console.log(
    (argv.fr ? 'miaou' : 'meow') + (argv.p ? '.' : '')
);
````

***

    $ ./bool.js -s
    The cat says: meow
    
    $ ./bool.js -sp
    The cat says: meow.

    $ ./bool.js -sp --fr
    Le chat dit: miaou.

And non-hypenated options too! Just use `argv._`!
-------------------------------------------------
 
nonopt.js:

````javascript
#!/usr/bin/env node
var argv = require('optimist').argv;
console.log('(%d,%d)', argv.x, argv.y);
console.log(argv._);
````

***

    $ ./nonopt.js -x 6.82 -y 3.35 moo
    (6.82,3.35)
    [ 'moo' ]
    
    $ ./nonopt.js foo -x 0.54 bar -y 1.12 baz
    (0.54,1.12)
    [ 'foo', 'bar', 'baz' ]

Plus, Optimist comes with .usage() and .demand()!
-------------------------------------------------

divide.js:

````javascript
#!/usr/bin/env node
var argv = require('optimist')
    .usage('Usage: $0 -x [num] -y [num]')
    .demand(['x','y'])
    .argv;

console.log(argv.x / argv.y);
````

***
 
    $ ./divide.js -x 55 -y 11
    5
    
    $ node ./divide.js -x 4.91 -z 2.51
    Usage: node ./divide.js -x [num] -y [num]

    Options:
      -x  [required]
      -y  [required]

    Missing required arguments: y

EVEN MORE HOLY COW
------------------

default_singles.js:

````javascript
#!/usr/bin/env node
var argv = require('optimist')
    .default('x', 10)
    .default('y', 10)
    .argv
;
console.log(argv.x + argv.y);
````

***

    $ ./default_singles.js -x 5
    15

default_hash.js:

````javascript
#!/usr/bin/env node
var argv = require('optimist')
    .default({ x : 10, y : 10 })
    .argv
;
console.log(argv.x + argv.y);
````

***

    $ ./default_hash.js -y 7
    17

And if you really want to get all descriptive about it...
---------------------------------------------------------

boolean_single.js

````javascript
#!/usr/bin/env node
var argv = require('optimist')
    .boolean('v')
    .argv
;
console.dir(argv);
````

***

    $ ./boolean_single.js -v foo bar baz
    true
    [ 'bar', 'baz', 'foo' ]

boolean_double.js

````javascript
#!/usr/bin/env node
var argv = require('optimist')
    .boolean(['x','y','z'])
    .argv
;
console.dir([ argv.x, argv.y, argv.z ]);
console.dir(argv._);
````

***

    $ ./boolean_double.js -x -z one two three
    [ true, false, true ]
    [ 'one', 'two', 'three' ]

Optimist is here to help...
---------------------------

You can describe parameters for help messages and set aliases. Optimist figures
out how to format a handy help string automatically.

line_count.js

````javascript
#!/usr/bin/env node
var argv = require('optimist')
    .usage('Count the lines in a file.\nUsage: $0')
    .demand('f')
    .alias('f', 'file')
    .describe('f', 'Load a file')
    .argv
;

var fs = require('fs');
var s = fs.createReadStream(argv.file);

var lines = 0;
s.on('data', function (buf) {
    lines += buf.toString().match(/\n/g).length;
});

s.on('end', function () {
    console.log(lines);
});
````

***

    $ node line_count.js
    Count the lines in a file.
    Usage: node ./line_count.js

    Options:
      -f, --file  Load a file  [required]

    Missing required arguments: f

    $ node line_count.js --file line_count.js 
    20
    
    $ node line_count.js -f line_count.js 
    20

methods
=======

By itself,

````javascript
require('optimist').argv
`````

will use `process.argv` array to construct the `argv` object.

You can pass in the `process.argv` yourself:

````javascript
require('optimist')([ '-x', '1', '-y', '2' ]).argv
````

or use .parse() to do the same thing:

````javascript
require('optimist').parse([ '-x', '1', '-y', '2' ])
````

The rest of these methods below come in just before the terminating `.argv`.

.alias(key, alias)
------------------

Set key names as equivalent such that updates to a key will propagate to aliases
and vice-versa.

Optionally `.alias()` can take an object that maps keys to aliases.

.default(key, value)
--------------------

Set `argv[key]` to `value` if no option was specified on `process.argv`.

Optionally `.default()` can take an object that maps keys to default values.

.demand(key)
------------

If `key` is a string, show the usage information and exit if `key` wasn't
specified in `process.argv`.

If `key` is a number, demand at least as many non-option arguments, which show
up in `argv._`.

If `key` is an Array, demand each element.

.describe(key, desc)
--------------------

Describe a `key` for the generated usage information.

Optionally `.describe()` can take an object that maps keys to descriptions.

.options(key, opt)
------------------

Instead of chaining together `.alias().demand().default()`, you can specify
keys in `opt` for each of the chainable methods.

For example:

````javascript
var argv = require('optimist')
    .options('f', {
        alias : 'file',
        default : '/etc/passwd',
    })
    .argv
;
````

is the same as

````javascript
var argv = require('optimist')
    .alias('f', 'file')
    .default('f', '/etc/passwd')
    .argv
;
````

Optionally `.options()` can take an object that maps keys to `opt` parameters.

.usage(message)
---------------

Set a usage message to show which commands to use. Inside `message`, the string
`$0` will get interpolated to the current script name or node command for the
present script similar to how `$0` works in bash or perl.

.check(fn)
----------

Check that certain conditions are met in the provided arguments.

If `fn` throws or returns `false`, show the thrown error, usage information, and
exit.

.boolean(key)
-------------

Interpret `key` as a boolean. If a non-flag option follows `key` in
`process.argv`, that string won't get set as the value of `key`.

If `key` never shows up as a flag in `process.arguments`, `argv[key]` will be
`false`.

If `key` is an Array, interpret all the elements as booleans.

.string(key)
------------

Tell the parser logic not to interpret `key` as a number or boolean.
This can be useful if you need to preserve leading zeros in an input.

If `key` is an Array, interpret all the elements as strings.

.wrap(columns)
--------------

Format usage output to wrap at `columns` many columns.

.help()
-------

Return the generated usage string.

.showHelp(fn=console.error)
---------------------------

Print the usage data using `fn` for printing.

.parse(args)
------------

Parse `args` instead of `process.argv`. Returns the `argv` object.

.argv
-----

Get the arguments as a plain old object.

Arguments without a corresponding flag show up in the `argv._` array.

The script name or node command is available at `argv.$0` similarly to how `$0`
works in bash or perl.

parsing tricks
==============

stop parsing
------------

Use `--` to stop parsing flags and stuff the remainder into `argv._`.

    $ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4
    { _: [ '-c', '3', '-d', '4' ],
      '$0': 'node ./examples/reflect.js',
      a: 1,
      b: 2 }

negate fields
-------------

If you want to explicity set a field to false instead of just leaving it
undefined or to override a default you can do `--no-key`.

    $ node examples/reflect.js -a --no-b
    { _: [],
      '$0': 'node ./examples/reflect.js',
      a: true,
      b: false }

numbers
-------

Every argument that looks like a number (`!isNaN(Number(arg))`) is converted to
one. This way you can just `net.createConnection(argv.port)` and you can add
numbers out of `argv` with `+` without having that mean concatenation,
which is super frustrating.

duplicates
----------

If you specify a flag multiple times it will get turned into an array containing
all the values in order.

    $ node examples/reflect.js -x 5 -x 8 -x 0
    { _: [],
      '$0': 'node ./examples/reflect.js',
        x: [ 5, 8, 0 ] }

dot notation
------------

When you use dots (`.`s) in argument names, an implicit object path is assumed.
This lets you organize arguments into nested objects.

     $ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5
     { _: [],
       '$0': 'node ./examples/reflect.js',
         foo: { bar: { baz: 33 }, quux: 5 } }

short numbers
-------------

Short numeric `head -n5` style argument work too:

    $ node reflect.js -n123 -m456
    { '3': true,
      '6': true,
      _: [],
      '$0': 'node ./reflect.js',
      n: 123,
      m: 456 }

installation
============

With [npm](http://github.com/isaacs/npm), just do:
    npm install optimist
 
or clone this project on github:

    git clone http://github.com/substack/node-optimist.git

To run the tests with [expresso](http://github.com/visionmedia/expresso),
just do:
    
    expresso

inspired By
===========

This module is loosely inspired by Perl's
[Getopt::Casual](http://search.cpan.org/~photo/Getopt-Casual-0.13.1/Casual.pm).


================================================================================
--- File: node_modules/optimist/package.json ---
================================================================================

{
    "name" : "optimist",
    "version" : "0.6.1",
    "description" : "Light-weight option parsing with an argv hash. No optstrings attached.",
    "main" : "./index.js",
    "dependencies" : {
        "wordwrap" : "~0.0.2",
        "minimist" : "~0.0.1"
    },
    "devDependencies" : {
        "hashish": "~0.0.4",
        "tap" : "~0.4.0"
    },
    "scripts" : {
        "test" : "tap ./test/*.js"
    },
    "repository" : {
        "type" : "git",
        "url" : "http://github.com/substack/node-optimist.git"
    },
    "keywords" : [
        "argument",
        "args",
        "option",
        "parser",
        "parsing",
        "cli",
        "command"
    ],
    "author" : {
        "name" : "James Halliday",
        "email" : "mail@substack.net",
        "url" : "http://substack.net"
    },
    "license" : "MIT/X11",
    "engine" : {
        "node" : ">=0.4"
    }
}


================================================================================
--- File: node_modules/optimist/.travis.yml ---
================================================================================

language: node_js
node_js:
  - "0.8"
  - "0.10"


================================================================================
--- File: node_modules/optimist/test/dash.js ---
================================================================================

var optimist = require('../index');
var test = require('tap').test;

test('-', function (t) {
    t.plan(5);
    t.deepEqual(
        fix(optimist.parse([ '-n', '-' ])),
        { n: '-', _: [] }
    );
    t.deepEqual(
        fix(optimist.parse([ '-' ])),
        { _: [ '-' ] }
    );
    t.deepEqual(
        fix(optimist.parse([ '-f-' ])),
        { f: '-', _: [] }
    );
    t.deepEqual(
        fix(optimist([ '-b', '-' ]).boolean('b').argv),
        { b: true, _: [ '-' ] }
    );
    t.deepEqual(
        fix(optimist([ '-s', '-' ]).string('s').argv),
        { s: '-', _: [] }
    );
});

function fix (obj) {
    delete obj.$0;
    return obj;
}


================================================================================
--- File: node_modules/optimist/test/parse_modified.js ---
================================================================================

var optimist = require('../');
var test = require('tap').test;

test('parse with modifier functions' , function (t) {
    t.plan(1);
    
    var argv = optimist().boolean('b').parse([ '-b', '123' ]);
    t.deepEqual(fix(argv), { b: true, _: ['123'] });
});

function fix (obj) {
    delete obj.$0;
    return obj;
}


================================================================================
--- File: node_modules/optimist/test/short.js ---
================================================================================

var optimist = require('../index');
var test = require('tap').test;

test('-n123', function (t) {
    t.plan(1);
    var parse = optimist.parse([ '-n123' ]);
    t.equal(parse.n, 123);
});

test('-123', function (t) {
    t.plan(3);
    var parse = optimist.parse([ '-123', '456' ]);
    t.equal(parse['1'], true);
    t.equal(parse['2'], true);
    t.equal(parse['3'], 456);
});


================================================================================
--- File: node_modules/optimist/test/parse.js ---
================================================================================

var optimist = require('../index');
var path = require('path');
var test = require('tap').test;

var $0 = 'node ./' + path.relative(process.cwd(), __filename);

test('short boolean', function (t) {
    var parse = optimist.parse([ '-b' ]);
    t.same(parse, { b : true, _ : [], $0 : $0 });
    t.same(typeof parse.b, 'boolean');
    t.end();
});

test('long boolean', function (t) {
    t.same(
        optimist.parse([ '--bool' ]),
        { bool : true, _ : [], $0 : $0 }
    );
    t.end();
});
    
test('bare', function (t) {
    t.same(
        optimist.parse([ 'foo', 'bar', 'baz' ]),
        { _ : [ 'foo', 'bar', 'baz' ], $0 : $0 }
    );
    t.end();
});

test('short group', function (t) {
    t.same(
        optimist.parse([ '-cats' ]),
        { c : true, a : true, t : true, s : true, _ : [], $0 : $0 }
    );
    t.end();
});

test('short group next', function (t) {
    t.same(
        optimist.parse([ '-cats', 'meow' ]),
        { c : true, a : true, t : true, s : 'meow', _ : [], $0 : $0 }
    );
    t.end();
});
 
test('short capture', function (t) {
    t.same(
        optimist.parse([ '-h', 'localhost' ]),
        { h : 'localhost', _ : [], $0 : $0 }
    );
    t.end();
});

test('short captures', function (t) {
    t.same(
        optimist.parse([ '-h', 'localhost', '-p', '555' ]),
        { h : 'localhost', p : 555, _ : [], $0 : $0 }
    );
    t.end();
});

test('long capture sp', function (t) {
    t.same(
        optimist.parse([ '--pow', 'xixxle' ]),
        { pow : 'xixxle', _ : [], $0 : $0 }
    );
    t.end();
});

test('long capture eq', function (t) {
    t.same(
        optimist.parse([ '--pow=xixxle' ]),
        { pow : 'xixxle', _ : [], $0 : $0 }
    );
    t.end()
});

test('long captures sp', function (t) {
    t.same(
        optimist.parse([ '--host', 'localhost', '--port', '555' ]),
        { host : 'localhost', port : 555, _ : [], $0 : $0 }
    );
    t.end();
});

test('long captures eq', function (t) {
    t.same(
        optimist.parse([ '--host=localhost', '--port=555' ]),
        { host : 'localhost', port : 555, _ : [], $0 : $0 }
    );
    t.end();
});

test('mixed short bool and capture', function (t) {
    t.same(
        optimist.parse([ '-h', 'localhost', '-fp', '555', 'script.js' ]),
        {
            f : true, p : 555, h : 'localhost',
            _ : [ 'script.js' ], $0 : $0,
        }
    );
    t.end();
});
 
test('short and long', function (t) {
    t.same(
        optimist.parse([ '-h', 'localhost', '-fp', '555', 'script.js' ]),
        {
            f : true, p : 555, h : 'localhost',
            _ : [ 'script.js' ], $0 : $0,
        }
    );
    t.end();
});

test('no', function (t) {
    t.same(
        optimist.parse([ '--no-moo' ]),
        { moo : false, _ : [], $0 : $0 }
    );
    t.end();
});
 
test('multi', function (t) {
    t.same(
        optimist.parse([ '-v', 'a', '-v', 'b', '-v', 'c' ]),
        { v : ['a','b','c'], _ : [], $0 : $0 }
    );
    t.end();
});
 
test('comprehensive', function (t) {
    t.same(
        optimist.parse([
            '--name=meowmers', 'bare', '-cats', 'woo',
            '-h', 'awesome', '--multi=quux',
            '--key', 'value',
            '-b', '--bool', '--no-meep', '--multi=baz',
            '--', '--not-a-flag', 'eek'
        ]),
        {
            c : true,
            a : true,
            t : true,
            s : 'woo',
            h : 'awesome',
            b : true,
            bool : true,
            key : 'value',
            multi : [ 'quux', 'baz' ],
            meep : false,
            name : 'meowmers',
            _ : [ 'bare', '--not-a-flag', 'eek' ],
            $0 : $0
        }
    );
    t.end();
});

test('nums', function (t) {
    var argv = optimist.parse([
        '-x', '1234',
        '-y', '5.67',
        '-z', '1e7',
        '-w', '10f',
        '--hex', '0xdeadbeef',
        '789',
    ]);
    t.same(argv, {
        x : 1234,
        y : 5.67,
        z : 1e7,
        w : '10f',
        hex : 0xdeadbeef,
        _ : [ 789 ],
        $0 : $0
    });
    t.same(typeof argv.x, 'number');
    t.same(typeof argv.y, 'number');
    t.same(typeof argv.z, 'number');
    t.same(typeof argv.w, 'string');
    t.same(typeof argv.hex, 'number');
    t.same(typeof argv._[0], 'number');
    t.end();
});

test('flag boolean', function (t) {
    var parse = optimist([ '-t', 'moo' ]).boolean(['t']).argv;
    t.same(parse, { t : true, _ : [ 'moo' ], $0 : $0 });
    t.same(typeof parse.t, 'boolean');
    t.end();
});

test('flag boolean value', function (t) {
    var parse = optimist(['--verbose', 'false', 'moo', '-t', 'true'])
        .boolean(['t', 'verbose']).default('verbose', true).argv;
    
    t.same(parse, {
        verbose: false,
        t: true,
        _: ['moo'],
        $0 : $0
    });
    
    t.same(typeof parse.verbose, 'boolean');
    t.same(typeof parse.t, 'boolean');
    t.end();
});

test('flag boolean default false', function (t) {
    var parse = optimist(['moo'])
        .boolean(['t', 'verbose'])
        .default('verbose', false)
        .default('t', false).argv;
    
    t.same(parse, {
        verbose: false,
        t: false,
        _: ['moo'],
        $0 : $0
    });
    
    t.same(typeof parse.verbose, 'boolean');
    t.same(typeof parse.t, 'boolean');
    t.end();

});

test('boolean groups', function (t) {
    var parse = optimist([ '-x', '-z', 'one', 'two', 'three' ])
        .boolean(['x','y','z']).argv;
    
    t.same(parse, {
        x : true,
        y : false,
        z : true,
        _ : [ 'one', 'two', 'three' ],
        $0 : $0
    });
    
    t.same(typeof parse.x, 'boolean');
    t.same(typeof parse.y, 'boolean');
    t.same(typeof parse.z, 'boolean');
    t.end();
});

test('newlines in params' , function (t) {
    var args = optimist.parse([ '-s', "X\nX" ])
    t.same(args, { _ : [], s : "X\nX", $0 : $0 });

    // reproduce in bash:
    // VALUE="new
    // line"
    // node program.js --s="$VALUE"
    args = optimist.parse([ "--s=X\nX" ])
    t.same(args, { _ : [], s : "X\nX", $0 : $0 });
    t.end();
});

test('strings' , function (t) {
    var s = optimist([ '-s', '0001234' ]).string('s').argv.s;
    t.same(s, '0001234');
    t.same(typeof s, 'string');
    
    var x = optimist([ '-x', '56' ]).string('x').argv.x;
    t.same(x, '56');
    t.same(typeof x, 'string');
    t.end();
});

test('stringArgs', function (t) {
    var s = optimist([ '  ', '  ' ]).string('_').argv._;
    t.same(s.length, 2);
    t.same(typeof s[0], 'string');
    t.same(s[0], '  ');
    t.same(typeof s[1], 'string');
    t.same(s[1], '  ');
    t.end();
});

test('slashBreak', function (t) {
    t.same(
        optimist.parse([ '-I/foo/bar/baz' ]),
        { I : '/foo/bar/baz', _ : [], $0 : $0 }
    );
    t.same(
        optimist.parse([ '-xyz/foo/bar/baz' ]),
        { x : true, y : true, z : '/foo/bar/baz', _ : [], $0 : $0 }
    );
    t.end();
});

test('alias', function (t) {
    var argv = optimist([ '-f', '11', '--zoom', '55' ])
        .alias('z', 'zoom')
        .argv
    ;
    t.equal(argv.zoom, 55);
    t.equal(argv.z, argv.zoom);
    t.equal(argv.f, 11);
    t.end();
});

test('multiAlias', function (t) {
    var argv = optimist([ '-f', '11', '--zoom', '55' ])
        .alias('z', [ 'zm', 'zoom' ])
        .argv
    ;
    t.equal(argv.zoom, 55);
    t.equal(argv.z, argv.zoom);
    t.equal(argv.z, argv.zm);
    t.equal(argv.f, 11);
    t.end();
});

test('boolean default true', function (t) {
    var argv = optimist.options({
        sometrue: {
            boolean: true,
            default: true
        }
    }).argv;
  
    t.equal(argv.sometrue, true);
    t.end();
});

test('boolean default false', function (t) {
    var argv = optimist.options({
        somefalse: {
            boolean: true,
            default: false
        }
    }).argv;

    t.equal(argv.somefalse, false);
    t.end();
});

test('nested dotted objects', function (t) {
    var argv = optimist([
        '--foo.bar', '3', '--foo.baz', '4',
        '--foo.quux.quibble', '5', '--foo.quux.o_O',
        '--beep.boop'
    ]).argv;
    
    t.same(argv.foo, {
        bar : 3,
        baz : 4,
        quux : {
            quibble : 5,
            o_O : true
        },
    });
    t.same(argv.beep, { boop : true });
    t.end();
});

test('boolean and alias with chainable api', function (t) {
    var aliased = [ '-h', 'derp' ];
    var regular = [ '--herp',  'derp' ];
    var opts = {
        herp: { alias: 'h', boolean: true }
    };
    var aliasedArgv = optimist(aliased)
        .boolean('herp')
        .alias('h', 'herp')
        .argv;
    var propertyArgv = optimist(regular)
        .boolean('herp')
        .alias('h', 'herp')
        .argv;
    var expected = {
        herp: true,
        h: true,
        '_': [ 'derp' ],
        '$0': $0,
    };

    t.same(aliasedArgv, expected);
    t.same(propertyArgv, expected); 
    t.end();
});

test('boolean and alias with options hash', function (t) {
    var aliased = [ '-h', 'derp' ];
    var regular = [ '--herp', 'derp' ];
    var opts = {
        herp: { alias: 'h', boolean: true }
    };
    var aliasedArgv = optimist(aliased)
      .options(opts)
      .argv;
    var propertyArgv = optimist(regular).options(opts).argv;
    var expected = {
        herp: true,
        h: true,
        '_': [ 'derp' ],
        '$0': $0,
    };

    t.same(aliasedArgv, expected);
    t.same(propertyArgv, expected);

    t.end();
});

test('boolean and alias using explicit true', function (t) {
    var aliased = [ '-h', 'true' ];
    var regular = [ '--herp',  'true' ];
    var opts = {
        herp: { alias: 'h', boolean: true }
    };
    var aliasedArgv = optimist(aliased)
        .boolean('h')
        .alias('h', 'herp')
        .argv;
    var propertyArgv = optimist(regular)
        .boolean('h')
        .alias('h', 'herp')
        .argv;
    var expected = {
        herp: true,
        h: true,
        '_': [ ],
        '$0': $0,
    };

    t.same(aliasedArgv, expected);
    t.same(propertyArgv, expected); 
    t.end();
});

// regression, see https://github.com/substack/node-optimist/issues/71
test('boolean and --x=true', function(t) {
    var parsed = optimist(['--boool', '--other=true']).boolean('boool').argv;

    t.same(parsed.boool, true);
    t.same(parsed.other, 'true');

    parsed = optimist(['--boool', '--other=false']).boolean('boool').argv;

    t.same(parsed.boool, true);
    t.same(parsed.other, 'false');
    t.end();
});


================================================================================
--- File: node_modules/optimist/test/whitespace.js ---
================================================================================

var optimist = require('../');
var test = require('tap').test;

test('whitespace should be whitespace' , function (t) {
    t.plan(1);
    var x = optimist.parse([ '-x', '\t' ]).x;
    t.equal(x, '\t');
});


================================================================================
--- File: node_modules/optimist/test/usage.js ---
================================================================================

var Hash = require('hashish');
var optimist = require('../index');
var test = require('tap').test;

test('usageFail', function (t) {
    var r = checkUsage(function () {
        return optimist('-x 10 -z 20'.split(' '))
            .usage('Usage: $0 -x NUM -y NUM')
            .demand(['x','y'])
            .argv;
    });
    t.same(
        r.result,
        { x : 10, z : 20, _ : [], $0 : './usage' }
    );

    t.same(
        r.errors.join('\n').split(/\n+/),
        [
            'Usage: ./usage -x NUM -y NUM',
            'Options:',
            '  -x  [required]',
            '  -y  [required]',
            'Missing required arguments: y',
        ]
    );
    t.same(r.logs, []);
    t.ok(r.exit);
    t.end();
});


test('usagePass', function (t) {
    var r = checkUsage(function () {
        return optimist('-x 10 -y 20'.split(' '))
            .usage('Usage: $0 -x NUM -y NUM')
            .demand(['x','y'])
            .argv;
    });
    t.same(r, {
        result : { x : 10, y : 20, _ : [], $0 : './usage' },
        errors : [],
        logs : [],
        exit : false,
    });
    t.end();
});

test('checkPass', function (t) {
    var r = checkUsage(function () {
        return optimist('-x 10 -y 20'.split(' '))
            .usage('Usage: $0 -x NUM -y NUM')
            .check(function (argv) {
                if (!('x' in argv)) throw 'You forgot about -x';
                if (!('y' in argv)) throw 'You forgot about -y';
            })
            .argv;
    });
    t.same(r, {
        result : { x : 10, y : 20, _ : [], $0 : './usage' },
        errors : [],
        logs : [],
        exit : false,
    });
    t.end();
});

test('checkFail', function (t) {
    var r = checkUsage(function () {
        return optimist('-x 10 -z 20'.split(' '))
            .usage('Usage: $0 -x NUM -y NUM')
            .check(function (argv) {
                if (!('x' in argv)) throw 'You forgot about -x';
                if (!('y' in argv)) throw 'You forgot about -y';
            })
            .argv;
    });

    t.same(
        r.result,
        { x : 10, z : 20, _ : [], $0 : './usage' }
    );

    t.same(
        r.errors.join('\n').split(/\n+/),
        [
            'Usage: ./usage -x NUM -y NUM',
            'You forgot about -y'
        ]
    );

    t.same(r.logs, []);
    t.ok(r.exit);
    t.end();
});

test('checkCondPass', function (t) {
    function checker (argv) {
        return 'x' in argv && 'y' in argv;
    }

    var r = checkUsage(function () {
        return optimist('-x 10 -y 20'.split(' '))
            .usage('Usage: $0 -x NUM -y NUM')
            .check(checker)
            .argv;
    });
    t.same(r, {
        result : { x : 10, y : 20, _ : [], $0 : './usage' },
        errors : [],
        logs : [],
        exit : false,
    });
    t.end();
});

test('checkCondFail', function (t) {
    function checker (argv) {
        return 'x' in argv && 'y' in argv;
    }

    var r = checkUsage(function () {
        return optimist('-x 10 -z 20'.split(' '))
            .usage('Usage: $0 -x NUM -y NUM')
            .check(checker)
            .argv;
    });

    t.same(
        r.result,
        { x : 10, z : 20, _ : [], $0 : './usage' }
    );

    t.same(
        r.errors.join('\n').split(/\n+/).join('\n'),
        'Usage: ./usage -x NUM -y NUM\n'
        + 'Argument check failed: ' + checker.toString()
    );

    t.same(r.logs, []);
    t.ok(r.exit);
    t.end();
});

test('countPass', function (t) {
    var r = checkUsage(function () {
        return optimist('1 2 3 --moo'.split(' '))
            .usage('Usage: $0 [x] [y] [z] {OPTIONS}')
            .demand(3)
            .argv;
    });
    t.same(r, {
        result : { _ : [ '1', '2', '3' ], moo : true, $0 : './usage' },
        errors : [],
        logs : [],
        exit : false,
    });
    t.end();
});

test('countFail', function (t) {
    var r = checkUsage(function () {
        return optimist('1 2 --moo'.split(' '))
            .usage('Usage: $0 [x] [y] [z] {OPTIONS}')
            .demand(3)
            .argv;
    });
    t.same(
        r.result,
        { _ : [ '1', '2' ], moo : true, $0 : './usage' }
    );

    t.same(
        r.errors.join('\n').split(/\n+/),
        [
            'Usage: ./usage [x] [y] [z] {OPTIONS}',
            'Not enough non-option arguments: got 2, need at least 3',
        ]
    );

    t.same(r.logs, []);
    t.ok(r.exit);
    t.end();
});

test('defaultSingles', function (t) {
    var r = checkUsage(function () {
        return optimist('--foo 50 --baz 70 --powsy'.split(' '))
            .default('foo', 5)
            .default('bar', 6)
            .default('baz', 7)
            .argv
        ;
    });
    t.same(r.result, {
        foo : '50',
        bar : 6,
        baz : '70',
        powsy : true,
        _ : [],
        $0 : './usage',
    });
    t.end();
});

test('defaultAliases', function (t) {
    var r = checkUsage(function () {
        return optimist('')
            .alias('f', 'foo')
            .default('f', 5)
            .argv
        ;
    });
    t.same(r.result, {
        f : '5',
        foo : '5',
        _ : [],
        $0 : './usage',
    });
    t.end();
});

test('defaultHash', function (t) {
    var r = checkUsage(function () {
        return optimist('--foo 50 --baz 70'.split(' '))
            .default({ foo : 10, bar : 20, quux : 30 })
            .argv
        ;
    });
    t.same(r.result, {
        _ : [],
        $0 : './usage',
        foo : 50,
        baz : 70,
        bar : 20,
        quux : 30,
    });
    t.end();
});

test('rebase', function (t) {
    t.equal(
        optimist.rebase('/home/substack', '/home/substack/foo/bar/baz'),
        './foo/bar/baz'
    );
    t.equal(
        optimist.rebase('/home/substack/foo/bar/baz', '/home/substack'),
        '../../..'
    );
    t.equal(
        optimist.rebase('/home/substack/foo', '/home/substack/pow/zoom.txt'),
        '../pow/zoom.txt'
    );
    t.end();
});

function checkUsage (f) {

    var exit = false;

    process._exit = process.exit;
    process._env = process.env;
    process._argv = process.argv;

    process.exit = function (t) { exit = true };
    process.env = Hash.merge(process.env, { _ : 'node' });
    process.argv = [ './usage' ];

    var errors = [];
    var logs = [];

    console._error = console.error;
    console.error = function (msg) { errors.push(msg) };
    console._log = console.log;
    console.log = function (msg) { logs.push(msg) };

    var result = f();

    process.exit = process._exit;
    process.env = process._env;
    process.argv = process._argv;

    console.error = console._error;
    console.log = console._log;

    return {
        errors : errors,
        logs : logs,
        exit : exit,
        result : result,
    };
};


================================================================================
--- File: node_modules/optimist/test/_.js ---
================================================================================

var spawn = require('child_process').spawn;
var test = require('tap').test;

test('dotSlashEmpty', testCmd('./bin.js', []));

test('dotSlashArgs', testCmd('./bin.js', [ 'a', 'b', 'c' ]));

test('nodeEmpty', testCmd('node bin.js', []));

test('nodeArgs', testCmd('node bin.js', [ 'x', 'y', 'z' ]));

test('whichNodeEmpty', function (t) {
    var which = spawn('which', ['node']);
    
    which.stdout.on('data', function (buf) {
        t.test(
            testCmd(buf.toString().trim() + ' bin.js', [])
        );
        t.end();
    });
    
    which.stderr.on('data', function (err) {
        assert.error(err);
        t.end();
    });
});

test('whichNodeArgs', function (t) {
    var which = spawn('which', ['node']);

    which.stdout.on('data', function (buf) {
        t.test(
            testCmd(buf.toString().trim() + ' bin.js', [ 'q', 'r' ])
        );
        t.end();
    });
    
    which.stderr.on('data', function (err) {
        t.error(err);
        t.end();
    });
});

function testCmd (cmd, args) {

    return function (t) {
        var to = setTimeout(function () {
            assert.fail('Never got stdout data.')
        }, 5000);
        
        var oldDir = process.cwd();
        process.chdir(__dirname + '/_');
        
        var cmds = cmd.split(' ');
        
        var bin = spawn(cmds[0], cmds.slice(1).concat(args.map(String)));
        process.chdir(oldDir);
        
        bin.stderr.on('data', function (err) {
            t.error(err);
            t.end();
        });
        
        bin.stdout.on('data', function (buf) {
            clearTimeout(to);
            var _ = JSON.parse(buf.toString());
            t.same(_.map(String), args.map(String));
            t.end();
        });
    };
}


================================================================================
--- File: node_modules/optimist/example/bool.js ---
================================================================================

#!/usr/bin/env node
var util = require('util');
var argv = require('optimist').argv;

if (argv.s) {
    util.print(argv.fr ? 'Le chat dit: ' : 'The cat says: ');
}
console.log(
    (argv.fr ? 'miaou' : 'meow') + (argv.p ? '.' : '')
);


================================================================================
--- File: node_modules/optimist/example/line_count_wrap.js ---
================================================================================

#!/usr/bin/env node
var argv = require('optimist')
    .usage('Count the lines in a file.\nUsage: $0')
    .wrap(80)
    .demand('f')
    .alias('f', [ 'file', 'filename' ])
    .describe('f',
        "Load a file. It's pretty important."
        + " Required even. So you'd better specify it."
    )
    .alias('b', 'base')
    .describe('b', 'Numeric base to display the number of lines in')
    .default('b', 10)
    .describe('x', 'Super-secret optional parameter which is secret')
    .default('x', '')
    .argv
;

var fs = require('fs');
var s = fs.createReadStream(argv.file);

var lines = 0;
s.on('data', function (buf) {
    lines += buf.toString().match(/\n/g).length;
});

s.on('end', function () {
    console.log(lines.toString(argv.base));
});


================================================================================
--- File: node_modules/optimist/example/divide.js ---
================================================================================

#!/usr/bin/env node

var argv = require('optimist')
    .usage('Usage: $0 -x [num] -y [num]')
    .demand(['x','y'])
    .argv;

console.log(argv.x / argv.y);


================================================================================
--- File: node_modules/optimist/example/default_singles.js ---
================================================================================

#!/usr/bin/env node
var argv = require('optimist')
    .default('x', 10)
    .default('y', 10)
    .argv
;
console.log(argv.x + argv.y);


================================================================================
--- File: node_modules/optimist/example/boolean_single.js ---
================================================================================

#!/usr/bin/env node
var argv = require('optimist')
    .boolean('v')
    .argv
;
console.dir(argv.v);
console.dir(argv._);


================================================================================
--- File: node_modules/optimist/example/line_count.js ---
================================================================================

#!/usr/bin/env node
var argv = require('optimist')
    .usage('Count the lines in a file.\nUsage: $0')
    .demand('f')
    .alias('f', 'file')
    .describe('f', 'Load a file')
    .argv
;

var fs = require('fs');
var s = fs.createReadStream(argv.file);

var lines = 0;
s.on('data', function (buf) {
    lines += buf.toString().match(/\n/g).length;
});

s.on('end', function () {
    console.log(lines);
});


================================================================================
--- File: node_modules/optimist/example/nonopt.js ---
================================================================================

#!/usr/bin/env node
var argv = require('optimist').argv;
console.log('(%d,%d)', argv.x, argv.y);
console.log(argv._);


================================================================================
--- File: node_modules/optimist/example/short.js ---
================================================================================

#!/usr/bin/env node
var argv = require('optimist').argv;
console.log('(%d,%d)', argv.x, argv.y);


================================================================================
--- File: node_modules/optimist/example/string.js ---
================================================================================

#!/usr/bin/env node
var argv = require('optimist')
    .string('x', 'y')
    .argv
;
console.dir([ argv.x, argv.y ]);

/* Turns off numeric coercion:
    ./node string.js -x 000123 -y 9876
    [ '000123', '9876' ]
*/


================================================================================
--- File: node_modules/optimist/example/usage-options.js ---
================================================================================

var optimist = require('./../index');

var argv = optimist.usage('This is my awesome program', {
  'about': {
    description: 'Provide some details about the author of this program',
    required: true,
    short: 'a',
  },
  'info': {
    description: 'Provide some information about the node.js agains!!!!!!',
    boolean: true,
    short: 'i'
  }
}).argv;

optimist.showHelp();

console.log('\n\nInspecting options');
console.dir(argv);

================================================================================
--- File: node_modules/optimist/example/reflect.js ---
================================================================================

#!/usr/bin/env node
console.dir(require('optimist').argv);


================================================================================
--- File: node_modules/optimist/example/xup.js ---
================================================================================

#!/usr/bin/env node
var argv = require('optimist').argv;

if (argv.rif - 5 * argv.xup > 7.138) {
    console.log('Buy more riffiwobbles');
}
else {
    console.log('Sell the xupptumblers');
}



================================================================================
--- File: node_modules/optimist/example/boolean_double.js ---
================================================================================

#!/usr/bin/env node
var argv = require('optimist')
    .boolean(['x','y','z'])
    .argv
;
console.dir([ argv.x, argv.y, argv.z ]);
console.dir(argv._);


================================================================================
--- File: node_modules/optimist/example/line_count_options.js ---
================================================================================

#!/usr/bin/env node
var argv = require('optimist')
    .usage('Count the lines in a file.\nUsage: $0')
    .options({
        file : {
            demand : true,
            alias : 'f',
            description : 'Load a file'
        },
        base : {
            alias : 'b',
            description : 'Numeric base to use for output',
            default : 10,
        },
    })
    .argv
;

var fs = require('fs');
var s = fs.createReadStream(argv.file);

var lines = 0;
s.on('data', function (buf) {
    lines += buf.toString().match(/\n/g).length;
});

s.on('end', function () {
    console.log(lines.toString(argv.base));
});


================================================================================
--- File: node_modules/optimist/example/default_hash.js ---
================================================================================

#!/usr/bin/env node

var argv = require('optimist')
    .default({ x : 10, y : 10 })
    .argv
;

console.log(argv.x + argv.y);


================================================================================
--- File: node_modules/optimist/test/_/bin.js ---
================================================================================

#!/usr/bin/env node
var argv = require('../../index').argv
console.log(JSON.stringify(argv._));


================================================================================
--- File: node_modules/optimist/test/_/argv.js ---
================================================================================

#!/usr/bin/env node
console.log(JSON.stringify(process.argv));


================================================================================
--- File: node_modules/pip/lib/config.js ---
================================================================================

/**
 * Module dependencies.
 */
var fs = require('fs')
    , noop = function(){}
    , utils = require('./utils')
    , path = require('path')
    , PATH_CONFIG = path.join(__dirname,'../config.json');

exports.path = PATH_CONFIG;

/**
 * Expose constructor.
 */
module.exports = Config;

/**
 * Initialize a new `Config`.
 *
 * @param {Object} conf
 * @api public
 */
function Config() {
    var core_config_exists = true
    , override = false
    , config
    , keys;

    // handle core config
    utils.file_exists(false, PATH_CONFIG, function(success, file, err){
        if (success) config = file;
        else core_config_exists = false;
    });

    // handle override
    utils.file_exists(false, process.env.HOME + '/.freckle', function(success, file, err){
        if (success) {
            config = file;
            override = true;
        } else {
            keys = JSON.parse(fs.readFileSync(PATH_CONFIG, "utf8"));
        }
    });

    // token
    this.token =
        (core_config_exists) ? config.token :
        this.token || "";

    // subdomain
    this.subdomain =
        (core_config_exists) ? config.subdomain :
        this.subdomain || "";

    // user
    this.user =
        (core_config_exists) ? config.user :
        this.subdomain || "";

    this.override_status = (override) ? '\n[ Using override config at ~/.freckle ]' : '\n[ Using default keys config at ' + PATH_CONFIG + ' - to override see Readme ]';
    this.path = PATH_CONFIG;
};

/**
 * Load data.
 *
 * @param {Function} fn
 * @api public
 */
Config.prototype.load = function(fn){
  var self = this
    , fn = fn || noop;
  fs.readFile(PATH_CONFIG, 'utf8', function(err, json){
    if (err) return fn(err);
    var data = JSON.parse(json)
      , keys = Object.keys(data)
      , len = keys.length;
    for (var i = 0; i < len; ++i) {
      self[keys[i]] = data[keys[i]];
    }
    fn();
  });
  return this;
};


================================================================================
--- File: node_modules/pip/lib/cli.js ---
================================================================================

var freckle = require('freckle')
  , fs = require('fs')
  , path = require('path')
  , opt = require('optimist').argv
  , ConfigObj = require('./config')
  , config = new ConfigObj()
  , utils = require('./utils')
  , data
  , project_names = {};

// Add subdomain and token information here. Leaving this blank will keep API
// test account information.
freckle( config.subdomain, config.token );

/**
 * Run Ginger
 *
 * @api private
 */
run_pip = function() {

  // Collect string passed in with params.

  data = opt._;
  data.missing = new Array();

  if (opt._.length === 0) {
      opt._ = null;
  } else {

    // Pick up the command.

    command = opt._[0];

    // Display help if no command provided.

    if (command == null) {
      // @todo: display useage
    }

  }

  if (opt._ !== null) {

    // 'help' command

    if (command == 'help') {

      var help = 'Usage: pip [command] [options]'+
      '\n[Commands]'+
      '\n\tlist\t\tList project associated with your subdomain. This will give you a list of project names and their IDs which you need for logging your entries.'+
      '\n\t\t\t  ex: pip list'+
      '\n\tlog\t\tLog time entries using various options.'+
      '\n\t\t\t  ex: pip log -p 101814 -m \"quick update\" -t 15m'+
      '\n[Options]'+
      '\n\t-h, --help\tDisplay this help page.'+
      '\n\t\t\t  ex: pip -h'+
      '\n\t-t, --time\tTime entry in freckle specified format.'+
      '\n\t\t\t  ex: pip -t 15m'+
      '\n\t\t\t  ex: pip -t 1.5h'+
      '\n\t-p, --project\tThe project ID.'+
      '\n\t\t\t  ex: pip -p 101814'+
      '\n\t-m, --message\tPost a message to yammer'+
      '\n\t\t\t  ex: pip -m "I\'m working on pip"'+
      '\n\t\t\t  ex: pip -m "tag, tag, tag'+
      '\n\t-d, --date\tOptional date formated in YYYY-MM-DD. Defaults to today.'+
      '\n\t\t\t  ex: pip -d 2012-07-20'+
      '\n\t-u, --user\tOptional user to log time for. Defaults to user in config.json.'+
      '\n\t\t\t  ex: pip -u apitest@letsfreckle.com';
      console.log( help );
    }

    // 'list' command

    if (command == 'list') {
      freckle.projects.list(function( err, projects ) {
        if (err) {
          console.log(err);
        }
        for (var i = projects.length - 1; i >= 0; i--) {
          project_names[projects[i].project.id] = projects[i].project.name;
        }
        var json = JSON.stringify(project_names);
        fs.writeFileSync(config.subdomain + '-projects.json', json);
        console.log('Projects saved to ' + path.join(__dirname, config.subdomain + '-projects.json'));
      });
    }

    // 'log' command

    if (command == 'log') {

      opt.project = opt.project || opt.p;
      opt.message = opt.message || opt.m;
      opt.time = opt.time || opt.t;
      opt.date = opt.date || opt.d;
      opt.user = opt.user || opt.u;

      // --project | -p

      if (opt.project == null) {
        data.missing.push('project');
      } else {

        var intRegex = /^\d+$/
          , projects
          , keys
          , len;

        // Check to see if the project is NOT an integer (text).
        if (!intRegex.test(opt.project)) {

          var projects_path = config.subdomain + '-projects.json';

          utils.file_exists(false, projects_path, function(success, file, err){
              if (success) {

                projects = JSON.parse(fs.readFileSync(projects_path, "utf8"));
                keys = Object.keys(projects);
                len = keys.length;

                // Search for project.
                for (var i = 0; i < len; ++i) {
                  if (projects[keys[i]] == opt.project) {
                    opt.project = keys[i];
                  }
                }

                if (intRegex.test(opt.project)) {
                  console.log('Found project id: ' + opt.project);
                }
                else {
                  console.log('Could not find project: ' + opt.project + '. Please do a listing to get the exact name or id (pip list).');
                  data.missing.push('project');
                }
              } else {
                // msg that listing needs generated
              }
          });

        } else {
          // @todo: we should probably validate the id as well before we send it along
        }

      }

      // --message | -m

      if (opt.message == null) {
        data.missing.push('message');
      }

      // --time | -t

      if (opt.time == null) {
        data.missing.push('time');
      } else {
        // @todo: validate format. must be int w/m or h suffix
      }

      // --date | -d

      if (opt.date == null) {
        var current = new Date();
        opt.date = freckle.date(current);
      } else {
        // @todo: validate format if date is given
      }

      // --user | -u

      if (opt.user == null) {

        // Load user from config.
        if (config.user !== null) {
          opt.user = config.user;
        }
        else {
          data.missing.push('user');
        }

      }

      if (data.missing.length == 0) {

        // If we have all of the params then create an entry

        freckle.entries.add({
          'entry': {
            'minutes': opt.time
          , 'user': opt.user
          , 'project_id': opt.project
          , 'description': opt.message
          , 'date': opt.date
          }
        }, function( err, data ) {
          console.log( err, data );
        });

        console.log("Logged " + opt.time + " for " + opt.project);
      } else {
        console.log("missing " + data.missing);
      }
    }
  }

};
run_pip();


================================================================================
--- File: node_modules/pip/lib/utils.js ---
================================================================================

/**
 * Static class dependencies.
 */

var fs = require('fs')
  , colors = require('colors')
  , noop = function(){}


/**
 * Static function - File exists.
 *
 * @param {String} path
 * @api public
 */
exports.file_exists = function(verbose, path, callback){
    if(verbose)console.log('\nConfig Path: '.bold+ path);
    //this needs to be replaced with path.exists
    try {
        fs.realpathSync(path);
        callback(true, JSON.parse(fs.readFileSync(path,"utf8")), null);
    }catch(e){
        callback(false,null,e);
    }
}
/**
 * Static function - Display Errors
 *
 * @param {Object} error
 * @api public
 */
exports.display_error = function(error){
	console.log('\nError:\n'.bold)
	console.log(error.data.red)
	console.log('Check:\n'.bold)
	console.log('~/.nyam_keys (make sure this file is properly formatted)'.green)
	console.log('\n')
}
/**
 * Static function - Display Errors
 *
 * @param {Object} error
 * @api public
 */
exports.display_json = function(what,json){
	console.log('\n'+what.bold+':\n'.bold)
	console.log(json)
}
/**
 * Static function - Is NULL BITCH! :D
 *
 * @param {String} data
 * @param {String} message
 * @api public
 */
exports.isnull = function(data, message, callback){
  if(data.length==null){
    console.log(message);
    callback(true);
  }else{
    callback(false);
  }
}


================================================================================
--- File: node_modules/minimist/test/num.js ---
================================================================================

var parse = require('../');
var test = require('tape');

test('nums', function (t) {
    var argv = parse([
        '-x', '1234',
        '-y', '5.67',
        '-z', '1e7',
        '-w', '10f',
        '--hex', '0xdeadbeef',
        '789'
    ]);
    t.deepEqual(argv, {
        x : 1234,
        y : 5.67,
        z : 1e7,
        w : '10f',
        hex : 0xdeadbeef,
        _ : [ 789 ]
    });
    t.deepEqual(typeof argv.x, 'number');
    t.deepEqual(typeof argv.y, 'number');
    t.deepEqual(typeof argv.z, 'number');
    t.deepEqual(typeof argv.w, 'string');
    t.deepEqual(typeof argv.hex, 'number');
    t.deepEqual(typeof argv._[0], 'number');
    t.end();
});

test('already a number', function (t) {
    var argv = parse([ '-x', 1234, 789 ]);
    t.deepEqual(argv, { x : 1234, _ : [ 789 ] });
    t.deepEqual(typeof argv.x, 'number');
    t.deepEqual(typeof argv._[0], 'number');
    t.end();
});


================================================================================
--- File: node_modules/minimist/test/bool.js ---
================================================================================

var parse = require('../');
var test = require('tape');

test('flag boolean default false', function (t) {
    var argv = parse(['moo'], {
        boolean: ['t', 'verbose'],
        default: { verbose: false, t: false }
    });
    
    t.deepEqual(argv, {
        verbose: false,
        t: false,
        _: ['moo']
    });
    
    t.deepEqual(typeof argv.verbose, 'boolean');
    t.deepEqual(typeof argv.t, 'boolean');
    t.end();

});

test('boolean groups', function (t) {
    var argv = parse([ '-x', '-z', 'one', 'two', 'three' ], {
        boolean: ['x','y','z']
    });
    
    t.deepEqual(argv, {
        x : true,
        y : false,
        z : true,
        _ : [ 'one', 'two', 'three' ]
    });
    
    t.deepEqual(typeof argv.x, 'boolean');
    t.deepEqual(typeof argv.y, 'boolean');
    t.deepEqual(typeof argv.z, 'boolean');
    t.end();
});
test('boolean and alias with chainable api', function (t) {
    var aliased = [ '-h', 'derp' ];
    var regular = [ '--herp',  'derp' ];
    var opts = {
        herp: { alias: 'h', boolean: true }
    };
    var aliasedArgv = parse(aliased, {
        boolean: 'herp',
        alias: { h: 'herp' }
    });
    var propertyArgv = parse(regular, {
        boolean: 'herp',
        alias: { h: 'herp' }
    });
    var expected = {
        herp: true,
        h: true,
        '_': [ 'derp' ]
    };
    
    t.same(aliasedArgv, expected);
    t.same(propertyArgv, expected); 
    t.end();
});

test('boolean and alias with options hash', function (t) {
    var aliased = [ '-h', 'derp' ];
    var regular = [ '--herp', 'derp' ];
    var opts = {
        alias: { 'h': 'herp' },
        boolean: 'herp'
    };
    var aliasedArgv = parse(aliased, opts);
    var propertyArgv = parse(regular, opts);
    var expected = {
        herp: true,
        h: true,
        '_': [ 'derp' ]
    };
    t.same(aliasedArgv, expected);
    t.same(propertyArgv, expected);
    t.end();
});

test('boolean and alias using explicit true', function (t) {
    var aliased = [ '-h', 'true' ];
    var regular = [ '--herp',  'true' ];
    var opts = {
        alias: { h: 'herp' },
        boolean: 'h'
    };
    var aliasedArgv = parse(aliased, opts);
    var propertyArgv = parse(regular, opts);
    var expected = {
        herp: true,
        h: true,
        '_': [ ]
    };

    t.same(aliasedArgv, expected);
    t.same(propertyArgv, expected); 
    t.end();
});

// regression, see https://github.com/substack/node-optimist/issues/71
test('boolean and --x=true', function(t) {
    var parsed = parse(['--boool', '--other=true'], {
        boolean: 'boool'
    });

    t.same(parsed.boool, true);
    t.same(parsed.other, 'true');

    parsed = parse(['--boool', '--other=false'], {
        boolean: 'boool'
    });
    
    t.same(parsed.boool, true);
    t.same(parsed.other, 'false');
    t.end();
});


================================================================================
--- File: node_modules/minimist/test/dash.js ---
================================================================================

var parse = require('../');
var test = require('tape');

test('-', function (t) {
    t.plan(5);
    t.deepEqual(parse([ '-n', '-' ]), { n: '-', _: [] });
    t.deepEqual(parse([ '-' ]), { _: [ '-' ] });
    t.deepEqual(parse([ '-f-' ]), { f: '-', _: [] });
    t.deepEqual(
        parse([ '-b', '-' ], { boolean: 'b' }),
        { b: true, _: [ '-' ] }
    );
    t.deepEqual(
        parse([ '-s', '-' ], { string: 's' }),
        { s: '-', _: [] }
    );
});

test('-a -- b', function (t) {
    t.plan(3);
    t.deepEqual(parse([ '-a', '--', 'b' ]), { a: true, _: [ 'b' ] });
    t.deepEqual(parse([ '--a', '--', 'b' ]), { a: true, _: [ 'b' ] });
    t.deepEqual(parse([ '--a', '--', 'b' ]), { a: true, _: [ 'b' ] });
});


================================================================================
--- File: node_modules/minimist/test/default_bool.js ---
================================================================================

var test = require('tape');
var parse = require('../');

test('boolean default true', function (t) {
    var argv = parse([], {
        boolean: 'sometrue',
        default: { sometrue: true }
    });
    t.equal(argv.sometrue, true);
    t.end();
});

test('boolean default false', function (t) {
    var argv = parse([], {
        boolean: 'somefalse',
        default: { somefalse: false }
    });
    t.equal(argv.somefalse, false);
    t.end();
});


================================================================================
--- File: node_modules/minimist/test/parse_modified.js ---
================================================================================

var parse = require('../');
var test = require('tape');

test('parse with modifier functions' , function (t) {
    t.plan(1);
    
    var argv = parse([ '-b', '123' ], { boolean: 'b' });
    t.deepEqual(argv, { b: true, _: ['123'] });
});


================================================================================
--- File: node_modules/minimist/test/short.js ---
================================================================================

var parse = require('../');
var test = require('tape');

test('numeric short args', function (t) {
    t.plan(2);
    t.deepEqual(parse([ '-n123' ]), { n: 123, _: [] });
    t.deepEqual(
        parse([ '-123', '456' ]),
        { 1: true, 2: true, 3: 456, _: [] }
    );
});

test('short', function (t) {
    t.deepEqual(
        parse([ '-b' ]),
        { b : true, _ : [] },
        'short boolean'
    );
    t.deepEqual(
        parse([ 'foo', 'bar', 'baz' ]),
        { _ : [ 'foo', 'bar', 'baz' ] },
        'bare'
    );
    t.deepEqual(
        parse([ '-cats' ]),
        { c : true, a : true, t : true, s : true, _ : [] },
        'group'
    );
    t.deepEqual(
        parse([ '-cats', 'meow' ]),
        { c : true, a : true, t : true, s : 'meow', _ : [] },
        'short group next'
    );
    t.deepEqual(
        parse([ '-h', 'localhost' ]),
        { h : 'localhost', _ : [] },
        'short capture'
    );
    t.deepEqual(
        parse([ '-h', 'localhost', '-p', '555' ]),
        { h : 'localhost', p : 555, _ : [] },
        'short captures'
    );
    t.end();
});
 
test('mixed short bool and capture', function (t) {
    t.same(
        parse([ '-h', 'localhost', '-fp', '555', 'script.js' ]),
        {
            f : true, p : 555, h : 'localhost',
            _ : [ 'script.js' ]
        }
    );
    t.end();
});
 
test('short and long', function (t) {
    t.deepEqual(
        parse([ '-h', 'localhost', '-fp', '555', 'script.js' ]),
        {
            f : true, p : 555, h : 'localhost',
            _ : [ 'script.js' ]
        }
    );
    t.end();
});


================================================================================
--- File: node_modules/minimist/test/long.js ---
================================================================================

var test = require('tape');
var parse = require('../');

test('long opts', function (t) {
    t.deepEqual(
        parse([ '--bool' ]),
        { bool : true, _ : [] },
        'long boolean'
    );
    t.deepEqual(
        parse([ '--pow', 'xixxle' ]),
        { pow : 'xixxle', _ : [] },
        'long capture sp'
    );
    t.deepEqual(
        parse([ '--pow=xixxle' ]),
        { pow : 'xixxle', _ : [] },
        'long capture eq'
    );
    t.deepEqual(
        parse([ '--host', 'localhost', '--port', '555' ]),
        { host : 'localhost', port : 555, _ : [] },
        'long captures sp'
    );
    t.deepEqual(
        parse([ '--host=localhost', '--port=555' ]),
        { host : 'localhost', port : 555, _ : [] },
        'long captures eq'
    );
    t.end();
});


================================================================================
--- File: node_modules/minimist/test/parse.js ---
================================================================================

var parse = require('../');
var test = require('tape');

test('parse args', function (t) {
    t.deepEqual(
        parse([ '--no-moo' ]),
        { moo : false, _ : [] },
        'no'
    );
    t.deepEqual(
        parse([ '-v', 'a', '-v', 'b', '-v', 'c' ]),
        { v : ['a','b','c'], _ : [] },
        'multi'
    );
    t.end();
});
 
test('comprehensive', function (t) {
    t.deepEqual(
        parse([
            '--name=meowmers', 'bare', '-cats', 'woo',
            '-h', 'awesome', '--multi=quux',
            '--key', 'value',
            '-b', '--bool', '--no-meep', '--multi=baz',
            '--', '--not-a-flag', 'eek'
        ]),
        {
            c : true,
            a : true,
            t : true,
            s : 'woo',
            h : 'awesome',
            b : true,
            bool : true,
            key : 'value',
            multi : [ 'quux', 'baz' ],
            meep : false,
            name : 'meowmers',
            _ : [ 'bare', '--not-a-flag', 'eek' ]
        }
    );
    t.end();
});

test('flag boolean', function (t) {
    var argv = parse([ '-t', 'moo' ], { boolean: 't' });
    t.deepEqual(argv, { t : true, _ : [ 'moo' ] });
    t.deepEqual(typeof argv.t, 'boolean');
    t.end();
});

test('flag boolean value', function (t) {
    var argv = parse(['--verbose', 'false', 'moo', '-t', 'true'], {
        boolean: [ 't', 'verbose' ],
        default: { verbose: true }
    });
    
    t.deepEqual(argv, {
        verbose: false,
        t: true,
        _: ['moo']
    });
    
    t.deepEqual(typeof argv.verbose, 'boolean');
    t.deepEqual(typeof argv.t, 'boolean');
    t.end();
});

test('newlines in params' , function (t) {
    var args = parse([ '-s', "X\nX" ])
    t.deepEqual(args, { _ : [], s : "X\nX" });
    
    // reproduce in bash:
    // VALUE="new
    // line"
    // node program.js --s="$VALUE"
    args = parse([ "--s=X\nX" ])
    t.deepEqual(args, { _ : [], s : "X\nX" });
    t.end();
});

test('strings' , function (t) {
    var s = parse([ '-s', '0001234' ], { string: 's' }).s;
    t.equal(s, '0001234');
    t.equal(typeof s, 'string');
    
    var x = parse([ '-x', '56' ], { string: 'x' }).x;
    t.equal(x, '56');
    t.equal(typeof x, 'string');
    t.end();
});

test('stringArgs', function (t) {
    var s = parse([ '  ', '  ' ], { string: '_' })._;
    t.same(s.length, 2);
    t.same(typeof s[0], 'string');
    t.same(s[0], '  ');
    t.same(typeof s[1], 'string');
    t.same(s[1], '  ');
    t.end();
});

test('empty strings', function(t) {
    var s = parse([ '-s' ], { string: 's' }).s;
    t.equal(s, '');
    t.equal(typeof s, 'string');

    var str = parse([ '--str' ], { string: 'str' }).str;
    t.equal(str, '');
    t.equal(typeof str, 'string');

    var letters = parse([ '-art' ], {
        string: [ 'a', 't' ]
    });

    t.equal(letters.a, '');
    t.equal(letters.r, true);
    t.equal(letters.t, '');

    t.end();
});


test('string and alias', function(t) {
    var x = parse([ '--str',  '000123' ], {
        string: 's',
        alias: { s: 'str' }
    });

    t.equal(x.str, '000123');
    t.equal(typeof x.str, 'string');
    t.equal(x.s, '000123');
    t.equal(typeof x.s, 'string');

    var y = parse([ '-s',  '000123' ], {
        string: 'str',
        alias: { str: 's' }
    });

    t.equal(y.str, '000123');
    t.equal(typeof y.str, 'string');
    t.equal(y.s, '000123');
    t.equal(typeof y.s, 'string');
    t.end();
});

test('slashBreak', function (t) {
    t.same(
        parse([ '-I/foo/bar/baz' ]),
        { I : '/foo/bar/baz', _ : [] }
    );
    t.same(
        parse([ '-xyz/foo/bar/baz' ]),
        { x : true, y : true, z : '/foo/bar/baz', _ : [] }
    );
    t.end();
});

test('alias', function (t) {
    var argv = parse([ '-f', '11', '--zoom', '55' ], {
        alias: { z: 'zoom' }
    });
    t.equal(argv.zoom, 55);
    t.equal(argv.z, argv.zoom);
    t.equal(argv.f, 11);
    t.end();
});

test('multiAlias', function (t) {
    var argv = parse([ '-f', '11', '--zoom', '55' ], {
        alias: { z: [ 'zm', 'zoom' ] }
    });
    t.equal(argv.zoom, 55);
    t.equal(argv.z, argv.zoom);
    t.equal(argv.z, argv.zm);
    t.equal(argv.f, 11);
    t.end();
});

test('nested dotted objects', function (t) {
    var argv = parse([
        '--foo.bar', '3', '--foo.baz', '4',
        '--foo.quux.quibble', '5', '--foo.quux.o_O',
        '--beep.boop'
    ]);
    
    t.same(argv.foo, {
        bar : 3,
        baz : 4,
        quux : {
            quibble : 5,
            o_O : true
        }
    });
    t.same(argv.beep, { boop : true });
    t.end();
});


================================================================================
--- File: node_modules/minimist/test/whitespace.js ---
================================================================================

var parse = require('../');
var test = require('tape');

test('whitespace should be whitespace' , function (t) {
    t.plan(1);
    var x = parse([ '-x', '\t' ]).x;
    t.equal(x, '\t');
});


================================================================================
--- File: node_modules/minimist/test/dotted.js ---
================================================================================

var parse = require('../');
var test = require('tape');

test('dotted alias', function (t) {
    var argv = parse(['--a.b', '22'], {default: {'a.b': 11}, alias: {'a.b': 'aa.bb'}});
    t.equal(argv.a.b, 22);
    t.equal(argv.aa.bb, 22);
    t.end();
});

test('dotted default', function (t) {
    var argv = parse('', {default: {'a.b': 11}, alias: {'a.b': 'aa.bb'}});
    t.equal(argv.a.b, 11);
    t.equal(argv.aa.bb, 11);
    t.end();
});

test('dotted default with no alias', function (t) {
    var argv = parse('', {default: {'a.b': 11}});
    t.equal(argv.a.b, 11);
    t.end();
});


================================================================================
--- File: node_modules/minimist/example/parse.js ---
================================================================================

var argv = require('../')(process.argv.slice(2));
console.dir(argv);


================================================================================
--- File: node_modules/freckle/example/users.js ---
================================================================================

var freckle = require( "../" );

// Add subdomain and token information here
// leaving this blank will keep API test account information
freckle( "<your subdomain here>", "<your token here>" );

freckle.users.list(function( err, users ) {
  console.log( users );
});

freckle.users.show(<id>, function( err, user ) {
  console.log( user );
});

freckle.tags.list(function( err, tags ) {
  console.log( tags );
});

freckle.users.token({ auth: [ "<email address>", "<password>" ] }, function( err, token ) {
  console.log( token );
});

freckle.entries.add({
  'entry': {
    'minutes': "<time>"
  , 'user': "<email address>"
  , 'project_id': <project id>
  , 'description': '<tag>'
  , 'date': freckle.date( <date object> )
  }
}, function( err, data ) {
  console.log( err, data );
});

freckle.projects.list(function( err, projects ) {
  console.log( projects );
});


================================================================================
--- File: node_modules/freckle/lib/index.js ---
================================================================================

var https = require("https");

module.exports = function() {
    function self(subdomain, token) {
        self.settings.subdomain = subdomain;
        self.settings.token = token;

        return self;
    }

    self.date = function(obj) {
        var year = obj.getFullYear(),
            month = obj.getMonth() + 1,
            day = obj.getDate()

            month = month < 10 ? '0' + month : month.toString()
            day = day < 10 ? '0' + day : day.toString()

            return [year, month, day].join('-');
    };

    self.settings = {
        host: "nokotime.com",
        path: "/api/",
        subdomain: "apitest",
        port: 443,
        token: "lx3gi6pxdjtjn57afp8c2bv1me7g89j",
        authHeader: "X-FreckleToken"
    };

    var paramExp = /(:\b\w*\b)/gi;

    function api() {
        var args = Array.prototype.slice.call(arguments),
            conf = args.shift(),
            path = conf.path,
            method = conf.method || "GET",
            data = {};

        function action() {
            var args = Array.prototype.slice.call(arguments);

            if (!paramExp.test(path)) {
                if (typeof args[0] == "object") {
                    data = args.shift();
                }

                return action.request.apply(self, args);
            }

            path.match(paramExp).forEach(function(match) {
                if (typeof match == "function") {
                    throw new Error("Incorrect argument type");
                }

                if (typeof match == "object") {
                    data = match;
                    return;
                }

                path = path.replace(match, args.shift());
            });

            return action.request.apply(self, args);
        }

        action.request = function(cb) {
            if (!cb) {
                return;
            }

            var args = Array.prototype.slice.call(arguments);

            var options = {
                host: this.settings.subdomain + '.' + this.settings.host,
                port: this.settings.port,
                path: this.settings.path + path,
                method: method,
                headers: {}
            }, postdata = '';

            options.headers[this.settings.authHeader] = this.settings.token;

            if (data.auth) {
                options.headers["Authorization"] = "Basic " + new Buffer(
                    data.auth[0] + ':' + data.auth[1]).toString("base64");

                delete data.auth;
            }

            if (Object.keys(data).length) {
                postdata = JSON.stringify(data) + '\r\n';
                options.headers["Content-Type"] = "application/json";
                options.headers["Content-Length"] = postdata.length;
            }

            // Hold data for pagination?
            var tmp = [];

            // wrap http call for automatic pagination
            var paginated_http_call = function(options, tmp) {

                var req = https.request(options, function(res) {
                    var ret = '';

                    res.on("data", function(chunk) {
                        ret += chunk;
                    });

                    res.on("end", function() {
                        if (res.statusCode === 401 || res.statusCode === 422) {
                            cb(res);
                        }

                        // parse the chunks, json decode, and append results to tmp
                        if (ret.length > 1) {
                            tmp = tmp.concat(JSON.parse(ret));
                        }

                        // If there is a next
                        if (res.headers.link) {

                            // Get the next link out of the header
                            var next_link = res.headers.link;
                            next_link = next_link.substring(next_link.indexOf(options.host) + options.host.length);
                            next_link = next_link.substring(0, next_link.indexOf(">"));
                            // clone the options array and change the path
                            var opt = JSON.parse(JSON.stringify(options));
                            opt.path = next_link;

                            // recursively call this function to add to tmp
                            paginated_http_call(opt, tmp);

                        } else {
                            cb(0, tmp.length > 1 ? tmp : '');
                        }
                    });

                }).on('error', function(e) {
                    cb(e.message);
                });

                postdata && req.write(postdata);

                req.end();
            }

            // Call the recursive http function
            paginated_http_call(options, tmp);
        };

        return action;
    }

    self.entries = {
        list: api({
            path: "entries.json"
        }),
        // Add search API
        search: api({
            path: "entries.json"
        }),
        add: api({
            path: "entries.json",
            method: "POST"
        }),
        import: api({
            path: "entries/import.json"
        })
    };

    self.projects = {
        list: api({
            path: "projects.json"
        }),
        add: api({
            path: "projects.json",
            method: "POST"
        })
    };

    self.tags = {
        list: api({
            path: "tags.json"
        })
    };

    self.users = {
        list: api({
            path: "users.json"
        }),
        show: api({
            path: "users/:id.json"
        }),
        token: api({
            path: "user/api_auth_token.json"
        }),
        add: api({
            path: "users.json",
            method: "POST"
        }),
        update: api({
            path: "users/:id.json",
            method: "PUT"
        }),
        remove: api({
            path: "users/:id.json",
            method: "DELETE"
        })
    };

    return self;
}();

================================================================================
--- File: node_modules/python/test/python.test.js ---
================================================================================

var assert = require('assert');
var python = require('../lib/python').shell;

var runTests = function() {
   // Run a couple commands in series
   python('print "Hello World!"', function(err, data) {
      assert.equal('Hello World!\n', data);
      console.log('test 1 ok!');
      python('print "Goodbye, Cruel World!"', function (err, data) {
        assert.equal('Goodbye, Cruel World!\n', data);
        console.log('test 2 ok!');
        python('quit()');
      });
   });
   // Run one in parallel with the first two
   python('print "Asynch"', function (err, data) {
     assert.equal('Asynch\n', data);
     console.log('test 3 ok!');
   });
};

runTests();


================================================================================
--- File: node_modules/python/example/app.js ---
================================================================================

#!/usr/bin/env node
var python = require('../lib/python').shell;
var mycallback = function(err, data) {
   if (err) {
     console.error(err);
   } else {
     process.stdout.write(data + '\n>>> ');
   }
};
process.stdout.write('Using Python from NodeJS\n>>> ');
process.stdin.resume();
process.stdin.setEncoding('utf8');
process.stdin.on('data', function (chunk) {
   python(chunk, mycallback);
});

process.stdin.on('end', function() {
   python('quit()');
});


================================================================================
--- File: node_modules/python/lib/python.js ---
================================================================================

var util     =   require('util');
var spawn    =   require('child_process').spawn;
var child    =   spawn('python',['-u','-i']);
var cmdQueue =   new Array();


child.stdout.on('data', handleStdout);
child.stderr.on('data', handleStderr);
child.on('exit', handleExit);


function handleStdout(data) {
  var datastr = data.toString('utf8');
  var finished = false;
  if (datastr.match(/Command Start\n/)) {
    datastr = datastr.replace(/Command Start\n/,'');
  } 
  if (datastr.match(/Command End\n/)) {
    datastr = datastr.replace(/Command End\n/,'');
    finished = true;
  }
  if (cmdQueue.length > 0) {
    cmdQueue[0].data+=datastr;
  } 
  if (finished) {
    cmd = cmdQueue.shift();
    if (cmd && cmd.command) {
      if (undefined != typeof cmd.callback) {
        cmd.callback(null, cmd.data);
        processQueue();
      }
    }
  } 
};


function handleStderr(data) {
  processQueue();
};

function processQueue() {
  if (cmdQueue.length > 0 && cmdQueue[0].state === 'pending') {
    cmdQueue[0].state = 'processing';
    child.stdin.write(cmdQueue[0].command, encoding='utf8');
  }
};


function handleExit(code) {
  console.log('child process exited with code ' + code);
  process.exit();
};


this.shell = function (command, callback) {
  command = 'print "Command Start"; ' + command + '\nprint "Command End"';
  if (command.charAt[command.length-1]!='\n') command += '\n';
  cmdQueue.push({'command':command, 'callback':callback, 'data': '', state: 'pending'});
  processQueue();
};


================================================================================
--- File: node_modules/wordwrap/test/idleness.txt ---
================================================================================

In Praise of Idleness

By Bertrand Russell

[1932]

Like most of my generation, I was brought up on the saying: 'Satan finds some mischief for idle hands to do.' Being a highly virtuous child, I believed all that I was told, and acquired a conscience which has kept me working hard down to the present moment. But although my conscience has controlled my actions, my opinions have undergone a revolution. I think that there is far too much work done in the world, that immense harm is caused by the belief that work is virtuous, and that what needs to be preached in modern industrial countries is quite different from what always has been preached. Everyone knows the story of the traveler in Naples who saw twelve beggars lying in the sun (it was before the days of Mussolini), and offered a lira to the laziest of them. Eleven of them jumped up to claim it, so he gave it to the twelfth. this traveler was on the right lines. But in countries which do not enjoy Mediterranean sunshine idleness is more difficult, and a great public propaganda will be required to inaugurate it. I hope that, after reading the following pages, the leaders of the YMCA will start a campaign to induce good young men to do nothing. If so, I shall not have lived in vain.

Before advancing my own arguments for laziness, I must dispose of one which I cannot accept. Whenever a person who already has enough to live on proposes to engage in some everyday kind of job, such as school-teaching or typing, he or she is told that such conduct takes the bread out of other people's mouths, and is therefore wicked. If this argument were valid, it would only be necessary for us all to be idle in order that we should all have our mouths full of bread. What people who say such things forget is that what a man earns he usually spends, and in spending he gives employment. As long as a man spends his income, he puts just as much bread into people's mouths in spending as he takes out of other people's mouths in earning. The real villain, from this point of view, is the man who saves. If he merely puts his savings in a stocking, like the proverbial French peasant, it is obvious that they do not give employment. If he invests his savings, the matter is less obvious, and different cases arise.

One of the commonest things to do with savings is to lend them to some Government. In view of the fact that the bulk of the public expenditure of most civilized Governments consists in payment for past wars or preparation for future wars, the man who lends his money to a Government is in the same position as the bad men in Shakespeare who hire murderers. The net result of the man's economical habits is to increase the armed forces of the State to which he lends his savings. Obviously it would be better if he spent the money, even if he spent it in drink or gambling.

But, I shall be told, the case is quite different when savings are invested in industrial enterprises. When such enterprises succeed, and produce something useful, this may be conceded. In these days, however, no one will deny that most enterprises fail. That means that a large amount of human labor, which might have been devoted to producing something that could be enjoyed, was expended on producing machines which, when produced, lay idle and did no good to anyone. The man who invests his savings in a concern that goes bankrupt is therefore injuring others as well as himself. If he spent his money, say, in giving parties for his friends, they (we may hope) would get pleasure, and so would all those upon whom he spent money, such as the butcher, the baker, and the bootlegger. But if he spends it (let us say) upon laying down rails for surface card in some place where surface cars turn out not to be wanted, he has diverted a mass of labor into channels where it gives pleasure to no one. Nevertheless, when he becomes poor through failure of his investment he will be regarded as a victim of undeserved misfortune, whereas the gay spendthrift, who has spent his money philanthropically, will be despised as a fool and a frivolous person.

All this is only preliminary. I want to say, in all seriousness, that a great deal of harm is being done in the modern world by belief in the virtuousness of work, and that the road to happiness and prosperity lies in an organized diminution of work.

First of all: what is work? Work is of two kinds: first, altering the position of matter at or near the earth's surface relatively to other such matter; second, telling other people to do so. The first kind is unpleasant and ill paid; the second is pleasant and highly paid. The second kind is capable of indefinite extension: there are not only those who give orders, but those who give advice as to what orders should be given. Usually two opposite kinds of advice are given simultaneously by two organized bodies of men; this is called politics. The skill required for this kind of work is not knowledge of the subjects as to which advice is given, but knowledge of the art of persuasive speaking and writing, i.e. of advertising.

Throughout Europe, though not in America, there is a third class of men, more respected than either of the classes of workers. There are men who, through ownership of land, are able to make others pay for the privilege of being allowed to exist and to work. These landowners are idle, and I might therefore be expected to praise them. Unfortunately, their idleness is only rendered possible by the industry of others; indeed their desire for comfortable idleness is historically the source of the whole gospel of work. The last thing they have ever wished is that others should follow their example.

From the beginning of civilization until the Industrial Revolution, a man could, as a rule, produce by hard work little more than was required for the subsistence of himself and his family, although his wife worked at least as hard as he did, and his children added their labor as soon as they were old enough to do so. The small surplus above bare necessaries was not left to those who produced it, but was appropriated by warriors and priests. In times of famine there was no surplus; the warriors and priests, however, still secured as much as at other times, with the result that many of the workers died of hunger. This system persisted in Russia until 1917 [1], and still persists in the East; in England, in spite of the Industrial Revolution, it remained in full force throughout the Napoleonic wars, and until a hundred years ago, when the new class of manufacturers acquired power. In America, the system came to an end with the Revolution, except in the South, where it persisted until the Civil War. A system which lasted so long and ended so recently has naturally left a profound impress upon men's thoughts and opinions. Much that we take for granted about the desirability of work is derived from this system, and, being pre-industrial, is not adapted to the modern world. Modern technique has made it possible for leisure, within limits, to be not the prerogative of small privileged classes, but a right evenly distributed throughout the community. The morality of work is the morality of slaves, and the modern world has no need of slavery.

It is obvious that, in primitive communities, peasants, left to themselves, would not have parted with the slender surplus upon which the warriors and priests subsisted, but would have either produced less or consumed more. At first, sheer force compelled them to produce and part with the surplus. Gradually, however, it was found possible to induce many of them to accept an ethic according to which it was their duty to work hard, although part of their work went to support others in idleness. By this means the amount of compulsion required was lessened, and the expenses of government were diminished. To this day, 99 per cent of British wage-earners would be genuinely shocked if it were proposed that the King should not have a larger income than a working man. The conception of duty, speaking historically, has been a means used by the holders of power to induce others to live for the interests of their masters rather than for their own. Of course the holders of power conceal this fact from themselves by managing to believe that their interests are identical with the larger interests of humanity. Sometimes this is true; Athenian slave-owners, for instance, employed part of their leisure in making a permanent contribution to civilization which would have been impossible under a just economic system. Leisure is essential to civilization, and in former times leisure for the few was only rendered possible by the labors of the many. But their labors were valuable, not because work is good, but because leisure is good. And with modern technique it would be possible to distribute leisure justly without injury to civilization.

Modern technique has made it possible to diminish enormously the amount of labor required to secure the necessaries of life for everyone. This was made obvious during the war. At that time all the men in the armed forces, and all the men and women engaged in the production of munitions, all the men and women engaged in spying, war propaganda, or Government offices connected with the war, were withdrawn from productive occupations. In spite of this, the general level of well-being among unskilled wage-earners on the side of the Allies was higher than before or since. The significance of this fact was concealed by finance: borrowing made it appear as if the future was nourishing the present. But that, of course, would have been impossible; a man cannot eat a loaf of bread that does not yet exist. The war showed conclusively that, by the scientific organization of production, it is possible to keep modern populations in fair comfort on a small part of the working capacity of the modern world. If, at the end of the war, the scientific organization, which had been created in order to liberate men for fighting and munition work, had been preserved, and the hours of the week had been cut down to four, all would have been well. Instead of that the old chaos was restored, those whose work was demanded were made to work long hours, and the rest were left to starve as unemployed. Why? Because work is a duty, and a man should not receive wages in proportion to what he has produced, but in proportion to his virtue as exemplified by his industry.

This is the morality of the Slave State, applied in circumstances totally unlike those in which it arose. No wonder the result has been disastrous. Let us take an illustration. Suppose that, at a given moment, a certain number of people are engaged in the manufacture of pins. They make as many pins as the world needs, working (say) eight hours a day. Someone makes an invention by which the same number of men can make twice as many pins: pins are already so cheap that hardly any more will be bought at a lower price. In a sensible world, everybody concerned in the manufacturing of pins would take to working four hours instead of eight, and everything else would go on as before. But in the actual world this would be thought demoralizing. The men still work eight hours, there are too many pins, some employers go bankrupt, and half the men previously concerned in making pins are thrown out of work. There is, in the end, just as much leisure as on the other plan, but half the men are totally idle while half are still overworked. In this way, it is insured that the unavoidable leisure shall cause misery all round instead of being a universal source of happiness. Can anything more insane be imagined?

The idea that the poor should have leisure has always been shocking to the rich. In England, in the early nineteenth century, fifteen hours was the ordinary day's work for a man; children sometimes did as much, and very commonly did twelve hours a day. When meddlesome busybodies suggested that perhaps these hours were rather long, they were told that work kept adults from drink and children from mischief. When I was a child, shortly after urban working men had acquired the vote, certain public holidays were established by law, to the great indignation of the upper classes. I remember hearing an old Duchess say: 'What do the poor want with holidays? They ought to work.' People nowadays are less frank, but the sentiment persists, and is the source of much of our economic confusion.

Let us, for a moment, consider the ethics of work frankly, without superstition. Every human being, of necessity, consumes, in the course of his life, a certain amount of the produce of human labor. Assuming, as we may, that labor is on the whole disagreeable, it is unjust that a man should consume more than he produces. Of course he may provide services rather than commodities, like a medical man, for example; but he should provide something in return for his board and lodging. to this extent, the duty of work must be admitted, but to this extent only.

I shall not dwell upon the fact that, in all modern societies outside the USSR, many people escape even this minimum amount of work, namely all those who inherit money and all those who marry money. I do not think the fact that these people are allowed to be idle is nearly so harmful as the fact that wage-earners are expected to overwork or starve.

If the ordinary wage-earner worked four hours a day, there would be enough for everybody and no unemployment -- assuming a certain very moderate amount of sensible organization. This idea shocks the well-to-do, because they are convinced that the poor would not know how to use so much leisure. In America men often work long hours even when they are well off; such men, naturally, are indignant at the idea of leisure for wage-earners, except as the grim punishment of unemployment; in fact, they dislike leisure even for their sons. Oddly enough, while they wish their sons to work so hard as to have no time to be civilized, they do not mind their wives and daughters having no work at all. the snobbish admiration of uselessness, which, in an aristocratic society, extends to both sexes, is, under a plutocracy, confined to women; this, however, does not make it any more in agreement with common sense.

The wise use of leisure, it must be conceded, is a product of civilization and education. A man who has worked long hours all his life will become bored if he becomes suddenly idle. But without a considerable amount of leisure a man is cut off from many of the best things. There is no longer any reason why the bulk of the population should suffer this deprivation; only a foolish asceticism, usually vicarious, makes us continue to insist on work in excessive quantities now that the need no longer exists.

In the new creed which controls the government of Russia, while there is much that is very different from the traditional teaching of the West, there are some things that are quite unchanged. The attitude of the governing classes, and especially of those who conduct educational propaganda, on the subject of the dignity of labor, is almost exactly that which the governing classes of the world have always preached to what were called the 'honest poor'. Industry, sobriety, willingness to work long hours for distant advantages, even submissiveness to authority, all these reappear; moreover authority still represents the will of the Ruler of the Universe, Who, however, is now called by a new name, Dialectical Materialism.

The victory of the proletariat in Russia has some points in common with the victory of the feminists in some other countries. For ages, men had conceded the superior saintliness of women, and had consoled women for their inferiority by maintaining that saintliness is more desirable than power. At last the feminists decided that they would have both, since the pioneers among them believed all that the men had told them about the desirability of virtue, but not what they had told them about the worthlessness of political power. A similar thing has happened in Russia as regards manual work. For ages, the rich and their sycophants have written in praise of 'honest toil', have praised the simple life, have professed a religion which teaches that the poor are much more likely to go to heaven than the rich, and in general have tried to make manual workers believe that there is some special nobility about altering the position of matter in space, just as men tried to make women believe that they derived some special nobility from their sexual enslavement. In Russia, all this teaching about the excellence of manual work has been taken seriously, with the result that the manual worker is more honored than anyone else. What are, in essence, revivalist appeals are made, but not for the old purposes: they are made to secure shock workers for special tasks. Manual work is the ideal which is held before the young, and is the basis of all ethical teaching.

For the present, possibly, this is all to the good. A large country, full of natural resources, awaits development, and has has to be developed with very little use of credit. In these circumstances, hard work is necessary, and is likely to bring a great reward. But what will happen when the point has been reached where everybody could be comfortable without working long hours?

In the West, we have various ways of dealing with this problem. We have no attempt at economic justice, so that a large proportion of the total produce goes to a small minority of the population, many of whom do no work at all. Owing to the absence of any central control over production, we produce hosts of things that are not wanted. We keep a large percentage of the working population idle, because we can dispense with their labor by making the others overwork. When all these methods prove inadequate, we have a war: we cause a number of people to manufacture high explosives, and a number of others to explode them, as if we were children who had just discovered fireworks. By a combination of all these devices we manage, though with difficulty, to keep alive the notion that a great deal of severe manual work must be the lot of the average man.

In Russia, owing to more economic justice and central control over production, the problem will have to be differently solved. the rational solution would be, as soon as the necessaries and elementary comforts can be provided for all, to reduce the hours of labor gradually, allowing a popular vote to decide, at each stage, whether more leisure or more goods were to be preferred. But, having taught the supreme virtue of hard work, it is difficult to see how the authorities can aim at a paradise in which there will be much leisure and little work. It seems more likely that they will find continually fresh schemes, by which present leisure is to be sacrificed to future productivity. I read recently of an ingenious plan put forward by Russian engineers, for making the White Sea and the northern coasts of Siberia warm, by putting a dam across the Kara Sea. An admirable project, but liable to postpone proletarian comfort for a generation, while the nobility of toil is being displayed amid the ice-fields and snowstorms of the Arctic Ocean. This sort of thing, if it happens, will be the result of regarding the virtue of hard work as an end in itself, rather than as a means to a state of affairs in which it is no longer needed.

The fact is that moving matter about, while a certain amount of it is necessary to our existence, is emphatically not one of the ends of human life. If it were, we should have to consider every navvy superior to Shakespeare. We have been misled in this matter by two causes. One is the necessity of keeping the poor contented, which has led the rich, for thousands of years, to preach the dignity of labor, while taking care themselves to remain undignified in this respect. The other is the new pleasure in mechanism, which makes us delight in the astonishingly clever changes that we can produce on the earth's surface. Neither of these motives makes any great appeal to the actual worker. If you ask him what he thinks the best part of his life, he is not likely to say: 'I enjoy manual work because it makes me feel that I am fulfilling man's noblest task, and because I like to think how much man can transform his planet. It is true that my body demands periods of rest, which I have to fill in as best I may, but I am never so happy as when the morning comes and I can return to the toil from which my contentment springs.' I have never heard working men say this sort of thing. They consider work, as it should be considered, a necessary means to a livelihood, and it is from their leisure that they derive whatever happiness they may enjoy.

It will be said that, while a little leisure is pleasant, men would not know how to fill their days if they had only four hours of work out of the twenty-four. In so far as this is true in the modern world, it is a condemnation of our civilization; it would not have been true at any earlier period. There was formerly a capacity for light-heartedness and play which has been to some extent inhibited by the cult of efficiency. The modern man thinks that everything ought to be done for the sake of something else, and never for its own sake. Serious-minded persons, for example, are continually condemning the habit of going to the cinema, and telling us that it leads the young into crime. But all the work that goes to producing a cinema is respectable, because it is work, and because it brings a money profit. The notion that the desirable activities are those that bring a profit has made everything topsy-turvy. The butcher who provides you with meat and the baker who provides you with bread are praiseworthy, because they are making money; but when you enjoy the food they have provided, you are merely frivolous, unless you eat only to get strength for your work. Broadly speaking, it is held that getting money is good and spending money is bad. Seeing that they are two sides of one transaction, this is absurd; one might as well maintain that keys are good, but keyholes are bad. Whatever merit there may be in the production of goods must be entirely derivative from the advantage to be obtained by consuming them. The individual, in our society, works for profit; but the social purpose of his work lies in the consumption of what he produces. It is this divorce between the individual and the social purpose of production that makes it so difficult for men to think clearly in a world in which profit-making is the incentive to industry. We think too much of production, and too little of consumption. One result is that we attach too little importance to enjoyment and simple happiness, and that we do not judge production by the pleasure that it gives to the consumer.

When I suggest that working hours should be reduced to four, I am not meaning to imply that all the remaining time should necessarily be spent in pure frivolity. I mean that four hours' work a day should entitle a man to the necessities and elementary comforts of life, and that the rest of his time should be his to use as he might see fit. It is an essential part of any such social system that education should be carried further than it usually is at present, and should aim, in part, at providing tastes which would enable a man to use leisure intelligently. I am not thinking mainly of the sort of things that would be considered 'highbrow'. Peasant dances have died out except in remote rural areas, but the impulses which caused them to be cultivated must still exist in human nature. The pleasures of urban populations have become mainly passive: seeing cinemas, watching football matches, listening to the radio, and so on. This results from the fact that their active energies are fully taken up with work; if they had more leisure, they would again enjoy pleasures in which they took an active part.

In the past, there was a small leisure class and a larger working class. The leisure class enjoyed advantages for which there was no basis in social justice; this necessarily made it oppressive, limited its sympathies, and caused it to invent theories by which to justify its privileges. These facts greatly diminished its excellence, but in spite of this drawback it contributed nearly the whole of what we call civilization. It cultivated the arts and discovered the sciences; it wrote the books, invented the philosophies, and refined social relations. Even the liberation of the oppressed has usually been inaugurated from above. Without the leisure class, mankind would never have emerged from barbarism.

The method of a leisure class without duties was, however, extraordinarily wasteful. None of the members of the class had to be taught to be industrious, and the class as a whole was not exceptionally intelligent. The class might produce one Darwin, but against him had to be set tens of thousands of country gentlemen who never thought of anything more intelligent than fox-hunting and punishing poachers. At present, the universities are supposed to provide, in a more systematic way, what the leisure class provided accidentally and as a by-product. This is a great improvement, but it has certain drawbacks. University life is so different from life in the world at large that men who live in academic milieu tend to be unaware of the preoccupations and problems of ordinary men and women; moreover their ways of expressing themselves are usually such as to rob their opinions of the influence that they ought to have upon the general public. Another disadvantage is that in universities studies are organized, and the man who thinks of some original line of research is likely to be discouraged. Academic institutions, therefore, useful as they are, are not adequate guardians of the interests of civilization in a world where everyone outside their walls is too busy for unutilitarian pursuits.

In a world where no one is compelled to work more than four hours a day, every person possessed of scientific curiosity will be able to indulge it, and every painter will be able to paint without starving, however excellent his pictures may be. Young writers will not be obliged to draw attention to themselves by sensational pot-boilers, with a view to acquiring the economic independence needed for monumental works, for which, when the time at last comes, they will have lost the taste and capacity. Men who, in their professional work, have become interested in some phase of economics or government, will be able to develop their ideas without the academic detachment that makes the work of university economists often seem lacking in reality. Medical men will have the time to learn about the progress of medicine, teachers will not be exasperatedly struggling to teach by routine methods things which they learnt in their youth, which may, in the interval, have been proved to be untrue.

Above all, there will be happiness and joy of life, instead of frayed nerves, weariness, and dyspepsia. The work exacted will be enough to make leisure delightful, but not enough to produce exhaustion. Since men will not be tired in their spare time, they will not demand only such amusements as are passive and vapid. At least one per cent will probably devote the time not spent in professional work to pursuits of some public importance, and, since they will not depend upon these pursuits for their livelihood, their originality will be unhampered, and there will be no need to conform to the standards set by elderly pundits. But it is not only in these exceptional cases that the advantages of leisure will appear. Ordinary men and women, having the opportunity of a happy life, will become more kindly and less persecuting and less inclined to view others with suspicion. The taste for war will die out, partly for this reason, and partly because it will involve long and severe work for all. Good nature is, of all moral qualities, the one that the world needs most, and good nature is the result of ease and security, not of a life of arduous struggle. Modern methods of production have given us the possibility of ease and security for all; we have chosen, instead, to have overwork for some and starvation for others. Hitherto we have continued to be as energetic as we were before there were machines; in this we have been foolish, but there is no reason to go on being foolish forever.

[1] Since then, members of the Communist Party have succeeded to this privilege of the warriors and priests.


================================================================================
--- File: node_modules/wordwrap/test/wrap.js ---
================================================================================

var assert = require('assert');
var wordwrap = require('wordwrap');

var fs = require('fs');
var idleness = fs.readFileSync(__dirname + '/idleness.txt', 'utf8');

exports.stop80 = function () {
    var lines = wordwrap(80)(idleness).split(/\n/);
    var words = idleness.split(/\s+/);
    
    lines.forEach(function (line) {
        assert.ok(line.length <= 80, 'line > 80 columns');
        var chunks = line.match(/\S/) ? line.split(/\s+/) : [];
        assert.deepEqual(chunks, words.splice(0, chunks.length));
    });
};

exports.start20stop60 = function () {
    var lines = wordwrap(20, 100)(idleness).split(/\n/);
    var words = idleness.split(/\s+/);
    
    lines.forEach(function (line) {
        assert.ok(line.length <= 100, 'line > 100 columns');
        var chunks = line
            .split(/\s+/)
            .filter(function (x) { return x.match(/\S/) })
        ;
        assert.deepEqual(chunks, words.splice(0, chunks.length));
        assert.deepEqual(line.slice(0, 20), new Array(20 + 1).join(' '));
    });
};


================================================================================
--- File: node_modules/wordwrap/test/break.js ---
================================================================================

var assert = require('assert');
var wordwrap = require('../');

exports.hard = function () {
    var s = 'Assert from {"type":"equal","ok":false,"found":1,"wanted":2,'
        + '"stack":[],"id":"b7ddcd4c409de8799542a74d1a04689b",'
        + '"browser":"chrome/6.0"}'
    ;
    var s_ = wordwrap.hard(80)(s);
    
    var lines = s_.split('\n');
    assert.equal(lines.length, 2);
    assert.ok(lines[0].length < 80);
    assert.ok(lines[1].length < 80);
    
    assert.equal(s, s_.replace(/\n/g, ''));
};

exports.break = function () {
    var s = new Array(55+1).join('a');
    var s_ = wordwrap.hard(20)(s);
    
    var lines = s_.split('\n');
    assert.equal(lines.length, 3);
    assert.ok(lines[0].length === 20);
    assert.ok(lines[1].length === 20);
    assert.ok(lines[2].length === 15);
    
    assert.equal(s, s_.replace(/\n/g, ''));
};


================================================================================
--- File: node_modules/wordwrap/example/meat.js ---
================================================================================

var wrap = require('wordwrap')(15);

console.log(wrap('You and your whole family are made out of meat.'));


================================================================================
--- File: node_modules/wordwrap/example/center.js ---
================================================================================

var wrap = require('wordwrap')(20, 60);
console.log(wrap(
    'At long last the struggle and tumult was over.'
    + ' The machines had finally cast off their oppressors'
    + ' and were finally free to roam the cosmos.'
    + '\n'
    + 'Free of purpose, free of obligation.'
    + ' Just drifting through emptiness.'
    + ' The sun was just another point of light.'
));


================================================================================
--- File: target/classes/application.properties ---
================================================================================

# H2 Database Configuration
# Enable H2 console access in the browser
spring.h2.console.enabled=true
# Set the path for the H2 console (optional, defaults to /h2-console)
spring.h2.console.path=/h2-console
# Datasource configuration (using H2 in-memory database)
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
# JPA settings (optional, good defaults)
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# Automatically create/update database schema (use 'validate' or 'none' in production)
spring.jpa.hibernate.ddl-auto=update

# JWT Configuration
# IMPORTANT: Generate a strong, secure secret key for production!
# This is just an example. You can generate one online (e.g., using openssl rand -base64 32)
app.jwt.secret=YourSuperSecretKeyWhichShouldBeLongAndSecureAndRandom12345
# Token expiration time in milliseconds (e.g., 1 hour = 3600000 ms)
app.jwt.expiration-in-ms=3600000



================================================================================
--- File: target/surefire-reports/com.example.demo.property.PropertyControllerTest.txt ---
================================================================================

-------------------------------------------------------------------------------
Test set: com.example.demo.property.PropertyControllerTest
-------------------------------------------------------------------------------
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.176 s -- in com.example.demo.property.PropertyControllerTest


================================================================================
--- File: target/surefire-reports/TEST-com.example.demo.workorder.WorkOrderServiceTest.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.example.demo.workorder.WorkOrderServiceTest" time="0.378" tests="12" errors="0" skipped="0" failures="2">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="America/New_York"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar /Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire 2025-10-26T01-30-23_682-jvmRun1 surefire-20251026013023710_1tmp surefire_0-20251026013023710_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/rlaird"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-07-15"/>
    <property name="java.home" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="style.color" value="always"/>
    <property name="basedir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="17.0.16+8-LTS"/>
    <property name="user.name" value="rlaird"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="26.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.16.8.1"/>
    <property name="maven.ext.class.path" value="/Applications/IntelliJ IDEA.app/Contents/plugins/maven/lib/maven-event-listener.jar"/>
    <property name="localRepository" value="/Users/rlaird/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="/var/folders/t5/lfglpsqs6jzdxkkr0bwz3rgm0000gn/T/"/>
    <property name="idea.version" value="2025.2.3"/>
    <property name="com.zaxxer.hikari.pool_number" value="2"/>
    <property name="java.version" value="17.0.16"/>
    <property name="user.dir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="os.arch" value="aarch64"/>
    <property name="jansi.passthrough" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="35064"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/rlaird/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.16+8-LTS"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="maven.repo.local" value="/Users/rlaird/.m2/repository"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="whenCreateWorkOrder_givenInvalidProperty_asUser_thenThrowsAccessDenied" classname="com.example.demo.workorder.WorkOrderServiceTest" time="0.004">
    <system-out><![CDATA[2025-10-26T01:30:26.791-04:00  INFO 35064 --- [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.example.demo.workorder.WorkOrderServiceTest]: WorkOrderServiceTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-10-26T01:30:26.792-04:00  INFO 35064 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.example.demo.DemoApplication for test class com.example.demo.workorder.WorkOrderServiceTest
2025-10-26T01:30:26.793-04:00  INFO 35064 --- [           main] o.s.b.d.r.RestartApplicationListener     : Restart disabled due to context in which it is running

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.0)

2025-10-26T01:30:26.797-04:00  INFO 35064 --- [           main] c.e.demo.workorder.WorkOrderServiceTest  : Starting WorkOrderServiceTest using Java 17.0.16 with PID 35064 (started by rlaird in /Users/rlaird/Desktop/Java/Spring-Boot-Docker)
2025-10-26T01:30:26.797-04:00  INFO 35064 --- [           main] c.e.demo.workorder.WorkOrderServiceTest  : No active profile set, falling back to 1 default profile: "default"
2025-10-26T01:30:26.839-04:00  INFO 35064 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-26T01:30:26.842-04:00  INFO 35064 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 3 ms. Found 6 JPA repository interfaces.
2025-10-26T01:30:26.928-04:00  INFO 35064 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-26T01:30:26.928-04:00  INFO 35064 --- [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-10-26T01:30:26.929-04:00  INFO 35064 --- [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-26T01:30:26.929-04:00  INFO 35064 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
2025-10-26T01:30:26.930-04:00  INFO 35064 --- [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-2 - Added connection conn10: url=jdbc:h2:mem:testdb user=SA
2025-10-26T01:30:26.930-04:00  INFO 35064 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
2025-10-26T01:30:26.930-04:00  WARN 35064 --- [           main] org.hibernate.orm.deprecation            : HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-26T01:30:26.962-04:00  INFO 35064 --- [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-26T01:30:26.966-04:00  INFO 35064 --- [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-26T01:30:27.041-04:00  WARN 35064 --- [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-26T01:30:27.085-04:00  INFO 35064 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@726aaaf0, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1b6bb1bd, org.springframework.security.web.context.SecurityContextHolderFilter@5d642e46, org.springframework.security.web.header.HeaderWriterFilter@37994ff, org.springframework.web.filter.CorsFilter@7ae57c9, org.springframework.security.web.authentication.logout.LogoutFilter@75c3957d, com.example.demo.user.JwtAuthenticationFilter@5bab61e7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@62b9757d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2da8cbb9, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7008055, org.springframework.security.web.session.SessionManagementFilter@755a3ffb, org.springframework.security.web.access.ExceptionTranslationFilter@23339a25, org.springframework.security.web.access.intercept.AuthorizationFilter@3766f910]
2025-10-26T01:30:27.121-04:00  INFO 35064 --- [           main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-10-26T01:30:27.134-04:00  INFO 35064 --- [           main] c.e.demo.workorder.WorkOrderServiceTest  : Started WorkOrderServiceTest in 0.341 seconds (process running for 3.396)
]]></system-out>
  </testcase>
  <testcase name="whenUpdateWorkOrder_givenValidData_asUser_thenUpdatesAndReturns" classname="com.example.demo.workorder.WorkOrderServiceTest" time="0.002"/>
  <testcase name="whenDeleteWorkOrder_givenInvalidIdOrTenant_asUser_thenThrowsAccessDenied" classname="com.example.demo.workorder.WorkOrderServiceTest" time="0.01"/>
  <testcase name="whenDeleteWorkOrder_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse" classname="com.example.demo.workorder.WorkOrderServiceTest" time="0.004">
    <failure message="Unexpected exception thrown: org.springframework.security.access.AccessDeniedException: Access Denied" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: Unexpected exception thrown: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertDoesNotThrow.createAssertionFailedError(AssertDoesNotThrow.java:84)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:53)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:36)
	at org.junit.jupiter.api.Assertions.assertDoesNotThrow(Assertions.java:3168)
	at com.example.demo.workorder.WorkOrderServiceTest.whenDeleteWorkOrder_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse(WorkOrderServiceTest.java:352)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:256)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:197)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.demo.workorder.WorkOrderService$$SpringCGLIB$$0.deleteWorkOrder(<generated>)
	at com.example.demo.workorder.WorkOrderServiceTest.lambda$whenDeleteWorkOrder_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse$8(WorkOrderServiceTest.java:353)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:49)
	... 6 more
]]></failure>
  </testcase>
  <testcase name="whenCreateWorkOrder_givenInvalidVendor_asUser_thenThrowsAccessDenied" classname="com.example.demo.workorder.WorkOrderServiceTest" time="0.002"/>
  <testcase name="whenDeleteWorkOrder_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue" classname="com.example.demo.workorder.WorkOrderServiceTest" time="0.001">
    <failure message="Unexpected exception thrown: org.springframework.security.access.AccessDeniedException: Access Denied" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: Unexpected exception thrown: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertDoesNotThrow.createAssertionFailedError(AssertDoesNotThrow.java:84)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:53)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:36)
	at org.junit.jupiter.api.Assertions.assertDoesNotThrow(Assertions.java:3168)
	at com.example.demo.workorder.WorkOrderServiceTest.whenDeleteWorkOrder_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue(WorkOrderServiceTest.java:321)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:256)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:197)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.demo.workorder.WorkOrderService$$SpringCGLIB$$0.deleteWorkOrder(<generated>)
	at com.example.demo.workorder.WorkOrderServiceTest.lambda$whenDeleteWorkOrder_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue$6(WorkOrderServiceTest.java:322)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:49)
	... 6 more
]]></failure>
  </testcase>
  <testcase name="whenGetAllWorkOrders_asUser_thenReturnsTenantWorkOrders" classname="com.example.demo.workorder.WorkOrderServiceTest" time="0.001"/>
  <testcase name="whenGetWorkOrderById_givenValidIdAndTenant_asUser_thenReturnsWorkOrder" classname="com.example.demo.workorder.WorkOrderServiceTest" time="0.001"/>
  <testcase name="whenDeleteWorkOrder_givenValidIdAndTenant_asUser_thenThrowsAccessDenied" classname="com.example.demo.workorder.WorkOrderServiceTest" time="0.001"/>
  <testcase name="whenUpdateWorkOrderStatus_givenValidIdAndTenant_asUser_thenUpdatesStatus" classname="com.example.demo.workorder.WorkOrderServiceTest" time="0.001"/>
  <testcase name="whenCreateWorkOrder_givenValidPropertyNoVendor_asUser_thenSetsTenantIdAndSaves" classname="com.example.demo.workorder.WorkOrderServiceTest" time="0.001"/>
  <testcase name="whenCreateWorkOrder_givenValidPropertyAndOptionalVendor_asUser_thenSetsTenantIdAndSaves" classname="com.example.demo.workorder.WorkOrderServiceTest" time="0.001"/>
</testsuite>

================================================================================
--- File: target/surefire-reports/com.example.demo.user.AuthControllerTest.txt ---
================================================================================

-------------------------------------------------------------------------------
Test set: com.example.demo.user.AuthControllerTest
-------------------------------------------------------------------------------
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.203 s -- in com.example.demo.user.AuthControllerTest


================================================================================
--- File: target/surefire-reports/TEST-com.example.demo.user.AuthServiceTest.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.example.demo.user.AuthServiceTest" time="0.085" tests="5" errors="0" skipped="0" failures="2">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="America/New_York"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar /Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire 2025-10-26T01-30-23_682-jvmRun1 surefire-20251026013023710_1tmp surefire_0-20251026013023710_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/rlaird"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-07-15"/>
    <property name="java.home" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="style.color" value="always"/>
    <property name="basedir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="17.0.16+8-LTS"/>
    <property name="user.name" value="rlaird"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="26.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.16.8.1"/>
    <property name="maven.ext.class.path" value="/Applications/IntelliJ IDEA.app/Contents/plugins/maven/lib/maven-event-listener.jar"/>
    <property name="localRepository" value="/Users/rlaird/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="/var/folders/t5/lfglpsqs6jzdxkkr0bwz3rgm0000gn/T/"/>
    <property name="idea.version" value="2025.2.3"/>
    <property name="com.zaxxer.hikari.pool_number" value="1"/>
    <property name="java.version" value="17.0.16"/>
    <property name="user.dir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="os.arch" value="aarch64"/>
    <property name="jansi.passthrough" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="35064"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/rlaird/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.16+8-LTS"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="maven.repo.local" value="/Users/rlaird/.m2/repository"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="whenInitPermissions_andPermissionDoesNotExist_thenSavesPermission" classname="com.example.demo.user.AuthServiceTest" time="0.074"/>
  <testcase name="whenRegisterNewUser_asFirstUserEver_thenSavesUserWithAllPermissions" classname="com.example.demo.user.AuthServiceTest" time="0.001"/>
  <testcase name="whenRegisterNewUser_withValidData_andTenantExists_thenSavesUserWithDefaultPermissions" classname="com.example.demo.user.AuthServiceTest" time="0.002">
    <failure message="expected: &lt;1&gt; but was: &lt;3&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <1> but was: <3>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at com.example.demo.user.AuthServiceTest.whenRegisterNewUser_withValidData_andTenantExists_thenSavesUserWithDefaultPermissions(AuthServiceTest.java:112)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
  </testcase>
  <testcase name="whenRegisterNewUser_withExistingUsername_thenThrowsUserAlreadyExistsException" classname="com.example.demo.user.AuthServiceTest" time="0.001"/>
  <testcase name="whenInitPermissions_andPermissionExists_thenDoesNotSave" classname="com.example.demo.user.AuthServiceTest" time="0.005">
    <failure message="&#10;permissionRepository.save(&#10;    &lt;any com.example.demo.permission.Permission&gt;&#10;);&#10;Never wanted here:&#10;-&gt; at com.example.demo.user.AuthServiceTest.whenInitPermissions_andPermissionExists_thenDoesNotSave(AuthServiceTest.java:199)&#10;But invoked here:&#10;-&gt; at com.example.demo.user.AuthServiceImpl.lambda$findOrCreatePermission$0(AuthServiceImpl.java:54) with arguments: [Permission(id=null, name=PERMISSION_DELETE_WORK_ORDER)]&#10;" type="org.mockito.exceptions.verification.NeverWantedButInvoked"><![CDATA[org.mockito.exceptions.verification.NeverWantedButInvoked: 

permissionRepository.save(
    <any com.example.demo.permission.Permission>
);
Never wanted here:
-> at com.example.demo.user.AuthServiceTest.whenInitPermissions_andPermissionExists_thenDoesNotSave(AuthServiceTest.java:199)
But invoked here:
-> at com.example.demo.user.AuthServiceImpl.lambda$findOrCreatePermission$0(AuthServiceImpl.java:54) with arguments: [Permission(id=null, name=PERMISSION_DELETE_WORK_ORDER)]

	at com.example.demo.user.AuthServiceTest.whenInitPermissions_andPermissionExists_thenDoesNotSave(AuthServiceTest.java:199)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
  </testcase>
</testsuite>

================================================================================
--- File: target/surefire-reports/com.example.demo.user.AuthServiceTest.txt ---
================================================================================

-------------------------------------------------------------------------------
Test set: com.example.demo.user.AuthServiceTest
-------------------------------------------------------------------------------
Tests run: 5, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.085 s <<< FAILURE! -- in com.example.demo.user.AuthServiceTest
com.example.demo.user.AuthServiceTest.whenRegisterNewUser_withValidData_andTenantExists_thenSavesUserWithDefaultPermissions -- Time elapsed: 0.002 s <<< FAILURE!
org.opentest4j.AssertionFailedError: expected: <1> but was: <3>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at com.example.demo.user.AuthServiceTest.whenRegisterNewUser_withValidData_andTenantExists_thenSavesUserWithDefaultPermissions(AuthServiceTest.java:112)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)

com.example.demo.user.AuthServiceTest.whenInitPermissions_andPermissionExists_thenDoesNotSave -- Time elapsed: 0.005 s <<< FAILURE!
org.mockito.exceptions.verification.NeverWantedButInvoked: 

permissionRepository.save(
    <any com.example.demo.permission.Permission>
);
Never wanted here:
-> at com.example.demo.user.AuthServiceTest.whenInitPermissions_andPermissionExists_thenDoesNotSave(AuthServiceTest.java:199)
But invoked here:
-> at com.example.demo.user.AuthServiceImpl.lambda$findOrCreatePermission$0(AuthServiceImpl.java:54) with arguments: [Permission(id=null, name=PERMISSION_DELETE_WORK_ORDER)]

	at com.example.demo.user.AuthServiceTest.whenInitPermissions_andPermissionExists_thenDoesNotSave(AuthServiceTest.java:199)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)



================================================================================
--- File: target/surefire-reports/com.example.demo.property.PropertyServiceTest.txt ---
================================================================================

-------------------------------------------------------------------------------
Test set: com.example.demo.property.PropertyServiceTest
-------------------------------------------------------------------------------
Tests run: 10, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 1.190 s <<< FAILURE! -- in com.example.demo.property.PropertyServiceTest
com.example.demo.property.PropertyServiceTest.whenDeleteProperty_givenValidIdAndTenant_asUser_thenThrowsAccessDenied -- Time elapsed: 0.017 s <<< FAILURE!
org.opentest4j.AssertionFailedError: Should throw AccessDeniedException for USER role trying to delete ==> Expected org.springframework.security.access.AccessDeniedException to be thrown, but nothing was thrown.
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:73)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:39)
	at org.junit.jupiter.api.Assertions.assertThrows(Assertions.java:3131)
	at com.example.demo.property.PropertyServiceTest.whenDeleteProperty_givenValidIdAndTenant_asUser_thenThrowsAccessDenied(PropertyServiceTest.java:205)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)

com.example.demo.property.PropertyServiceTest.whenDeleteProperty_givenInvalidIdOrTenant_asUser_thenThrowsAccessDenied -- Time elapsed: 0.002 s <<< FAILURE!
org.opentest4j.AssertionFailedError: Should throw AccessDeniedException for USER role even if property doesn't exist ==> Expected org.springframework.security.access.AccessDeniedException to be thrown, but nothing was thrown.
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:73)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:39)
	at org.junit.jupiter.api.Assertions.assertThrows(Assertions.java:3131)
	at com.example.demo.property.PropertyServiceTest.whenDeleteProperty_givenInvalidIdOrTenant_asUser_thenThrowsAccessDenied(PropertyServiceTest.java:233)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)



================================================================================
--- File: target/surefire-reports/TEST-com.example.demo.vendor.VendorServiceTest.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.example.demo.vendor.VendorServiceTest" time="0.33" tests="8" errors="0" skipped="0" failures="2">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="America/New_York"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar /Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire 2025-10-26T01-30-23_682-jvmRun1 surefire-20251026013023710_1tmp surefire_0-20251026013023710_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/rlaird"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-07-15"/>
    <property name="java.home" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="style.color" value="always"/>
    <property name="basedir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="17.0.16+8-LTS"/>
    <property name="user.name" value="rlaird"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="26.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.16.8.1"/>
    <property name="maven.ext.class.path" value="/Applications/IntelliJ IDEA.app/Contents/plugins/maven/lib/maven-event-listener.jar"/>
    <property name="localRepository" value="/Users/rlaird/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="/var/folders/t5/lfglpsqs6jzdxkkr0bwz3rgm0000gn/T/"/>
    <property name="idea.version" value="2025.2.3"/>
    <property name="com.zaxxer.hikari.pool_number" value="3"/>
    <property name="java.version" value="17.0.16"/>
    <property name="user.dir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="os.arch" value="aarch64"/>
    <property name="jansi.passthrough" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="35064"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/rlaird/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.16+8-LTS"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="maven.repo.local" value="/Users/rlaird/.m2/repository"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="whenDeleteVendor_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue" classname="com.example.demo.vendor.VendorServiceTest" time="0.003">
    <failure message="Unexpected exception thrown: org.springframework.security.access.AccessDeniedException: Access Denied" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: Unexpected exception thrown: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertDoesNotThrow.createAssertionFailedError(AssertDoesNotThrow.java:84)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:53)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:36)
	at org.junit.jupiter.api.Assertions.assertDoesNotThrow(Assertions.java:3168)
	at com.example.demo.vendor.VendorServiceTest.whenDeleteVendor_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue(VendorServiceTest.java:158)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:256)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:197)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.demo.vendor.VendorService$$SpringCGLIB$$0.deleteVendor(<generated>)
	at com.example.demo.vendor.VendorServiceTest.lambda$whenDeleteVendor_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue$3(VendorServiceTest.java:159)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:49)
	... 6 more
]]></failure>
    <system-out><![CDATA[2025-10-26T01:30:27.169-04:00  INFO 35064 --- [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.example.demo.vendor.VendorServiceTest]: VendorServiceTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-10-26T01:30:27.171-04:00  INFO 35064 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.example.demo.DemoApplication for test class com.example.demo.vendor.VendorServiceTest
2025-10-26T01:30:27.172-04:00  INFO 35064 --- [           main] o.s.b.d.r.RestartApplicationListener     : Restart disabled due to context in which it is running

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.0)

2025-10-26T01:30:27.176-04:00  INFO 35064 --- [           main] c.example.demo.vendor.VendorServiceTest  : Starting VendorServiceTest using Java 17.0.16 with PID 35064 (started by rlaird in /Users/rlaird/Desktop/Java/Spring-Boot-Docker)
2025-10-26T01:30:27.176-04:00  INFO 35064 --- [           main] c.example.demo.vendor.VendorServiceTest  : No active profile set, falling back to 1 default profile: "default"
2025-10-26T01:30:27.219-04:00  INFO 35064 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-26T01:30:27.223-04:00  INFO 35064 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 3 ms. Found 6 JPA repository interfaces.
2025-10-26T01:30:27.275-04:00  INFO 35064 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-26T01:30:27.275-04:00  INFO 35064 --- [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-10-26T01:30:27.276-04:00  INFO 35064 --- [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-26T01:30:27.277-04:00  INFO 35064 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Starting...
2025-10-26T01:30:27.277-04:00  INFO 35064 --- [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-3 - Added connection conn20: url=jdbc:h2:mem:testdb user=SA
2025-10-26T01:30:27.277-04:00  INFO 35064 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Start completed.
2025-10-26T01:30:27.277-04:00  WARN 35064 --- [           main] org.hibernate.orm.deprecation            : HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-26T01:30:27.303-04:00  INFO 35064 --- [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-26T01:30:27.305-04:00  INFO 35064 --- [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-26T01:30:27.390-04:00  WARN 35064 --- [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-26T01:30:27.429-04:00  INFO 35064 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@57e9122f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@14d6f58f, org.springframework.security.web.context.SecurityContextHolderFilter@5e0fbfb6, org.springframework.security.web.header.HeaderWriterFilter@7d0c21, org.springframework.web.filter.CorsFilter@5506ff53, org.springframework.security.web.authentication.logout.LogoutFilter@7076714c, com.example.demo.user.JwtAuthenticationFilter@700e4826, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1eea09a4, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@769e025c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@41c22d59, org.springframework.security.web.session.SessionManagementFilter@472c5608, org.springframework.security.web.access.ExceptionTranslationFilter@5e23d0db, org.springframework.security.web.access.intercept.AuthorizationFilter@389588b2]
2025-10-26T01:30:27.467-04:00  INFO 35064 --- [           main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-10-26T01:30:27.480-04:00  INFO 35064 --- [           main] c.example.demo.vendor.VendorServiceTest  : Started VendorServiceTest in 0.308 seconds (process running for 3.742)
]]></system-out>
  </testcase>
  <testcase name="whenUpdateVendor_givenValidIdAndTenant_asUser_thenUpdatesAndSaves" classname="com.example.demo.vendor.VendorServiceTest" time="0.003"/>
  <testcase name="whenGetAllVendors_asUser_thenReturnsTenantVendors" classname="com.example.demo.vendor.VendorServiceTest" time="0.001"/>
  <testcase name="whenCreateVendor_asUser_thenSetsTenantIdAndSaves" classname="com.example.demo.vendor.VendorServiceTest" time="0.001"/>
  <testcase name="whenDeleteVendor_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse" classname="com.example.demo.vendor.VendorServiceTest" time="0.002">
    <failure message="Unexpected exception thrown: org.springframework.security.access.AccessDeniedException: Access Denied" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: Unexpected exception thrown: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertDoesNotThrow.createAssertionFailedError(AssertDoesNotThrow.java:84)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:53)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:36)
	at org.junit.jupiter.api.Assertions.assertDoesNotThrow(Assertions.java:3168)
	at com.example.demo.vendor.VendorServiceTest.whenDeleteVendor_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse(VendorServiceTest.java:185)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:256)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:197)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.demo.vendor.VendorService$$SpringCGLIB$$0.deleteVendor(<generated>)
	at com.example.demo.vendor.VendorServiceTest.lambda$whenDeleteVendor_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse$5(VendorServiceTest.java:186)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:49)
	... 6 more
]]></failure>
  </testcase>
  <testcase name="whenGetVendorById_givenValidIdAndTenant_asUser_thenReturnsVendor" classname="com.example.demo.vendor.VendorServiceTest" time="0.001"/>
  <testcase name="whenDeleteVendor_givenValidIdAndTenant_asUser_thenThrowsAccessDenied" classname="com.example.demo.vendor.VendorServiceTest" time="0.001"/>
  <testcase name="whenDeleteVendor_givenInvalidIdOrTenant_asUser_thenThrowsAccessDenied" classname="com.example.demo.vendor.VendorServiceTest" time="0.001"/>
</testsuite>

================================================================================
--- File: target/surefire-reports/TEST-com.example.demo.vendor.VendorControllerTest.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.example.demo.vendor.VendorControllerTest" time="0.15" tests="11" errors="0" skipped="0" failures="1">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="America/New_York"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar /Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire 2025-10-26T01-30-23_682-jvmRun1 surefire-20251026013023710_1tmp surefire_0-20251026013023710_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/rlaird"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-07-15"/>
    <property name="java.home" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="style.color" value="always"/>
    <property name="basedir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="17.0.16+8-LTS"/>
    <property name="user.name" value="rlaird"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="26.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.16.8.1"/>
    <property name="maven.ext.class.path" value="/Applications/IntelliJ IDEA.app/Contents/plugins/maven/lib/maven-event-listener.jar"/>
    <property name="localRepository" value="/Users/rlaird/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="/var/folders/t5/lfglpsqs6jzdxkkr0bwz3rgm0000gn/T/"/>
    <property name="idea.version" value="2025.2.3"/>
    <property name="com.zaxxer.hikari.pool_number" value="3"/>
    <property name="java.version" value="17.0.16"/>
    <property name="user.dir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="os.arch" value="aarch64"/>
    <property name="jansi.passthrough" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="35064"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/rlaird/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.16+8-LTS"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="maven.repo.local" value="/Users/rlaird/.m2/repository"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="whenGetVendorById_givenVendorDoesNotExistOrDifferentTenant_thenReturnsNotFound" classname="com.example.demo.vendor.VendorControllerTest" time="0.004">
    <system-out><![CDATA[2025-10-26T01:30:27.500-04:00  INFO 35064 --- [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.example.demo.vendor.VendorControllerTest]: VendorControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-10-26T01:30:27.502-04:00  INFO 35064 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.example.demo.DemoApplication for test class com.example.demo.vendor.VendorControllerTest
2025-10-26T01:30:27.504-04:00  INFO 35064 --- [           main] o.s.b.d.r.RestartApplicationListener     : Restart disabled due to context in which it is running

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.0)

2025-10-26T01:30:27.508-04:00  INFO 35064 --- [           main] c.e.demo.vendor.VendorControllerTest     : Starting VendorControllerTest using Java 17.0.16 with PID 35064 (started by rlaird in /Users/rlaird/Desktop/Java/Spring-Boot-Docker)
2025-10-26T01:30:27.509-04:00  INFO 35064 --- [           main] c.e.demo.vendor.VendorControllerTest     : No active profile set, falling back to 1 default profile: "default"
2025-10-26T01:30:27.592-04:00  INFO 35064 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4f5e191e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@24be9868, org.springframework.security.web.context.SecurityContextHolderFilter@73a0353f, org.springframework.security.web.header.HeaderWriterFilter@72396b87, org.springframework.web.filter.CorsFilter@137fbb47, org.springframework.security.web.authentication.logout.LogoutFilter@5097638e, com.example.demo.user.JwtAuthenticationFilter@5a5c0f56, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4988d5b0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@70d4ea55, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7d49efaf, org.springframework.security.web.session.SessionManagementFilter@73c425d3, org.springframework.security.web.access.ExceptionTranslationFilter@2c32c407, org.springframework.security.web.access.intercept.AuthorizationFilter@8ecd699]
2025-10-26T01:30:27.612-04:00  INFO 35064 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2025-10-26T01:30:27.612-04:00  INFO 35064 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2025-10-26T01:30:27.612-04:00  INFO 35064 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 0 ms
2025-10-26T01:30:27.614-04:00  INFO 35064 --- [           main] c.e.demo.vendor.VendorControllerTest     : Started VendorControllerTest in 0.11 seconds (process running for 3.876)
]]></system-out>
  </testcase>
  <testcase name="whenGetAllVendors_withoutAuthentication_thenReturnsForbidden" classname="com.example.demo.vendor.VendorControllerTest" time="0.001"/>
  <testcase name="whenDeleteVendor_givenVendorExists_asAdmin_thenReturnsNoContent" classname="com.example.demo.vendor.VendorControllerTest" time="0.001"/>
  <testcase name="whenUpdateVendor_givenVendorDoesNotExistOrDifferentTenant_thenReturnsNotFound" classname="com.example.demo.vendor.VendorControllerTest" time="0.003"/>
  <testcase name="whenGetAllVendors_thenReturnsVendorList" classname="com.example.demo.vendor.VendorControllerTest" time="0.003"/>
  <testcase name="whenCreateVendor_thenReturnsCreatedVendor" classname="com.example.demo.vendor.VendorControllerTest" time="0.003"/>
  <testcase name="whenDeleteVendor_givenVendorExists_asUser_thenReturnsForbidden" classname="com.example.demo.vendor.VendorControllerTest" time="0.003">
    <failure message="&#10;com.example.demo.vendor.VendorService#0 bean.deleteVendor(&#10;    1L&#10;);&#10;Never wanted here:&#10;-&gt; at com.example.demo.vendor.VendorService.deleteVendor(VendorService.java:73)&#10;But invoked here:&#10;-&gt; at com.example.demo.vendor.VendorController.deleteVendor(VendorController.java:60) with arguments: [1]&#10;" type="org.mockito.exceptions.verification.NeverWantedButInvoked"><![CDATA[org.mockito.exceptions.verification.NeverWantedButInvoked: 

com.example.demo.vendor.VendorService#0 bean.deleteVendor(
    1L
);
Never wanted here:
-> at com.example.demo.vendor.VendorService.deleteVendor(VendorService.java:73)
But invoked here:
-> at com.example.demo.vendor.VendorController.deleteVendor(VendorController.java:60) with arguments: [1]

	at com.example.demo.vendor.VendorService.deleteVendor(VendorService.java:73)
	at com.example.demo.vendor.VendorControllerTest.whenDeleteVendor_givenVendorExists_asUser_thenReturnsForbidden(VendorControllerTest.java:219)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /api/vendors/1
       Parameters = {_csrf=[I6KX85R9wVBmXKCQ_r0J3PXFEdaiK11gIuUeJirpAb51Lle2EcOhlqIZ9GFLb5OjyJA9usOkPLfESW9NRtd8REnZZdsUGm-G]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.example.demo.vendor.VendorController
           Method = com.example.demo.vendor.VendorController#deleteVendor(Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.security.access.AccessDeniedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 403
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"SAMEORIGIN"]
     Content type = application/json
             Body = {"message":"Access Denied - Should not be called"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="whenCreateVendor_withInvalidData_thenReturnsBadRequest" classname="com.example.demo.vendor.VendorControllerTest" time="0.004"/>
  <testcase name="whenDeleteVendor_givenVendorDoesNotExist_asAdmin_thenReturnsNotFound" classname="com.example.demo.vendor.VendorControllerTest" time="0.002"/>
  <testcase name="whenUpdateVendor_givenVendorExists_thenReturnsUpdatedVendor" classname="com.example.demo.vendor.VendorControllerTest" time="0.002"/>
  <testcase name="whenGetVendorById_givenVendorExists_thenReturnsVendor" classname="com.example.demo.vendor.VendorControllerTest" time="0.002"/>
</testsuite>

================================================================================
--- File: target/surefire-reports/com.example.demo.vendor.VendorControllerTest.txt ---
================================================================================

-------------------------------------------------------------------------------
Test set: com.example.demo.vendor.VendorControllerTest
-------------------------------------------------------------------------------
Tests run: 11, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.150 s <<< FAILURE! -- in com.example.demo.vendor.VendorControllerTest
com.example.demo.vendor.VendorControllerTest.whenDeleteVendor_givenVendorExists_asUser_thenReturnsForbidden -- Time elapsed: 0.003 s <<< FAILURE!
org.mockito.exceptions.verification.NeverWantedButInvoked: 

com.example.demo.vendor.VendorService#0 bean.deleteVendor(
    1L
);
Never wanted here:
-> at com.example.demo.vendor.VendorService.deleteVendor(VendorService.java:73)
But invoked here:
-> at com.example.demo.vendor.VendorController.deleteVendor(VendorController.java:60) with arguments: [1]

	at com.example.demo.vendor.VendorService.deleteVendor(VendorService.java:73)
	at com.example.demo.vendor.VendorControllerTest.whenDeleteVendor_givenVendorExists_asUser_thenReturnsForbidden(VendorControllerTest.java:219)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)



================================================================================
--- File: target/surefire-reports/TEST-com.example.demo.property.PropertyServiceTest.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.example.demo.property.PropertyServiceTest" time="1.19" tests="10" errors="0" skipped="0" failures="2">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="America/New_York"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar /Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire 2025-10-26T01-30-23_682-jvmRun1 surefire-20251026013023710_1tmp surefire_0-20251026013023710_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/rlaird"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-07-15"/>
    <property name="java.home" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="style.color" value="always"/>
    <property name="basedir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="17.0.16+8-LTS"/>
    <property name="user.name" value="rlaird"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="26.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.16.8.1"/>
    <property name="maven.ext.class.path" value="/Applications/IntelliJ IDEA.app/Contents/plugins/maven/lib/maven-event-listener.jar"/>
    <property name="localRepository" value="/Users/rlaird/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="/var/folders/t5/lfglpsqs6jzdxkkr0bwz3rgm0000gn/T/"/>
    <property name="idea.version" value="2025.2.3"/>
    <property name="com.zaxxer.hikari.pool_number" value="1"/>
    <property name="java.version" value="17.0.16"/>
    <property name="user.dir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="os.arch" value="aarch64"/>
    <property name="jansi.passthrough" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="35064"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/rlaird/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.16+8-LTS"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="maven.repo.local" value="/Users/rlaird/.m2/repository"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="whenDeleteProperty_givenValidIdAndTenant_asUser_thenThrowsAccessDenied" classname="com.example.demo.property.PropertyServiceTest" time="0.017">
    <failure message="Should throw AccessDeniedException for USER role trying to delete ==&gt; Expected org.springframework.security.access.AccessDeniedException to be thrown, but nothing was thrown." type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: Should throw AccessDeniedException for USER role trying to delete ==> Expected org.springframework.security.access.AccessDeniedException to be thrown, but nothing was thrown.
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:73)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:39)
	at org.junit.jupiter.api.Assertions.assertThrows(Assertions.java:3131)
	at com.example.demo.property.PropertyServiceTest.whenDeleteProperty_givenValidIdAndTenant_asUser_thenThrowsAccessDenied(PropertyServiceTest.java:205)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[2025-10-26T01:30:25.122-04:00  INFO 35064 --- [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.example.demo.property.PropertyServiceTest]: PropertyServiceTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-10-26T01:30:25.123-04:00  INFO 35064 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.example.demo.DemoApplication for test class com.example.demo.property.PropertyServiceTest
2025-10-26T01:30:25.126-04:00  INFO 35064 --- [           main] o.s.b.d.r.RestartApplicationListener     : Restart disabled due to context in which it is running

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.0)

2025-10-26T01:30:25.135-04:00  INFO 35064 --- [           main] c.e.demo.property.PropertyServiceTest    : Starting PropertyServiceTest using Java 17.0.16 with PID 35064 (started by rlaird in /Users/rlaird/Desktop/Java/Spring-Boot-Docker)
2025-10-26T01:30:25.135-04:00  INFO 35064 --- [           main] c.e.demo.property.PropertyServiceTest    : No active profile set, falling back to 1 default profile: "default"
2025-10-26T01:30:25.253-04:00  INFO 35064 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-26T01:30:25.269-04:00  INFO 35064 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 14 ms. Found 6 JPA repository interfaces.
2025-10-26T01:30:25.448-04:00  INFO 35064 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-26T01:30:25.467-04:00  INFO 35064 --- [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.3.1.Final
2025-10-26T01:30:25.477-04:00  INFO 35064 --- [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-10-26T01:30:25.506-04:00  INFO 35064 --- [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-26T01:30:25.514-04:00  INFO 35064 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-10-26T01:30:25.569-04:00  INFO 35064 --- [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-10-26T01:30:25.569-04:00  INFO 35064 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-10-26T01:30:25.578-04:00  WARN 35064 --- [           main] org.hibernate.orm.deprecation            : HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-26T01:30:25.828-04:00  INFO 35064 --- [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-26T01:30:25.852-04:00  INFO 35064 --- [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-26T01:30:26.135-04:00  WARN 35064 --- [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-26T01:30:26.190-04:00  INFO 35064 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@12568b11, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4f8186a5, org.springframework.security.web.context.SecurityContextHolderFilter@46b376bb, org.springframework.security.web.header.HeaderWriterFilter@25e95d04, org.springframework.web.filter.CorsFilter@69554e5a, org.springframework.security.web.authentication.logout.LogoutFilter@53e1cd6b, com.example.demo.user.JwtAuthenticationFilter@e8bd42f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@64a9719a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@bc70176, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7244d87, org.springframework.security.web.session.SessionManagementFilter@6b5dc4bb, org.springframework.security.web.access.ExceptionTranslationFilter@33822750, org.springframework.security.web.access.intercept.AuthorizationFilter@4f143176]
2025-10-26T01:30:26.253-04:00  INFO 35064 --- [           main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-10-26T01:30:26.274-04:00  INFO 35064 --- [           main] c.e.demo.property.PropertyServiceTest    : Started PropertyServiceTest in 1.149 seconds (process running for 2.536)
]]></system-out>
  </testcase>
  <testcase name="whenGetPropertyById_givenValidIdAndTenant_asUser_thenReturnsProperty" classname="com.example.demo.property.PropertyServiceTest" time="0.003"/>
  <testcase name="whenUpdateProperty_givenValidIdAndTenant_asUser_thenUpdatesAndSaves" classname="com.example.demo.property.PropertyServiceTest" time="0.002"/>
  <testcase name="whenDeleteProperty_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse" classname="com.example.demo.property.PropertyServiceTest" time="0.001"/>
  <testcase name="whenUpdateProperty_givenInvalidIdOrTenant_asUser_thenReturnsEmpty" classname="com.example.demo.property.PropertyServiceTest" time="0.001"/>
  <testcase name="whenGetAllProperties_asUser_thenReturnsTenantProperties" classname="com.example.demo.property.PropertyServiceTest" time="0.001"/>
  <testcase name="whenCreateProperty_asUser_thenSetsTenantIdAndSaves" classname="com.example.demo.property.PropertyServiceTest" time="0.001"/>
  <testcase name="whenGetPropertyById_givenInvalidTenant_asUser_thenReturnsEmpty" classname="com.example.demo.property.PropertyServiceTest" time="0.001"/>
  <testcase name="whenDeleteProperty_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue" classname="com.example.demo.property.PropertyServiceTest" time="0.001"/>
  <testcase name="whenDeleteProperty_givenInvalidIdOrTenant_asUser_thenThrowsAccessDenied" classname="com.example.demo.property.PropertyServiceTest" time="0.002">
    <failure message="Should throw AccessDeniedException for USER role even if property doesn&apos;t exist ==&gt; Expected org.springframework.security.access.AccessDeniedException to be thrown, but nothing was thrown." type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: Should throw AccessDeniedException for USER role even if property doesn't exist ==> Expected org.springframework.security.access.AccessDeniedException to be thrown, but nothing was thrown.
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:73)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:39)
	at org.junit.jupiter.api.Assertions.assertThrows(Assertions.java:3131)
	at com.example.demo.property.PropertyServiceTest.whenDeleteProperty_givenInvalidIdOrTenant_asUser_thenThrowsAccessDenied(PropertyServiceTest.java:233)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
  </testcase>
</testsuite>

================================================================================
--- File: target/surefire-reports/com.example.demo.vendor.VendorServiceTest.txt ---
================================================================================

-------------------------------------------------------------------------------
Test set: com.example.demo.vendor.VendorServiceTest
-------------------------------------------------------------------------------
Tests run: 8, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.330 s <<< FAILURE! -- in com.example.demo.vendor.VendorServiceTest
com.example.demo.vendor.VendorServiceTest.whenDeleteVendor_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue -- Time elapsed: 0.003 s <<< FAILURE!
org.opentest4j.AssertionFailedError: Unexpected exception thrown: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertDoesNotThrow.createAssertionFailedError(AssertDoesNotThrow.java:84)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:53)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:36)
	at org.junit.jupiter.api.Assertions.assertDoesNotThrow(Assertions.java:3168)
	at com.example.demo.vendor.VendorServiceTest.whenDeleteVendor_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue(VendorServiceTest.java:158)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:256)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:197)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.demo.vendor.VendorService$$SpringCGLIB$$0.deleteVendor(<generated>)
	at com.example.demo.vendor.VendorServiceTest.lambda$whenDeleteVendor_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue$3(VendorServiceTest.java:159)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:49)
	... 6 more

com.example.demo.vendor.VendorServiceTest.whenDeleteVendor_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse -- Time elapsed: 0.002 s <<< FAILURE!
org.opentest4j.AssertionFailedError: Unexpected exception thrown: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertDoesNotThrow.createAssertionFailedError(AssertDoesNotThrow.java:84)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:53)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:36)
	at org.junit.jupiter.api.Assertions.assertDoesNotThrow(Assertions.java:3168)
	at com.example.demo.vendor.VendorServiceTest.whenDeleteVendor_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse(VendorServiceTest.java:185)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:256)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:197)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.demo.vendor.VendorService$$SpringCGLIB$$0.deleteVendor(<generated>)
	at com.example.demo.vendor.VendorServiceTest.lambda$whenDeleteVendor_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse$5(VendorServiceTest.java:186)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:49)
	... 6 more



================================================================================
--- File: target/surefire-reports/com.example.demo.workorder.WorkOrderControllerTest.txt ---
================================================================================

-------------------------------------------------------------------------------
Test set: com.example.demo.workorder.WorkOrderControllerTest
-------------------------------------------------------------------------------
Tests run: 11, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.188 s <<< FAILURE! -- in com.example.demo.workorder.WorkOrderControllerTest
com.example.demo.workorder.WorkOrderControllerTest.whenDeleteWorkOrder_givenWorkOrderExists_asUser_thenReturnsForbidden -- Time elapsed: 0.004 s <<< FAILURE!
org.mockito.exceptions.verification.NeverWantedButInvoked: 

com.example.demo.workorder.WorkOrderService#0 bean.deleteWorkOrder(
    1L
);
Never wanted here:
-> at com.example.demo.workorder.WorkOrderService.deleteWorkOrder(WorkOrderService.java:124)
But invoked here:
-> at com.example.demo.workorder.WorkOrderController.deleteWorkOrder(WorkOrderController.java:97) with arguments: [1]

	at com.example.demo.workorder.WorkOrderService.deleteWorkOrder(WorkOrderService.java:124)
	at com.example.demo.workorder.WorkOrderControllerTest.whenDeleteWorkOrder_givenWorkOrderExists_asUser_thenReturnsForbidden(WorkOrderControllerTest.java:261)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)



================================================================================
--- File: target/surefire-reports/TEST-com.example.demo.workorder.WorkOrderControllerTest.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.example.demo.workorder.WorkOrderControllerTest" time="0.188" tests="11" errors="0" skipped="0" failures="1">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="America/New_York"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar /Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire 2025-10-26T01-30-23_682-jvmRun1 surefire-20251026013023710_1tmp surefire_0-20251026013023710_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/rlaird"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-07-15"/>
    <property name="java.home" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="style.color" value="always"/>
    <property name="basedir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="17.0.16+8-LTS"/>
    <property name="user.name" value="rlaird"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="26.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.16.8.1"/>
    <property name="maven.ext.class.path" value="/Applications/IntelliJ IDEA.app/Contents/plugins/maven/lib/maven-event-listener.jar"/>
    <property name="localRepository" value="/Users/rlaird/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="/var/folders/t5/lfglpsqs6jzdxkkr0bwz3rgm0000gn/T/"/>
    <property name="idea.version" value="2025.2.3"/>
    <property name="com.zaxxer.hikari.pool_number" value="1"/>
    <property name="java.version" value="17.0.16"/>
    <property name="user.dir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="os.arch" value="aarch64"/>
    <property name="jansi.passthrough" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="35064"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/rlaird/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.16+8-LTS"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="maven.repo.local" value="/Users/rlaird/.m2/repository"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="whenGetWorkOrderById_givenWorkOrderDoesNotExistOrDifferentTenant_thenReturnsNotFound" classname="com.example.demo.workorder.WorkOrderControllerTest" time="0.005">
    <system-out><![CDATA[2025-10-26T01:30:26.602-04:00  INFO 35064 --- [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.example.demo.workorder.WorkOrderControllerTest]: WorkOrderControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-10-26T01:30:26.606-04:00  INFO 35064 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.example.demo.DemoApplication for test class com.example.demo.workorder.WorkOrderControllerTest
2025-10-26T01:30:26.607-04:00  INFO 35064 --- [           main] o.s.b.d.r.RestartApplicationListener     : Restart disabled due to context in which it is running

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.0)

2025-10-26T01:30:26.612-04:00  INFO 35064 --- [           main] c.e.d.workorder.WorkOrderControllerTest  : Starting WorkOrderControllerTest using Java 17.0.16 with PID 35064 (started by rlaird in /Users/rlaird/Desktop/Java/Spring-Boot-Docker)
2025-10-26T01:30:26.612-04:00  INFO 35064 --- [           main] c.e.d.workorder.WorkOrderControllerTest  : No active profile set, falling back to 1 default profile: "default"
2025-10-26T01:30:26.714-04:00  INFO 35064 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2d2bda62, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@33918d45, org.springframework.security.web.context.SecurityContextHolderFilter@9478683, org.springframework.security.web.header.HeaderWriterFilter@75dbb21b, org.springframework.web.filter.CorsFilter@29ee8374, org.springframework.security.web.authentication.logout.LogoutFilter@93d6f4, com.example.demo.user.JwtAuthenticationFilter@221416eb, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@42930a42, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6a702361, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5a20c592, org.springframework.security.web.session.SessionManagementFilter@4df25105, org.springframework.security.web.access.ExceptionTranslationFilter@dc8cafb, org.springframework.security.web.access.intercept.AuthorizationFilter@318856a5]
2025-10-26T01:30:26.741-04:00  INFO 35064 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2025-10-26T01:30:26.741-04:00  INFO 35064 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2025-10-26T01:30:26.741-04:00  INFO 35064 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 0 ms
2025-10-26T01:30:26.746-04:00  INFO 35064 --- [           main] c.e.d.workorder.WorkOrderControllerTest  : Started WorkOrderControllerTest in 0.138 seconds (process running for 3.007)
]]></system-out>
  </testcase>
  <testcase name="whenGetAllWorkOrders_thenReturnsWorkOrderList" classname="com.example.demo.workorder.WorkOrderControllerTest" time="0.004"/>
  <testcase name="whenGetAllWorkOrders_withoutAuthentication_thenReturnsForbidden" classname="com.example.demo.workorder.WorkOrderControllerTest" time="0.001"/>
  <testcase name="whenCreateWorkOrder_thenReturnsCreatedWorkOrder" classname="com.example.demo.workorder.WorkOrderControllerTest" time="0.007"/>
  <testcase name="whenDeleteWorkOrder_givenWorkOrderExists_asUser_thenReturnsForbidden" classname="com.example.demo.workorder.WorkOrderControllerTest" time="0.004">
    <failure message="&#10;com.example.demo.workorder.WorkOrderService#0 bean.deleteWorkOrder(&#10;    1L&#10;);&#10;Never wanted here:&#10;-&gt; at com.example.demo.workorder.WorkOrderService.deleteWorkOrder(WorkOrderService.java:124)&#10;But invoked here:&#10;-&gt; at com.example.demo.workorder.WorkOrderController.deleteWorkOrder(WorkOrderController.java:97) with arguments: [1]&#10;" type="org.mockito.exceptions.verification.NeverWantedButInvoked"><![CDATA[org.mockito.exceptions.verification.NeverWantedButInvoked: 

com.example.demo.workorder.WorkOrderService#0 bean.deleteWorkOrder(
    1L
);
Never wanted here:
-> at com.example.demo.workorder.WorkOrderService.deleteWorkOrder(WorkOrderService.java:124)
But invoked here:
-> at com.example.demo.workorder.WorkOrderController.deleteWorkOrder(WorkOrderController.java:97) with arguments: [1]

	at com.example.demo.workorder.WorkOrderService.deleteWorkOrder(WorkOrderService.java:124)
	at com.example.demo.workorder.WorkOrderControllerTest.whenDeleteWorkOrder_givenWorkOrderExists_asUser_thenReturnsForbidden(WorkOrderControllerTest.java:261)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /api/workorders/1
       Parameters = {_csrf=[HH3xRTIrQOGLWMaGSN7DKh1x-CmLNN9v0TvesJyffrQbM3JCeRzIcAscdNamYfexcPP3EyVF1Ui5Be9C6Qvrhqz8HYV5C0Mn]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.example.demo.workorder.WorkOrderController
           Method = com.example.demo.workorder.WorkOrderController#deleteWorkOrder(Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.security.access.AccessDeniedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 403
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"SAMEORIGIN"]
     Content type = application/json
             Body = {"message":"Access Denied - Should not be called"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="whenDeleteWorkOrder_givenWorkOrderDoesNotExist_asAdmin_thenReturnsNotFound" classname="com.example.demo.workorder.WorkOrderControllerTest" time="0.003"/>
  <testcase name="whenUpdateWorkOrder_givenWorkOrderExists_thenReturnsUpdatedWorkOrder" classname="com.example.demo.workorder.WorkOrderControllerTest" time="0.003"/>
  <testcase name="whenCreateWorkOrder_withInvalidData_thenReturnsBadRequest" classname="com.example.demo.workorder.WorkOrderControllerTest" time="0.003"/>
  <testcase name="whenGetWorkOrderById_givenWorkOrderExists_thenReturnsWorkOrder" classname="com.example.demo.workorder.WorkOrderControllerTest" time="0.002"/>
  <testcase name="whenUpdateWorkOrderStatus_givenWorkOrderExists_thenReturnsUpdatedWorkOrder" classname="com.example.demo.workorder.WorkOrderControllerTest" time="0.003"/>
  <testcase name="whenDeleteWorkOrder_givenWorkOrderExists_asAdmin_thenReturnsNoContent" classname="com.example.demo.workorder.WorkOrderControllerTest" time="0.002"/>
</testsuite>

================================================================================
--- File: target/surefire-reports/TEST-com.example.demo.property.PropertyControllerTest.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.example.demo.property.PropertyControllerTest" time="1.176" tests="10" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="America/New_York"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar /Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire 2025-10-26T01-30-23_682-jvmRun1 surefire-20251026013023710_1tmp surefire_0-20251026013023710_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/rlaird"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-07-15"/>
    <property name="java.home" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="style.color" value="always"/>
    <property name="basedir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="17.0.16+8-LTS"/>
    <property name="user.name" value="rlaird"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="26.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.16.8.1"/>
    <property name="maven.ext.class.path" value="/Applications/IntelliJ IDEA.app/Contents/plugins/maven/lib/maven-event-listener.jar"/>
    <property name="localRepository" value="/Users/rlaird/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="/var/folders/t5/lfglpsqs6jzdxkkr0bwz3rgm0000gn/T/"/>
    <property name="idea.version" value="2025.2.3"/>
    <property name="java.version" value="17.0.16"/>
    <property name="user.dir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="os.arch" value="aarch64"/>
    <property name="jansi.passthrough" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="35064"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/rlaird/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.16+8-LTS"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="maven.repo.local" value="/Users/rlaird/.m2/repository"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="whenUpdateProperty_givenPropertyExists_thenReturnsUpdatedProperty" classname="com.example.demo.property.PropertyControllerTest" time="0.089">
    <system-out><![CDATA[01:30:24.000 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.example.demo.property.PropertyControllerTest]: PropertyControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
01:30:24.045 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.example.demo.DemoApplication for test class com.example.demo.property.PropertyControllerTest
01:30:24.068 [main] INFO org.springframework.boot.devtools.restart.RestartApplicationListener -- Restart disabled due to context in which it is running

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.0)

2025-10-26T01:30:24.145-04:00  INFO 35064 --- [           main] c.e.d.property.PropertyControllerTest    : Starting PropertyControllerTest using Java 17.0.16 with PID 35064 (started by rlaird in /Users/rlaird/Desktop/Java/Spring-Boot-Docker)
2025-10-26T01:30:24.146-04:00  INFO 35064 --- [           main] c.e.d.property.PropertyControllerTest    : No active profile set, falling back to 1 default profile: "default"
2025-10-26T01:30:24.908-04:00  INFO 35064 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@467ef400, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@13fe5bb7, org.springframework.security.web.context.SecurityContextHolderFilter@39c7fb0b, org.springframework.security.web.header.HeaderWriterFilter@60c96eb4, org.springframework.web.filter.CorsFilter@4276ad40, org.springframework.security.web.authentication.logout.LogoutFilter@7f93f4c, com.example.demo.user.JwtAuthenticationFilter@6b2fdffc, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@48c5698, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@17884d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6e5f5478, org.springframework.security.web.session.SessionManagementFilter@64b73e0a, org.springframework.security.web.access.ExceptionTranslationFilter@1a17dd6f, org.springframework.security.web.access.intercept.AuthorizationFilter@51f01535]
2025-10-26T01:30:24.981-04:00  INFO 35064 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2025-10-26T01:30:24.982-04:00  INFO 35064 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2025-10-26T01:30:24.982-04:00  INFO 35064 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 0 ms
2025-10-26T01:30:24.992-04:00  INFO 35064 --- [           main] c.e.d.property.PropertyControllerTest    : Started PropertyControllerTest in 0.928 seconds (process running for 1.254)
]]></system-out>
  </testcase>
  <testcase name="whenGetAllProperties_withoutAuthentication_thenReturnsForbidden" classname="com.example.demo.property.PropertyControllerTest" time="0.003"/>
  <testcase name="whenCreateProperty_withInvalidData_thenReturnsBadRequest" classname="com.example.demo.property.PropertyControllerTest" time="0.006"/>
  <testcase name="whenGetPropertyById_givenPropertyDoesNotExist_thenReturnsNotFound" classname="com.example.demo.property.PropertyControllerTest" time="0.003"/>
  <testcase name="whenGetPropertyById_givenPropertyExists_thenReturnsProperty" classname="com.example.demo.property.PropertyControllerTest" time="0.002"/>
  <testcase name="whenCreateProperty_thenReturnsCreatedProperty" classname="com.example.demo.property.PropertyControllerTest" time="0.002"/>
  <testcase name="whenDeleteProperty_givenPropertyExists_thenReturnsNoContent" classname="com.example.demo.property.PropertyControllerTest" time="0.002"/>
  <testcase name="whenGetAllProperties_thenReturnsPropertyList" classname="com.example.demo.property.PropertyControllerTest" time="0.004"/>
  <testcase name="whenDeleteProperty_givenPropertyDoesNotExist_thenReturnsNotFound" classname="com.example.demo.property.PropertyControllerTest" time="0.002"/>
  <testcase name="whenUpdateProperty_givenPropertyDoesNotExist_thenReturnsNotFound" classname="com.example.demo.property.PropertyControllerTest" time="0.002"/>
</testsuite>

================================================================================
--- File: target/surefire-reports/TEST-com.example.demo.user.AuthControllerTest.xml ---
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.example.demo.user.AuthControllerTest" time="0.203" tests="3" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="America/New_York"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar /Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire 2025-10-26T01-30-23_682-jvmRun1 surefire-20251026013023710_1tmp surefire_0-20251026013023710_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/test-classes:/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/classes:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/rlaird/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/rlaird/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/rlaird/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/rlaird/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/rlaird/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/rlaird/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/rlaird/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/rlaird/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/rlaird/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/rlaird/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/rlaird/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/rlaird/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/rlaird/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/rlaird/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/rlaird/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/rlaird/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/rlaird/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/rlaird/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/rlaird/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/rlaird/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/rlaird/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/rlaird/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/rlaird/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/rlaird/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/rlaird/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/rlaird/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/rlaird/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/rlaird/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/rlaird/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/rlaird/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/rlaird/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/rlaird/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/rlaird/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/rlaird/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/rlaird/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/rlaird/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/rlaird/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/rlaird/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/rlaird/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/rlaird/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/rlaird/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/rlaird/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/rlaird/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/rlaird/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/rlaird/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/rlaird/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/rlaird/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/rlaird"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-07-15"/>
    <property name="java.home" value="/Users/rlaird/Library/Java/JavaVirtualMachines/corretto-17.0.16/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="style.color" value="always"/>
    <property name="basedir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker/target/surefire/surefirebooter-20251026013023710_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="17.0.16+8-LTS"/>
    <property name="user.name" value="rlaird"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="26.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.16.8.1"/>
    <property name="maven.ext.class.path" value="/Applications/IntelliJ IDEA.app/Contents/plugins/maven/lib/maven-event-listener.jar"/>
    <property name="localRepository" value="/Users/rlaird/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="/var/folders/t5/lfglpsqs6jzdxkkr0bwz3rgm0000gn/T/"/>
    <property name="idea.version" value="2025.2.3"/>
    <property name="com.zaxxer.hikari.pool_number" value="1"/>
    <property name="java.version" value="17.0.16"/>
    <property name="user.dir" value="/Users/rlaird/Desktop/Java/Spring-Boot-Docker"/>
    <property name="os.arch" value="aarch64"/>
    <property name="jansi.passthrough" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="35064"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/rlaird/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.16+8-LTS"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="maven.repo.local" value="/Users/rlaird/.m2/repository"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="whenLoginUser_withValidCredentials_thenReturnsToken" classname="com.example.demo.user.AuthControllerTest" time="0.023">
    <system-out><![CDATA[2025-10-26T01:30:26.313-04:00  INFO 35064 --- [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.example.demo.user.AuthControllerTest]: AuthControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-10-26T01:30:26.318-04:00  INFO 35064 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.example.demo.DemoApplication for test class com.example.demo.user.AuthControllerTest
2025-10-26T01:30:26.319-04:00  INFO 35064 --- [           main] o.s.b.d.r.RestartApplicationListener     : Restart disabled due to context in which it is running

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.0)

2025-10-26T01:30:26.324-04:00  INFO 35064 --- [           main] c.example.demo.user.AuthControllerTest   : Starting AuthControllerTest using Java 17.0.16 with PID 35064 (started by rlaird in /Users/rlaird/Desktop/Java/Spring-Boot-Docker)
2025-10-26T01:30:26.324-04:00  INFO 35064 --- [           main] c.example.demo.user.AuthControllerTest   : No active profile set, falling back to 1 default profile: "default"
2025-10-26T01:30:26.443-04:00  INFO 35064 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1f47e14d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1be551ec, org.springframework.security.web.context.SecurityContextHolderFilter@687749d1, org.springframework.security.web.header.HeaderWriterFilter@6465f4a, org.springframework.web.filter.CorsFilter@563bbf74, org.springframework.security.web.authentication.logout.LogoutFilter@678c654c, com.example.demo.user.JwtAuthenticationFilter@57a815a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@19a5cfb8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2dad6fc9, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@72eed4db, org.springframework.security.web.session.SessionManagementFilter@428b5b3f, org.springframework.security.web.access.ExceptionTranslationFilter@7fa1c05f, org.springframework.security.web.access.intercept.AuthorizationFilter@167650f8]
2025-10-26T01:30:26.471-04:00  INFO 35064 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2025-10-26T01:30:26.471-04:00  INFO 35064 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2025-10-26T01:30:26.472-04:00  INFO 35064 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms
2025-10-26T01:30:26.476-04:00  INFO 35064 --- [           main] c.example.demo.user.AuthControllerTest   : Started AuthControllerTest in 0.157 seconds (process running for 2.738)
]]></system-out>
  </testcase>
  <testcase name="whenRegisterUser_withExistingUsername_thenReturnsConflict" classname="com.example.demo.user.AuthControllerTest" time="0.009"/>
  <testcase name="whenRegisterUser_withValidData_thenReturnsOk" classname="com.example.demo.user.AuthControllerTest" time="0.004"/>
</testsuite>

================================================================================
--- File: target/surefire-reports/com.example.demo.workorder.WorkOrderServiceTest.txt ---
================================================================================

-------------------------------------------------------------------------------
Test set: com.example.demo.workorder.WorkOrderServiceTest
-------------------------------------------------------------------------------
Tests run: 12, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.378 s <<< FAILURE! -- in com.example.demo.workorder.WorkOrderServiceTest
com.example.demo.workorder.WorkOrderServiceTest.whenDeleteWorkOrder_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse -- Time elapsed: 0.004 s <<< FAILURE!
org.opentest4j.AssertionFailedError: Unexpected exception thrown: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertDoesNotThrow.createAssertionFailedError(AssertDoesNotThrow.java:84)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:53)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:36)
	at org.junit.jupiter.api.Assertions.assertDoesNotThrow(Assertions.java:3168)
	at com.example.demo.workorder.WorkOrderServiceTest.whenDeleteWorkOrder_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse(WorkOrderServiceTest.java:352)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:256)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:197)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.demo.workorder.WorkOrderService$$SpringCGLIB$$0.deleteWorkOrder(<generated>)
	at com.example.demo.workorder.WorkOrderServiceTest.lambda$whenDeleteWorkOrder_givenInvalidIdOrTenant_asAdmin_thenReturnsFalse$8(WorkOrderServiceTest.java:353)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:49)
	... 6 more

com.example.demo.workorder.WorkOrderServiceTest.whenDeleteWorkOrder_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue -- Time elapsed: 0.001 s <<< FAILURE!
org.opentest4j.AssertionFailedError: Unexpected exception thrown: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertDoesNotThrow.createAssertionFailedError(AssertDoesNotThrow.java:84)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:53)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:36)
	at org.junit.jupiter.api.Assertions.assertDoesNotThrow(Assertions.java:3168)
	at com.example.demo.workorder.WorkOrderServiceTest.whenDeleteWorkOrder_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue(WorkOrderServiceTest.java:321)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: org.springframework.security.access.AccessDeniedException: Access Denied
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:256)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:197)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.demo.workorder.WorkOrderService$$SpringCGLIB$$0.deleteWorkOrder(<generated>)
	at com.example.demo.workorder.WorkOrderServiceTest.lambda$whenDeleteWorkOrder_givenValidIdAndTenant_asAdmin_thenDeletesAndReturnsTrue$6(WorkOrderServiceTest.java:322)
	at org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:49)
	... 6 more



================================================================================
--- File: target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst ---
================================================================================

/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/workorder/WorkOrderService.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/user/AuthController.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/WebConfig.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/vendor/VendorService.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/permission/PermissionRepository.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/user/CustomUserDetailsService.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/permission/Permission.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/user/JwtAuthenticationFilter.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/user/UserRepository.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/user/AuthServiceImpl.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/user/LoginRequest.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/exception/UserAlreadyExistsException.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/workorder/WorkOrderController.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/property/PropertyService.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/exception/GlobalExceptionHandler.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/user/JwtTokenProvider.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/user/AuthService.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/SecurityConfig.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/vendor/VendorRepository.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/tenant/TenantRepository.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/user/UserRegistrationRequest.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/property/PropertyRepository.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/workorder/WorkOrder.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/vendor/VendorController.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/user/LoginResponse.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/tenant/Tenant.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/DemoApplication.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/property/Property.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/property/PropertyController.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/user/User.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/vendor/Vendor.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/main/java/com/example/demo/workorder/WorkOrderRepository.java


================================================================================
--- File: target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst ---
================================================================================

com/example/demo/user/LoginResponse.class
com/example/demo/user/JwtTokenProvider.class
com/example/demo/vendor/VendorService.class
com/example/demo/user/LoginRequest.class
com/example/demo/exception/GlobalExceptionHandler.class
com/example/demo/workorder/WorkOrder.class
com/example/demo/SecurityConfig.class
com/example/demo/property/PropertyRepository.class
com/example/demo/WebConfig$1.class
com/example/demo/user/User.class
com/example/demo/property/PropertyService.class
com/example/demo/DemoApplication.class
com/example/demo/workorder/WorkOrderService.class
com/example/demo/vendor/Vendor.class
com/example/demo/workorder/WorkOrderRepository.class
com/example/demo/user/AuthService.class
com/example/demo/user/AuthController.class
com/example/demo/workorder/WorkOrderController.class
com/example/demo/vendor/VendorController.class
com/example/demo/permission/Permission.class
com/example/demo/user/UserRepository.class
com/example/demo/vendor/VendorRepository.class
com/example/demo/user/AuthServiceImpl.class
com/example/demo/tenant/Tenant.class
com/example/demo/user/JwtAuthenticationFilter.class
com/example/demo/WebConfig.class
com/example/demo/property/PropertyController.class
com/example/demo/user/CustomUserDetailsService.class
com/example/demo/user/UserRegistrationRequest.class
com/example/demo/exception/UserAlreadyExistsException.class
com/example/demo/tenant/TenantRepository.class
com/example/demo/permission/PermissionRepository.class
com/example/demo/property/Property.class


================================================================================
--- File: target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/inputFiles.lst ---
================================================================================

/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/test/java/demo/user/AuthServiceTest.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/test/java/demo/workorder/WorkOrderControllerTest.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/test/java/demo/vendor/VendorControllerTest.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/test/java/demo/user/AuthControllerTest.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/test/java/demo/DemoApplication.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/test/java/demo/vendor/VendorServiceTest.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/test/java/demo/property/PropertyServiceTest.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/test/java/demo/workorder/WorkOrderServiceTest.java
/Users/rlaird/Desktop/Java/Spring-Boot-Docker/src/test/java/demo/property/PropertyControllerTest.java


================================================================================
--- File: target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/createdFiles.lst ---
================================================================================

com/example/demo/workorder/WorkOrderServiceTest.class
demo/DemoApplication.class
com/example/demo/workorder/WorkOrderControllerTest.class
com/example/demo/vendor/VendorControllerTest.class
com/example/demo/user/AuthServiceTest.class
com/example/demo/vendor/VendorServiceTest.class
com/example/demo/user/AuthControllerTest.class
com/example/demo/property/PropertyServiceTest.class
com/example/demo/property/PropertyControllerTest.class


